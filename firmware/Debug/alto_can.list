
alto_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08010358  08010358  00020358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080107f4  080107f4  00030150  2**0
                  CONTENTS
  4 .ARM          00000008  080107f4  080107f4  000207f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080107fc  080107fc  00030150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080107fc  080107fc  000207fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010800  08010800  00020800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  08010804  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030150  2**0
                  CONTENTS
 10 .bss          000060f0  20000150  20000150  00030150  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006240  20006240  00030150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030180  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020980  00000000  00000000  000301c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005317  00000000  00000000  00050b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b60  00000000  00000000  00055e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014df  00000000  00000000  000579c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027bbf  00000000  00000000  00058e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022a47  00000000  00000000  00080a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da638  00000000  00000000  000a34a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000079e4  00000000  00000000  0017dae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001854c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010340 	.word	0x08010340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	08010340 	.word	0x08010340

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b970 	b.w	8000e64 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	460d      	mov	r5, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	460f      	mov	r7, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4694      	mov	ip, r2
 8000bb0:	d965      	bls.n	8000c7e <__udivmoddi4+0xe2>
 8000bb2:	fab2 f382 	clz	r3, r2
 8000bb6:	b143      	cbz	r3, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bbc:	f1c3 0220 	rsb	r2, r3, #32
 8000bc0:	409f      	lsls	r7, r3
 8000bc2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc6:	4317      	orrs	r7, r2
 8000bc8:	409c      	lsls	r4, r3
 8000bca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bce:	fa1f f58c 	uxth.w	r5, ip
 8000bd2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bd6:	0c22      	lsrs	r2, r4, #16
 8000bd8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bdc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000be0:	fb01 f005 	mul.w	r0, r1, r5
 8000be4:	4290      	cmp	r0, r2
 8000be6:	d90a      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000be8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bf0:	f080 811c 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	f240 8119 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	4462      	add	r2, ip
 8000bfe:	1a12      	subs	r2, r2, r0
 8000c00:	b2a4      	uxth	r4, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c0e:	fb00 f505 	mul.w	r5, r0, r5
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c16:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c1e:	f080 8107 	bcs.w	8000e30 <__udivmoddi4+0x294>
 8000c22:	42a5      	cmp	r5, r4
 8000c24:	f240 8104 	bls.w	8000e30 <__udivmoddi4+0x294>
 8000c28:	4464      	add	r4, ip
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c30:	1b64      	subs	r4, r4, r5
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40dc      	lsrs	r4, r3
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0xbc>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80ed 	beq.w	8000e26 <__udivmoddi4+0x28a>
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c52:	4608      	mov	r0, r1
 8000c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c58:	fab3 f183 	clz	r1, r3
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	d149      	bne.n	8000cf4 <__udivmoddi4+0x158>
 8000c60:	42ab      	cmp	r3, r5
 8000c62:	d302      	bcc.n	8000c6a <__udivmoddi4+0xce>
 8000c64:	4282      	cmp	r2, r0
 8000c66:	f200 80f8 	bhi.w	8000e5a <__udivmoddi4+0x2be>
 8000c6a:	1a84      	subs	r4, r0, r2
 8000c6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c70:	2001      	movs	r0, #1
 8000c72:	4617      	mov	r7, r2
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d0e2      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	e9c6 4700 	strd	r4, r7, [r6]
 8000c7c:	e7df      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xe6>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f382 	clz	r3, r2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8090 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8c:	1a8a      	subs	r2, r1, r2
 8000c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	2101      	movs	r1, #1
 8000c98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ca0:	0c22      	lsrs	r2, r4, #16
 8000ca2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ca6:	fb0e f005 	mul.w	r0, lr, r5
 8000caa:	4290      	cmp	r0, r2
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cae:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4290      	cmp	r0, r2
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2b8>
 8000cbe:	4645      	mov	r5, r8
 8000cc0:	1a12      	subs	r2, r2, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000ccc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x14e>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x14c>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80bb 	bhi.w	8000e5e <__udivmoddi4+0x2c2>
 8000ce8:	4610      	mov	r0, r2
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cf2:	e79f      	b.n	8000c34 <__udivmoddi4+0x98>
 8000cf4:	f1c1 0720 	rsb	r7, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa05 f401 	lsl.w	r4, r5, r1
 8000d06:	fa20 f307 	lsr.w	r3, r0, r7
 8000d0a:	40fd      	lsrs	r5, r7
 8000d0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d10:	4323      	orrs	r3, r4
 8000d12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d1e:	0c1c      	lsrs	r4, r3, #16
 8000d20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d24:	fb08 f50e 	mul.w	r5, r8, lr
 8000d28:	42a5      	cmp	r5, r4
 8000d2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2b4>
 8000d40:	42a5      	cmp	r5, r4
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2b4>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4464      	add	r4, ip
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	b29d      	uxth	r5, r3
 8000d50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d54:	fb09 4413 	mls	r4, r9, r3, r4
 8000d58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2ac>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2ac>
 8000d72:	3b02      	subs	r3, #2
 8000d74:	4464      	add	r4, ip
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	42ac      	cmp	r4, r5
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46ae      	mov	lr, r5
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x29c>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x298>
 8000d8c:	b156      	cbz	r6, 8000da4 <__udivmoddi4+0x208>
 8000d8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d92:	eb64 040e 	sbc.w	r4, r4, lr
 8000d96:	fa04 f707 	lsl.w	r7, r4, r7
 8000d9a:	40ca      	lsrs	r2, r1
 8000d9c:	40cc      	lsrs	r4, r1
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	e9c6 7400 	strd	r7, r4, [r6]
 8000da4:	4618      	mov	r0, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dac:	f1c3 0120 	rsb	r1, r3, #32
 8000db0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db4:	fa20 f201 	lsr.w	r2, r0, r1
 8000db8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dbc:	409d      	lsls	r5, r3
 8000dbe:	432a      	orrs	r2, r5
 8000dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dd0:	0c11      	lsrs	r1, r2, #16
 8000dd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dda:	428d      	cmp	r5, r1
 8000ddc:	fa04 f403 	lsl.w	r4, r4, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x258>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b0>
 8000dec:	428d      	cmp	r5, r1
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b0>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4461      	add	r1, ip
 8000df4:	1b49      	subs	r1, r1, r5
 8000df6:	b292      	uxth	r2, r2
 8000df8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000e00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e04:	fb05 f10e 	mul.w	r1, r5, lr
 8000e08:	4291      	cmp	r1, r2
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x282>
 8000e0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000e16:	4291      	cmp	r1, r2
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000e1a:	3d02      	subs	r5, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a52      	subs	r2, r2, r1
 8000e20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0xfc>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e708      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000e2c:	4639      	mov	r1, r7
 8000e2e:	e6e6      	b.n	8000bfe <__udivmoddi4+0x62>
 8000e30:	4610      	mov	r0, r2
 8000e32:	e6fb      	b.n	8000c2c <__udivmoddi4+0x90>
 8000e34:	4548      	cmp	r0, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e40:	3b01      	subs	r3, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e44:	4645      	mov	r5, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e48:	462b      	mov	r3, r5
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x258>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e54:	3d02      	subs	r5, #2
 8000e56:	4462      	add	r2, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e70a      	b.n	8000c74 <__udivmoddi4+0xd8>
 8000e5e:	4464      	add	r4, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e742      	b.n	8000cea <__udivmoddi4+0x14e>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <CAN_Send_Cmd>:
 *      Author: kylem
 */
#include <Emm_can.h>

void CAN_Send_Cmd(CAN_HandleTypeDef *hcan, uint8_t *cmd, uint8_t len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	4613      	mov	r3, r2
 8000e74:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0, j = 0, k = 0, l = 0, packNum = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	75fb      	strb	r3, [r7, #23]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	753b      	strb	r3, [r7, #20]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	74fb      	strb	r3, [r7, #19]
 8000e82:	2300      	movs	r3, #0
 8000e84:	75bb      	strb	r3, [r7, #22]
 8000e86:	2300      	movs	r3, #0
 8000e88:	757b      	strb	r3, [r7, #21]
	j = len - 2;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	3b02      	subs	r3, #2
 8000e8e:	753b      	strb	r3, [r7, #20]

	while(i < j)
 8000e90:	e060      	b.n	8000f54 <CAN_Send_Cmd+0xec>
	{
		k = j - i;
 8000e92:	7d3a      	ldrb	r2, [r7, #20]
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	74fb      	strb	r3, [r7, #19]
		TxHeader.StdId = cmd[0];
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <CAN_Send_Cmd+0x100>)
 8000ea2:	601a      	str	r2, [r3, #0]
		TxHeader.ExtId = ((uint32_t)cmd[0] << 8) | (uint32_t)packNum;
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	021a      	lsls	r2, r3, #8
 8000eaa:	7d7b      	ldrb	r3, [r7, #21]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	4a2e      	ldr	r2, [pc, #184]	; (8000f68 <CAN_Send_Cmd+0x100>)
 8000eb0:	6053      	str	r3, [r2, #4]
		CAN_TXData[0] = cmd[1];
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	785a      	ldrb	r2, [r3, #1]
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <CAN_Send_Cmd+0x104>)
 8000eb8:	701a      	strb	r2, [r3, #0]
		TxHeader.IDE = CAN_ID_EXT;
 8000eba:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <CAN_Send_Cmd+0x100>)
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;
 8000ec0:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <CAN_Send_Cmd+0x100>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
		if(k < 8)
 8000ec6:	7cfb      	ldrb	r3, [r7, #19]
 8000ec8:	2b07      	cmp	r3, #7
 8000eca:	d81b      	bhi.n	8000f04 <CAN_Send_Cmd+0x9c>
		{
			for(l=0; l < k; l++,i++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	75bb      	strb	r3, [r7, #22]
 8000ed0:	e00e      	b.n	8000ef0 <CAN_Send_Cmd+0x88>
				CAN_TXData[l + 1] = cmd[i + 2];
 8000ed2:	7dfb      	ldrb	r3, [r7, #23]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	441a      	add	r2, r3
 8000eda:	7dbb      	ldrb	r3, [r7, #22]
 8000edc:	3301      	adds	r3, #1
 8000ede:	7811      	ldrb	r1, [r2, #0]
 8000ee0:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <CAN_Send_Cmd+0x104>)
 8000ee2:	54d1      	strb	r1, [r2, r3]
			for(l=0; l < k; l++,i++)
 8000ee4:	7dbb      	ldrb	r3, [r7, #22]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	75bb      	strb	r3, [r7, #22]
 8000eea:	7dfb      	ldrb	r3, [r7, #23]
 8000eec:	3301      	adds	r3, #1
 8000eee:	75fb      	strb	r3, [r7, #23]
 8000ef0:	7dba      	ldrb	r2, [r7, #22]
 8000ef2:	7cfb      	ldrb	r3, [r7, #19]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3ec      	bcc.n	8000ed2 <CAN_Send_Cmd+0x6a>
			TxHeader.DLC = k + 1;
 8000ef8:	7cfb      	ldrb	r3, [r7, #19]
 8000efa:	3301      	adds	r3, #1
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <CAN_Send_Cmd+0x100>)
 8000f00:	611a      	str	r2, [r3, #16]
 8000f02:	e017      	b.n	8000f34 <CAN_Send_Cmd+0xcc>
		}
		else
		{
			for(l=0; l < 7; l++,i++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	75bb      	strb	r3, [r7, #22]
 8000f08:	e00e      	b.n	8000f28 <CAN_Send_Cmd+0xc0>
				CAN_TXData[l + 1] = cmd[i + 2];
 8000f0a:	7dfb      	ldrb	r3, [r7, #23]
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	441a      	add	r2, r3
 8000f12:	7dbb      	ldrb	r3, [r7, #22]
 8000f14:	3301      	adds	r3, #1
 8000f16:	7811      	ldrb	r1, [r2, #0]
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <CAN_Send_Cmd+0x104>)
 8000f1a:	54d1      	strb	r1, [r2, r3]
			for(l=0; l < 7; l++,i++)
 8000f1c:	7dbb      	ldrb	r3, [r7, #22]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	75bb      	strb	r3, [r7, #22]
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
 8000f24:	3301      	adds	r3, #1
 8000f26:	75fb      	strb	r3, [r7, #23]
 8000f28:	7dbb      	ldrb	r3, [r7, #22]
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d9ed      	bls.n	8000f0a <CAN_Send_Cmd+0xa2>
			TxHeader.DLC = 8;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <CAN_Send_Cmd+0x100>)
 8000f30:	2208      	movs	r2, #8
 8000f32:	611a      	str	r2, [r3, #16]
		}

		HAL_StatusTypeDef msg = HAL_CAN_AddTxMessage(hcan, &TxHeader, CAN_TXData, &TxMailbox);
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <CAN_Send_Cmd+0x108>)
 8000f36:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <CAN_Send_Cmd+0x104>)
 8000f38:	490b      	ldr	r1, [pc, #44]	; (8000f68 <CAN_Send_Cmd+0x100>)
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f005 fc7c 	bl	8006838 <HAL_CAN_AddTxMessage>
 8000f40:	4603      	mov	r3, r0
 8000f42:	74bb      	strb	r3, [r7, #18]
		if (msg != HAL_OK)
 8000f44:	7cbb      	ldrb	r3, [r7, #18]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <CAN_Send_Cmd+0xe6>
		   Error_Handler ();
 8000f4a:	f003 fcad 	bl	80048a8 <Error_Handler>
		++packNum;
 8000f4e:	7d7b      	ldrb	r3, [r7, #21]
 8000f50:	3301      	adds	r3, #1
 8000f52:	757b      	strb	r3, [r7, #21]
	while(i < j)
 8000f54:	7dfa      	ldrb	r2, [r7, #23]
 8000f56:	7d3b      	ldrb	r3, [r7, #20]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d39a      	bcc.n	8000e92 <CAN_Send_Cmd+0x2a>
	}
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000478 	.word	0x20000478
 8000f6c:	20000460 	.word	0x20000460
 8000f70:	200004ac 	.word	0x200004ac

08000f74 <Get_Angle_Request>:

void Get_Angle_Request(CAN_HandleTypeDef *hcan, uint8_t *cmd, uint8_t addr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	71fb      	strb	r3, [r7, #7]
	cmd[0] = addr;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	79fa      	ldrb	r2, [r7, #7]
 8000f86:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x36;
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	2236      	movs	r2, #54	; 0x36
 8000f8e:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x6B;
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	3302      	adds	r3, #2
 8000f94:	226b      	movs	r2, #107	; 0x6b
 8000f96:	701a      	strb	r2, [r3, #0]

	CAN_Send_Cmd(hcan, cmd, 3);
 8000f98:	2203      	movs	r2, #3
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f7ff ff63 	bl	8000e68 <CAN_Send_Cmd>
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <Get_Step_Request>:

void Get_Step_Request(CAN_HandleTypeDef *hcan, uint8_t *cmd, uint8_t addr)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	71fb      	strb	r3, [r7, #7]
	cmd[0] = addr;
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	79fa      	ldrb	r2, [r7, #7]
 8000fbc:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x32;
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	2232      	movs	r2, #50	; 0x32
 8000fc4:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x6B;
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	3302      	adds	r3, #2
 8000fca:	226b      	movs	r2, #107	; 0x6b
 8000fcc:	701a      	strb	r2, [r3, #0]

	CAN_Send_Cmd(hcan, cmd, 3);
 8000fce:	2203      	movs	r2, #3
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f7ff ff48 	bl	8000e68 <CAN_Send_Cmd>
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <Get_Error_Request>:

void Get_Error_Request(CAN_HandleTypeDef *hcan, uint8_t *cmd, uint8_t addr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	4613      	mov	r3, r2
 8000fec:	71fb      	strb	r3, [r7, #7]
	cmd[0] = addr;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	79fa      	ldrb	r2, [r7, #7]
 8000ff2:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x37;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	2237      	movs	r2, #55	; 0x37
 8000ffa:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x6B;
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	3302      	adds	r3, #2
 8001000:	226b      	movs	r2, #107	; 0x6b
 8001002:	701a      	strb	r2, [r3, #0]

	CAN_Send_Cmd(hcan, cmd, 3);
 8001004:	2203      	movs	r2, #3
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f7ff ff2d 	bl	8000e68 <CAN_Send_Cmd>
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <Get_Flag_Request>:

void Get_Flag_Request(CAN_HandleTypeDef *hcan, uint8_t *cmd, uint8_t addr)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	4613      	mov	r3, r2
 8001022:	71fb      	strb	r3, [r7, #7]
	cmd[0] = addr;
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x3A;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3301      	adds	r3, #1
 800102e:	223a      	movs	r2, #58	; 0x3a
 8001030:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x6B;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3302      	adds	r3, #2
 8001036:	226b      	movs	r2, #107	; 0x6b
 8001038:	701a      	strb	r2, [r3, #0]

	CAN_Send_Cmd(hcan, cmd, 3);
 800103a:	2203      	movs	r2, #3
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f7ff ff12 	bl	8000e68 <CAN_Send_Cmd>
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <Stepper_Set_Zero>:

void Stepper_Set_Zero(CAN_HandleTypeDef *hcan, uint8_t *cmd, uint8_t addr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	4613      	mov	r3, r2
 8001058:	71fb      	strb	r3, [r7, #7]
	cmd[0] = addr;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	79fa      	ldrb	r2, [r7, #7]
 800105e:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x0A;
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	3301      	adds	r3, #1
 8001064:	220a      	movs	r2, #10
 8001066:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x6D;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	3302      	adds	r3, #2
 800106c:	226d      	movs	r2, #109	; 0x6d
 800106e:	701a      	strb	r2, [r3, #0]
	cmd[3] = 0x6B;
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	3303      	adds	r3, #3
 8001074:	226b      	movs	r2, #107	; 0x6b
 8001076:	701a      	strb	r2, [r3, #0]

	CAN_Send_Cmd(hcan, cmd, 4);
 8001078:	2204      	movs	r2, #4
 800107a:	68b9      	ldr	r1, [r7, #8]
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f7ff fef3 	bl	8000e68 <CAN_Send_Cmd>
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <Stepper_Enable_Control>:

	CAN_Send_Cmd(hcan, cmd, 4);
}

void Stepper_Enable_Control(CAN_HandleTypeDef *hcan, uint8_t *cmd, uint8_t addr, bool en, bool sync)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	4611      	mov	r1, r2
 8001096:	461a      	mov	r2, r3
 8001098:	460b      	mov	r3, r1
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4613      	mov	r3, r2
 800109e:	71bb      	strb	r3, [r7, #6]
	cmd[0] = addr;
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0xF3;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3301      	adds	r3, #1
 80010aa:	22f3      	movs	r2, #243	; 0xf3
 80010ac:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0xAB;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	3302      	adds	r3, #2
 80010b2:	22ab      	movs	r2, #171	; 0xab
 80010b4:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)en;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3303      	adds	r3, #3
 80010ba:	79ba      	ldrb	r2, [r7, #6]
 80010bc:	701a      	strb	r2, [r3, #0]
	cmd[4] = (uint8_t)sync;
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3304      	adds	r3, #4
 80010c2:	7e3a      	ldrb	r2, [r7, #24]
 80010c4:	701a      	strb	r2, [r3, #0]
	cmd[5] = 0x6B;
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	3305      	adds	r3, #5
 80010ca:	226b      	movs	r2, #107	; 0x6b
 80010cc:	701a      	strb	r2, [r3, #0]

	CAN_Send_Cmd(hcan, cmd, 6);
 80010ce:	2206      	movs	r2, #6
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f7ff fec8 	bl	8000e68 <CAN_Send_Cmd>
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <Stepper_Position_Control>:
		uint16_t vel,
		uint8_t acc,
		uint32_t clk,
		bool abs,
		bool sync)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	4611      	mov	r1, r2
 80010ec:	461a      	mov	r2, r3
 80010ee:	460b      	mov	r3, r1
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	4613      	mov	r3, r2
 80010f4:	71bb      	strb	r3, [r7, #6]
	if (vel > MAX_SPEED)
 80010f6:	8b3b      	ldrh	r3, [r7, #24]
 80010f8:	2bff      	cmp	r3, #255	; 0xff
 80010fa:	d901      	bls.n	8001100 <Stepper_Position_Control+0x20>
		vel = MAX_SPEED;
 80010fc:	23ff      	movs	r3, #255	; 0xff
 80010fe:	833b      	strh	r3, [r7, #24]

	if (acc > MAX_ACC)
		acc = MAX_ACC;

	if (clk > MAX_STEP)
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001106:	d302      	bcc.n	800110e <Stepper_Position_Control+0x2e>
		clk = MAX_STEP;
 8001108:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800110c:	623b      	str	r3, [r7, #32]

	cmd[0] = addr;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	79fa      	ldrb	r2, [r7, #7]
 8001112:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0xFD;
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	3301      	adds	r3, #1
 8001118:	22fd      	movs	r2, #253	; 0xfd
 800111a:	701a      	strb	r2, [r3, #0]
	cmd[2] = (uint8_t)dir;
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	3302      	adds	r3, #2
 8001120:	79ba      	ldrb	r2, [r7, #6]
 8001122:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(vel >> 8);
 8001124:	8b3b      	ldrh	r3, [r7, #24]
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	b29a      	uxth	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	3303      	adds	r3, #3
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	701a      	strb	r2, [r3, #0]
	cmd[4] = (uint8_t)(vel >> 0);
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3304      	adds	r3, #4
 8001136:	8b3a      	ldrh	r2, [r7, #24]
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	701a      	strb	r2, [r3, #0]
	cmd[5] = acc;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	3305      	adds	r3, #5
 8001140:	7f3a      	ldrb	r2, [r7, #28]
 8001142:	701a      	strb	r2, [r3, #0]
	cmd[6] = (uint8_t)(clk >> 24);
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	0e1a      	lsrs	r2, r3, #24
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	3306      	adds	r3, #6
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	701a      	strb	r2, [r3, #0]
	cmd[7] = (uint8_t)(clk >> 16);
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	0c1a      	lsrs	r2, r3, #16
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	3307      	adds	r3, #7
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	701a      	strb	r2, [r3, #0]
	cmd[8] = (uint8_t)(clk >> 8);
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	0a1a      	lsrs	r2, r3, #8
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	3308      	adds	r3, #8
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	701a      	strb	r2, [r3, #0]
	cmd[9] = (uint8_t)(clk >> 0);
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3309      	adds	r3, #9
 800116c:	6a3a      	ldr	r2, [r7, #32]
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	701a      	strb	r2, [r3, #0]
	cmd[10] = (uint8_t)abs;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	330a      	adds	r3, #10
 8001176:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800117a:	701a      	strb	r2, [r3, #0]
	cmd[11] = (uint8_t)sync;
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	330b      	adds	r3, #11
 8001180:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001184:	701a      	strb	r2, [r3, #0]
	cmd[12] = 0x6B;
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	330c      	adds	r3, #12
 800118a:	226b      	movs	r2, #107	; 0x6b
 800118c:	701a      	strb	r2, [r3, #0]

	CAN_Send_Cmd(hcan, cmd, 13);
 800118e:	220d      	movs	r2, #13
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff fe68 	bl	8000e68 <CAN_Send_Cmd>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <Stepper_Stop>:

void Stepper_Stop(CAN_HandleTypeDef *hcan, uint8_t *cmd, uint8_t addr, bool sync)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	4611      	mov	r1, r2
 80011ac:	461a      	mov	r2, r3
 80011ae:	460b      	mov	r3, r1
 80011b0:	71fb      	strb	r3, [r7, #7]
 80011b2:	4613      	mov	r3, r2
 80011b4:	71bb      	strb	r3, [r7, #6]
	cmd[0] = addr;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	79fa      	ldrb	r2, [r7, #7]
 80011ba:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0xFE;
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	3301      	adds	r3, #1
 80011c0:	22fe      	movs	r2, #254	; 0xfe
 80011c2:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x98;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3302      	adds	r3, #2
 80011c8:	2298      	movs	r2, #152	; 0x98
 80011ca:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)sync;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	3303      	adds	r3, #3
 80011d0:	79ba      	ldrb	r2, [r7, #6]
 80011d2:	701a      	strb	r2, [r3, #0]
	cmd[4] = 0x6B;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	3304      	adds	r3, #4
 80011d8:	226b      	movs	r2, #107	; 0x6b
 80011da:	701a      	strb	r2, [r3, #0]

	CAN_Send_Cmd(hcan, cmd, 5);
 80011dc:	2205      	movs	r2, #5
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f7ff fe41 	bl	8000e68 <CAN_Send_Cmd>
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <FK>:
//		}
//	}
//}

void FK()
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0b2      	sub	sp, #200	; 0xc8
 80011f4:	af00      	add	r7, sp, #0
	float T_TCP[4][4];
	T_init(T_TCP);
 80011f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80011fa:	4618      	mov	r0, r3
 80011fc:	f004 fe60 	bl	8005ec0 <T_init>
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 8001200:	2300      	movs	r3, #0
 8001202:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8001206:	e05a      	b.n	80012be <FK+0xce>
	{
		float ans[4][4];
		float _T[4][4];
		DH_Parser(
 8001208:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 800120c:	4933      	ldr	r1, [pc, #204]	; (80012dc <FK+0xec>)
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800121c:	edd3 6a00 	vldr	s13, [r3]
			Alto.DH.Joints[index].d,
			Alto.Current_JointAngle[index] + Alto.DH.Joints[index].theta,
 8001220:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001224:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <FK+0xec>)
 8001226:	339c      	adds	r3, #156	; 0x9c
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	ed93 7a00 	vldr	s14, [r3]
 8001230:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8001234:	4929      	ldr	r1, [pc, #164]	; (80012dc <FK+0xec>)
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8001244:	edd3 7a00 	vldr	s15, [r3]
		DH_Parser(
 8001248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124c:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8001250:	4922      	ldr	r1, [pc, #136]	; (80012dc <FK+0xec>)
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8001268:	491c      	ldr	r1, [pc, #112]	; (80012dc <FK+0xec>)
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8001278:	ed93 6a00 	vldr	s12, [r3]
 800127c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001280:	4618      	mov	r0, r3
 8001282:	eef0 1a46 	vmov.f32	s3, s12
 8001286:	eeb0 1a47 	vmov.f32	s2, s14
 800128a:	eef0 0a67 	vmov.f32	s1, s15
 800128e:	eeb0 0a66 	vmov.f32	s0, s13
 8001292:	f004 fff9 	bl	8006288 <DH_Parser>
			Alto.DH.Joints[index].r,
			Alto.DH.Joints[index].alpha, _T);

		Mat4x4_Mul(T_TCP, _T, ans);
 8001296:	1d3a      	adds	r2, r7, #4
 8001298:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800129c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fb64 	bl	800496e <Mat4x4_Mul>
		Mat4x4_Copy(ans, T_TCP);
 80012a6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 fc19 	bl	8004ae6 <Mat4x4_Copy>
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 80012b4:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80012b8:	3301      	adds	r3, #1
 80012ba:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80012be:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	d9a0      	bls.n	8001208 <FK+0x18>
	}
	//Mat_Print(T_TCP);
	translation_matrix_to_pose(T_TCP, Alto.Current_TCP_Position, Alto.Current_TCP_Rotation);
 80012c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <FK+0xf0>)
 80012cc:	4905      	ldr	r1, [pc, #20]	; (80012e4 <FK+0xf4>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f004 ff75 	bl	80061be <translation_matrix_to_pose>
}
 80012d4:	bf00      	nop
 80012d6:	37c8      	adds	r7, #200	; 0xc8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000016c 	.word	0x2000016c
 80012e0:	20000400 	.word	0x20000400
 80012e4:	200003f4 	.word	0x200003f4

080012e8 <Position>:
 *      Author: kylem
 */
#include "IK.h"

bool Position(float T_TCP[4][4], float theta_pos[3])
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	ed2d 8b02 	vpush	{d8}
 80012ee:	b0a3      	sub	sp, #140	; 0x8c
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	float R_06[3][3];
	float t_06[3];
	T_to_R_and_t(T_TCP, R_06, t_06);
 80012f6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80012fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012fe:	4619      	mov	r1, r3
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f004 fde8 	bl	8005ed6 <T_to_R_and_t>

	float d6 = Alto.DH.Joints[5].d;
 8001306:	4b96      	ldr	r3, [pc, #600]	; (8001560 <Position+0x278>)
 8001308:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800130c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	float d6_vec[3] = {0, 0, d6};
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
 800131c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
	float d6_vec_rot[3];
	Mat3x3_Vec3_Mul(R_06, d6_vec, d6_vec_rot);
 8001322:	f107 0214 	add.w	r2, r7, #20
 8001326:	f107 0120 	add.w	r1, r7, #32
 800132a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fb70 	bl	8004a14 <Mat3x3_Vec3_Mul>
	float W[3];
	W[0] = t_06[0] - d6_vec_rot[0];
 8001334:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001338:	edd7 7a05 	vldr	s15, [r7, #20]
 800133c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001340:	edc7 7a02 	vstr	s15, [r7, #8]
	W[1] = t_06[1] - d6_vec_rot[1];
 8001344:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001348:	edd7 7a06 	vldr	s15, [r7, #24]
 800134c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001350:	edc7 7a03 	vstr	s15, [r7, #12]
	W[2] = t_06[2] - d6_vec_rot[2];
 8001354:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001358:	edd7 7a07 	vldr	s15, [r7, #28]
 800135c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001360:	edc7 7a04 	vstr	s15, [r7, #16]

	float r = sqrtf(W[0] * W[0] + W[1] * W[1]) - Alto.DH.Joints[0].r;
 8001364:	ed97 7a02 	vldr	s14, [r7, #8]
 8001368:	edd7 7a02 	vldr	s15, [r7, #8]
 800136c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001370:	edd7 6a03 	vldr	s13, [r7, #12]
 8001374:	edd7 7a03 	vldr	s15, [r7, #12]
 8001378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001380:	eeb0 0a67 	vmov.f32	s0, s15
 8001384:	f00d fee4 	bl	800f150 <sqrtf>
 8001388:	eeb0 7a40 	vmov.f32	s14, s0
 800138c:	4b74      	ldr	r3, [pc, #464]	; (8001560 <Position+0x278>)
 800138e:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001396:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float s = W[2] - Alto.DH.Joints[0].d;
 800139a:	ed97 7a04 	vldr	s14, [r7, #16]
 800139e:	4b70      	ldr	r3, [pc, #448]	; (8001560 <Position+0x278>)
 80013a0:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 80013a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float a_s = sqrtf(
			Alto.DH.Joints[2].r * Alto.DH.Joints[2].r +
 80013ac:	4b6c      	ldr	r3, [pc, #432]	; (8001560 <Position+0x278>)
 80013ae:	ed93 7a7e 	vldr	s14, [r3, #504]	; 0x1f8
 80013b2:	4b6b      	ldr	r3, [pc, #428]	; (8001560 <Position+0x278>)
 80013b4:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 80013b8:	ee27 7a27 	vmul.f32	s14, s14, s15
			Alto.DH.Joints[3].d * Alto.DH.Joints[3].d);
 80013bc:	4b68      	ldr	r3, [pc, #416]	; (8001560 <Position+0x278>)
 80013be:	edd3 6a81 	vldr	s13, [r3, #516]	; 0x204
 80013c2:	4b67      	ldr	r3, [pc, #412]	; (8001560 <Position+0x278>)
 80013c4:	edd3 7a81 	vldr	s15, [r3, #516]	; 0x204
 80013c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float a_s = sqrtf(
 80013cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d0:	eeb0 0a67 	vmov.f32	s0, s15
 80013d4:	f00d febc 	bl	800f150 <sqrtf>
 80013d8:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	float a_2 = Alto.DH.Joints[1].r;
 80013dc:	4b60      	ldr	r3, [pc, #384]	; (8001560 <Position+0x278>)
 80013de:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80013e2:	677b      	str	r3, [r7, #116]	; 0x74
	float c = (r * r + s * s - a_2 * a_2 - a_s * a_s) / (2 * a_2 * a_s);
 80013e4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80013e8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013ec:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80013f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013f8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80013fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001400:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001404:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001408:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800140c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001410:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001414:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001418:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800141c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001424:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	if(c > 1)//Ik position failed.
 8001428:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800142c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	dd01      	ble.n	800143e <Position+0x156>
		return false;
 800143a:	2300      	movs	r3, #0
 800143c:	e085      	b.n	800154a <Position+0x262>

	float theta3_delta = atan2f(Alto.DH.Joints[2].r, Alto.DH.Joints[3].d);
 800143e:	4b48      	ldr	r3, [pc, #288]	; (8001560 <Position+0x278>)
 8001440:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 8001444:	4b46      	ldr	r3, [pc, #280]	; (8001560 <Position+0x278>)
 8001446:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 800144a:	eef0 0a47 	vmov.f32	s1, s14
 800144e:	eeb0 0a67 	vmov.f32	s0, s15
 8001452:	f00d fe7b 	bl	800f14c <atan2f>
 8001456:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	float thetas = -acosf(c);
 800145a:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 800145e:	f00d fe1d 	bl	800f09c <acosf>
 8001462:	eef0 7a40 	vmov.f32	s15, s0
 8001466:	eef1 7a67 	vneg.f32	s15, s15
 800146a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float theta3 = thetas - theta3_delta + M_PI / 2;
 800146e:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001472:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147a:	ee17 0a90 	vmov	r0, s15
 800147e:	f7ff f80b 	bl	8000498 <__aeabi_f2d>
 8001482:	a335      	add	r3, pc, #212	; (adr r3, 8001558 <Position+0x270>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f7fe fea8 	bl	80001dc <__adddf3>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff fb1a 	bl	8000acc <__aeabi_d2f>
 8001498:	4603      	mov	r3, r0
 800149a:	667b      	str	r3, [r7, #100]	; 0x64
	float theta2 =
			atan2f(s, r) -
 800149c:	edd7 0a20 	vldr	s1, [r7, #128]	; 0x80
 80014a0:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 80014a4:	f00d fe52 	bl	800f14c <atan2f>
 80014a8:	eeb0 8a40 	vmov.f32	s16, s0
			atan2f((a_s * sinf(thetas)), (a_2 + a_s * cosf(thetas)));
 80014ac:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 80014b0:	f00d feb8 	bl	800f224 <sinf>
 80014b4:	eeb0 7a40 	vmov.f32	s14, s0
 80014b8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80014bc:	ee67 8a27 	vmul.f32	s17, s14, s15
 80014c0:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 80014c4:	f00d fe62 	bl	800f18c <cosf>
 80014c8:	eeb0 7a40 	vmov.f32	s14, s0
 80014cc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80014d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	eef0 0a67 	vmov.f32	s1, s15
 80014e0:	eeb0 0a68 	vmov.f32	s0, s17
 80014e4:	f00d fe32 	bl	800f14c <atan2f>
 80014e8:	eef0 7a40 	vmov.f32	s15, s0
	float theta2 =
 80014ec:	ee78 7a67 	vsub.f32	s15, s16, s15
 80014f0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float theta1 = atan2f(W[1], W[0]);
 80014f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80014fc:	eef0 0a47 	vmov.f32	s1, s14
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	f00d fe22 	bl	800f14c <atan2f>
 8001508:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c

	theta_pos[0] = radian_to_degree(theta1);
 800150c:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8001510:	f004 fcb6 	bl	8005e80 <radian_to_degree>
 8001514:	eef0 7a40 	vmov.f32	s15, s0
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	edc3 7a00 	vstr	s15, [r3]
	theta_pos[1] = radian_to_degree(theta2);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	1d1c      	adds	r4, r3, #4
 8001522:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8001526:	f004 fcab 	bl	8005e80 <radian_to_degree>
 800152a:	eef0 7a40 	vmov.f32	s15, s0
 800152e:	edc4 7a00 	vstr	s15, [r4]
	theta_pos[2] = radian_to_degree(theta3);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f103 0408 	add.w	r4, r3, #8
 8001538:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 800153c:	f004 fca0 	bl	8005e80 <radian_to_degree>
 8001540:	eef0 7a40 	vmov.f32	s15, s0
 8001544:	edc4 7a00 	vstr	s15, [r4]
	return true;
 8001548:	2301      	movs	r3, #1
}
 800154a:	4618      	mov	r0, r3
 800154c:	378c      	adds	r7, #140	; 0x8c
 800154e:	46bd      	mov	sp, r7
 8001550:	ecbd 8b02 	vpop	{d8}
 8001554:	bd90      	pop	{r4, r7, pc}
 8001556:	bf00      	nop
 8001558:	54442d18 	.word	0x54442d18
 800155c:	3ff921fb 	.word	0x3ff921fb
 8001560:	2000016c 	.word	0x2000016c

08001564 <Rot_Sol_1>:

void Rot_Sol_1(float R_30[3][3], float R_06[3][3], float theta_rot[6])
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b08f      	sub	sp, #60	; 0x3c
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
	float c4s5 =
			R_30[0][0] * R_06[0][2] +
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	ed93 7a00 	vldr	s14, [r3]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	edd3 7a02 	vldr	s15, [r3, #8]
 800157c:	ee27 7a27 	vmul.f32	s14, s14, s15
			R_30[0][1] * R_06[1][2] +
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	edd3 6a01 	vldr	s13, [r3, #4]
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	330c      	adds	r3, #12
 800158a:	edd3 7a02 	vldr	s15, [r3, #8]
 800158e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			R_30[0][0] * R_06[0][2] +
 8001592:	ee37 7a27 	vadd.f32	s14, s14, s15
			R_30[0][2] * R_06[2][2];
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	edd3 6a02 	vldr	s13, [r3, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	3318      	adds	r3, #24
 80015a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80015a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float c4s5 =
 80015a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float s4s5 =
			R_30[1][0] * R_06[0][2] +
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	330c      	adds	r3, #12
 80015b4:	ed93 7a00 	vldr	s14, [r3]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80015be:	ee27 7a27 	vmul.f32	s14, s14, s15
			R_30[1][1] * R_06[1][2] +
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	330c      	adds	r3, #12
 80015c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	330c      	adds	r3, #12
 80015ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
			R_30[1][0] * R_06[0][2] +
 80015d6:	ee37 7a27 	vadd.f32	s14, s14, s15
			R_30[1][2] * R_06[2][2];
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	330c      	adds	r3, #12
 80015de:	edd3 6a02 	vldr	s13, [r3, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	3318      	adds	r3, #24
 80015e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float s4s5 =
 80015ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	float c5 =
			R_30[2][0] * R_06[0][2] +
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3318      	adds	r3, #24
 80015fa:	ed93 7a00 	vldr	s14, [r3]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	edd3 7a02 	vldr	s15, [r3, #8]
 8001604:	ee27 7a27 	vmul.f32	s14, s14, s15
			R_30[2][1] * R_06[1][2] +
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3318      	adds	r3, #24
 800160c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	330c      	adds	r3, #12
 8001614:	edd3 7a02 	vldr	s15, [r3, #8]
 8001618:	ee66 7aa7 	vmul.f32	s15, s13, s15
			R_30[2][0] * R_06[0][2] +
 800161c:	ee37 7a27 	vadd.f32	s14, s14, s15
			R_30[2][2] * R_06[2][2];
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3318      	adds	r3, #24
 8001624:	edd3 6a02 	vldr	s13, [r3, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3318      	adds	r3, #24
 800162c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001630:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float c5 =
 8001634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001638:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float s5 = sqrtf(1 - c5 * c5);
 800163c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001640:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164c:	eeb0 0a67 	vmov.f32	s0, s15
 8001650:	f00d fd7e 	bl	800f150 <sqrtf>
 8001654:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28

	float s5c6 =
			-(R_30[2][0] * R_06[0][0] +
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3318      	adds	r3, #24
 800165c:	ed93 7a00 	vldr	s14, [r3]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	ee27 7a27 	vmul.f32	s14, s14, s15
			  R_30[2][1] * R_06[1][0] +
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3318      	adds	r3, #24
 800166e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	330c      	adds	r3, #12
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ee66 7aa7 	vmul.f32	s15, s13, s15
			-(R_30[2][0] * R_06[0][0] +
 800167e:	ee37 7a27 	vadd.f32	s14, s14, s15
			  R_30[2][2] * R_06[2][0]);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3318      	adds	r3, #24
 8001686:	edd3 6a02 	vldr	s13, [r3, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	3318      	adds	r3, #24
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	ee66 7aa7 	vmul.f32	s15, s13, s15
			  R_30[2][1] * R_06[1][0] +
 8001696:	ee77 7a27 	vadd.f32	s15, s14, s15
	float s5c6 =
 800169a:	eef1 7a67 	vneg.f32	s15, s15
 800169e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float s5s6 =
			R_30[2][0] * R_06[0][1] +
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3318      	adds	r3, #24
 80016a6:	ed93 7a00 	vldr	s14, [r3]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80016b0:	ee27 7a27 	vmul.f32	s14, s14, s15
			R_30[2][1] * R_06[1][1] +
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3318      	adds	r3, #24
 80016b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	330c      	adds	r3, #12
 80016c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80016c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
			R_30[2][0] * R_06[0][1] +
 80016c8:	ee37 7a27 	vadd.f32	s14, s14, s15
			R_30[2][2] * R_06[2][1];
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3318      	adds	r3, #24
 80016d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	3318      	adds	r3, #24
 80016d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80016dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float s5s6 =
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	edc7 7a08 	vstr	s15, [r7, #32]

	float theta4 = atan2f(s4s5, c4s5);
 80016e8:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80016ec:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80016f0:	f00d fd2c 	bl	800f14c <atan2f>
 80016f4:	ed87 0a07 	vstr	s0, [r7, #28]
	float theta5 = atan2f(s5, c5);
 80016f8:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80016fc:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001700:	f00d fd24 	bl	800f14c <atan2f>
 8001704:	ed87 0a06 	vstr	s0, [r7, #24]
	float theta6 = atan2f(s5s6, s5c6);
 8001708:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800170c:	ed97 0a08 	vldr	s0, [r7, #32]
 8001710:	f00d fd1c 	bl	800f14c <atan2f>
 8001714:	ed87 0a05 	vstr	s0, [r7, #20]

	theta_rot[3] = radian_to_degree(theta4);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f103 040c 	add.w	r4, r3, #12
 800171e:	ed97 0a07 	vldr	s0, [r7, #28]
 8001722:	f004 fbad 	bl	8005e80 <radian_to_degree>
 8001726:	eef0 7a40 	vmov.f32	s15, s0
 800172a:	edc4 7a00 	vstr	s15, [r4]
	theta_rot[4] = radian_to_degree(theta5);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f103 0410 	add.w	r4, r3, #16
 8001734:	ed97 0a06 	vldr	s0, [r7, #24]
 8001738:	f004 fba2 	bl	8005e80 <radian_to_degree>
 800173c:	eef0 7a40 	vmov.f32	s15, s0
 8001740:	edc4 7a00 	vstr	s15, [r4]
	theta_rot[5] = radian_to_degree(theta6);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f103 0414 	add.w	r4, r3, #20
 800174a:	ed97 0a05 	vldr	s0, [r7, #20]
 800174e:	f004 fb97 	bl	8005e80 <radian_to_degree>
 8001752:	eef0 7a40 	vmov.f32	s15, s0
 8001756:	edc4 7a00 	vstr	s15, [r4]
}
 800175a:	bf00      	nop
 800175c:	373c      	adds	r7, #60	; 0x3c
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}

08001762 <Rot_Sol_2>:

void Rot_Sol_2(float R_30[3][3], float R_06[3][3], float theta_rot[6])
{
 8001762:	b590      	push	{r4, r7, lr}
 8001764:	b08f      	sub	sp, #60	; 0x3c
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
	float c4s5 =
			R_30[0][0] * R_06[0][2] +
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	ed93 7a00 	vldr	s14, [r3]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	edd3 7a02 	vldr	s15, [r3, #8]
 800177a:	ee27 7a27 	vmul.f32	s14, s14, s15
			R_30[0][1] * R_06[1][2] +
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	edd3 6a01 	vldr	s13, [r3, #4]
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	330c      	adds	r3, #12
 8001788:	edd3 7a02 	vldr	s15, [r3, #8]
 800178c:	ee66 7aa7 	vmul.f32	s15, s13, s15
			R_30[0][0] * R_06[0][2] +
 8001790:	ee37 7a27 	vadd.f32	s14, s14, s15
			R_30[0][2] * R_06[2][2];
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	edd3 6a02 	vldr	s13, [r3, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	3318      	adds	r3, #24
 800179e:	edd3 7a02 	vldr	s15, [r3, #8]
 80017a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float c4s5 =
 80017a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017aa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float s4s5 =
			R_30[1][0] * R_06[0][2] +
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	330c      	adds	r3, #12
 80017b2:	ed93 7a00 	vldr	s14, [r3]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017bc:	ee27 7a27 	vmul.f32	s14, s14, s15
			R_30[1][1] * R_06[1][2] +
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	330c      	adds	r3, #12
 80017c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	330c      	adds	r3, #12
 80017cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80017d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			R_30[1][0] * R_06[0][2] +
 80017d4:	ee37 7a27 	vadd.f32	s14, s14, s15
			R_30[1][2] * R_06[2][2];
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	330c      	adds	r3, #12
 80017dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	3318      	adds	r3, #24
 80017e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80017e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float s4s5 =
 80017ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	float c5 =
			R_30[2][0] * R_06[0][2] +
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3318      	adds	r3, #24
 80017f8:	ed93 7a00 	vldr	s14, [r3]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001802:	ee27 7a27 	vmul.f32	s14, s14, s15
			R_30[2][1] * R_06[1][2] +
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3318      	adds	r3, #24
 800180a:	edd3 6a01 	vldr	s13, [r3, #4]
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	330c      	adds	r3, #12
 8001812:	edd3 7a02 	vldr	s15, [r3, #8]
 8001816:	ee66 7aa7 	vmul.f32	s15, s13, s15
			R_30[2][0] * R_06[0][2] +
 800181a:	ee37 7a27 	vadd.f32	s14, s14, s15
			R_30[2][2] * R_06[2][2];
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3318      	adds	r3, #24
 8001822:	edd3 6a02 	vldr	s13, [r3, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3318      	adds	r3, #24
 800182a:	edd3 7a02 	vldr	s15, [r3, #8]
 800182e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float c5 =
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float s5 = sqrtf(1 - c5 * c5);
 800183a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800183e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184a:	eeb0 0a67 	vmov.f32	s0, s15
 800184e:	f00d fc7f 	bl	800f150 <sqrtf>
 8001852:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28

	float s5c6 =
			-(R_30[2][0] * R_06[0][0] +
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3318      	adds	r3, #24
 800185a:	ed93 7a00 	vldr	s14, [r3]
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ee27 7a27 	vmul.f32	s14, s14, s15
			  R_30[2][1] * R_06[1][0] +
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3318      	adds	r3, #24
 800186c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	330c      	adds	r3, #12
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	ee66 7aa7 	vmul.f32	s15, s13, s15
			-(R_30[2][0] * R_06[0][0] +
 800187c:	ee37 7a27 	vadd.f32	s14, s14, s15
			  R_30[2][2] * R_06[2][0]);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3318      	adds	r3, #24
 8001884:	edd3 6a02 	vldr	s13, [r3, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	3318      	adds	r3, #24
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee66 7aa7 	vmul.f32	s15, s13, s15
			  R_30[2][1] * R_06[1][0] +
 8001894:	ee77 7a27 	vadd.f32	s15, s14, s15
	float s5c6 =
 8001898:	eef1 7a67 	vneg.f32	s15, s15
 800189c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float s5s6 =
			R_30[2][0] * R_06[0][1] +
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3318      	adds	r3, #24
 80018a4:	ed93 7a00 	vldr	s14, [r3]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80018ae:	ee27 7a27 	vmul.f32	s14, s14, s15
			R_30[2][1] * R_06[1][1] +
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3318      	adds	r3, #24
 80018b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	330c      	adds	r3, #12
 80018be:	edd3 7a01 	vldr	s15, [r3, #4]
 80018c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
			R_30[2][0] * R_06[0][1] +
 80018c6:	ee37 7a27 	vadd.f32	s14, s14, s15
			R_30[2][2] * R_06[2][1];
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3318      	adds	r3, #24
 80018ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	3318      	adds	r3, #24
 80018d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80018da:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float s5s6 =
 80018de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e2:	edc7 7a08 	vstr	s15, [r7, #32]

	float theta4 = atan2f(-s4s5, -c4s5);
 80018e6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018ea:	eeb1 7a67 	vneg.f32	s14, s15
 80018ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018f2:	eef1 7a67 	vneg.f32	s15, s15
 80018f6:	eef0 0a67 	vmov.f32	s1, s15
 80018fa:	eeb0 0a47 	vmov.f32	s0, s14
 80018fe:	f00d fc25 	bl	800f14c <atan2f>
 8001902:	ed87 0a07 	vstr	s0, [r7, #28]
	float theta5 = atan2f(-s5, c5);
 8001906:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800190a:	eef1 7a67 	vneg.f32	s15, s15
 800190e:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	f00d fc19 	bl	800f14c <atan2f>
 800191a:	ed87 0a06 	vstr	s0, [r7, #24]
	float theta6 = atan2f(-s5s6, -s5c6);
 800191e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001922:	eeb1 7a67 	vneg.f32	s14, s15
 8001926:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800192a:	eef1 7a67 	vneg.f32	s15, s15
 800192e:	eef0 0a67 	vmov.f32	s1, s15
 8001932:	eeb0 0a47 	vmov.f32	s0, s14
 8001936:	f00d fc09 	bl	800f14c <atan2f>
 800193a:	ed87 0a05 	vstr	s0, [r7, #20]

	theta_rot[3] = radian_to_degree(theta4);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f103 040c 	add.w	r4, r3, #12
 8001944:	ed97 0a07 	vldr	s0, [r7, #28]
 8001948:	f004 fa9a 	bl	8005e80 <radian_to_degree>
 800194c:	eef0 7a40 	vmov.f32	s15, s0
 8001950:	edc4 7a00 	vstr	s15, [r4]
	theta_rot[4] = radian_to_degree(theta5);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f103 0410 	add.w	r4, r3, #16
 800195a:	ed97 0a06 	vldr	s0, [r7, #24]
 800195e:	f004 fa8f 	bl	8005e80 <radian_to_degree>
 8001962:	eef0 7a40 	vmov.f32	s15, s0
 8001966:	edc4 7a00 	vstr	s15, [r4]
	theta_rot[5] = radian_to_degree(theta6);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f103 0414 	add.w	r4, r3, #20
 8001970:	ed97 0a05 	vldr	s0, [r7, #20]
 8001974:	f004 fa84 	bl	8005e80 <radian_to_degree>
 8001978:	eef0 7a40 	vmov.f32	s15, s0
 800197c:	edc4 7a00 	vstr	s15, [r4]
}
 8001980:	bf00      	nop
 8001982:	373c      	adds	r7, #60	; 0x3c
 8001984:	46bd      	mov	sp, r7
 8001986:	bd90      	pop	{r4, r7, pc}

08001988 <Rotation>:

bool Rotation(float T_TCP[4][4], float theta_pos[3], float theta_rot1[6], float theta_rot2[6])
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b0bc      	sub	sp, #240	; 0xf0
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	603b      	str	r3, [r7, #0]
	float R_06[3][3];
	float t_06[3];
	T_to_R_and_t(T_TCP, R_06, t_06);
 8001996:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800199a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800199e:	4619      	mov	r1, r3
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f004 fa98 	bl	8005ed6 <T_to_R_and_t>

	float T_03[4][4];
	T_init(T_03);
 80019a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019aa:	4618      	mov	r0, r3
 80019ac:	f004 fa88 	bl	8005ec0 <T_init>

	float alpha1 = Alto.DH.Joints[0].alpha;
 80019b0:	4b35      	ldr	r3, [pc, #212]	; (8001a88 <Rotation+0x100>)
 80019b2:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80019b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	float alpha2 = Alto.DH.Joints[1].alpha;
 80019ba:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <Rotation+0x100>)
 80019bc:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80019c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	float alpha3 = Alto.DH.Joints[2].alpha;
 80019c4:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <Rotation+0x100>)
 80019c6:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80019ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	float theta1 = theta_pos[0];
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	float theta2 = theta_pos[1];
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	float theta3 = theta_pos[2];
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	rotate_x(T_03, alpha3);
 80019e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019ea:	ed97 0a39 	vldr	s0, [r7, #228]	; 0xe4
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 faba 	bl	8005f68 <rotate_x>
	rotate_z(T_03, theta3);
 80019f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019f8:	ed97 0a36 	vldr	s0, [r7, #216]	; 0xd8
 80019fc:	4618      	mov	r0, r3
 80019fe:	f004 fb3d 	bl	800607c <rotate_z>
	rotate_x(T_03, alpha2);
 8001a02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a06:	ed97 0a3a 	vldr	s0, [r7, #232]	; 0xe8
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f004 faac 	bl	8005f68 <rotate_x>
	rotate_z(T_03, theta2);
 8001a10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a14:	ed97 0a37 	vldr	s0, [r7, #220]	; 0xdc
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f004 fb2f 	bl	800607c <rotate_z>
	rotate_x(T_03, alpha1);
 8001a1e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a22:	ed97 0a3b 	vldr	s0, [r7, #236]	; 0xec
 8001a26:	4618      	mov	r0, r3
 8001a28:	f004 fa9e 	bl	8005f68 <rotate_x>
	rotate_z(T_03, theta1);
 8001a2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a30:	ed97 0a38 	vldr	s0, [r7, #224]	; 0xe0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f004 fb21 	bl	800607c <rotate_z>

	float R_03[3][3];
	float t_03[3];
	T_to_R_and_t(T_03, R_03, t_03);
 8001a3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a3e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001a42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a46:	4618      	mov	r0, r3
 8001a48:	f004 fa45 	bl	8005ed6 <T_to_R_and_t>

	float R_30[3][3];
	Mat3x3_T(R_03, R_30);
 8001a4c:	f107 0214 	add.w	r2, r7, #20
 8001a50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 f877 	bl	8004b4a <Mat3x3_T>

	Rot_Sol_1(R_30, R_06, theta_rot1);
 8001a5c:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fd7c 	bl	8001564 <Rot_Sol_1>
	Rot_Sol_2(R_30, R_06, theta_rot2);
 8001a6c:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fe73 	bl	8001762 <Rot_Sol_2>
	return true;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	37f0      	adds	r7, #240	; 0xf0
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000016c 	.word	0x2000016c

08001a8c <IK>:

bool IK(float target_tcp_position[3], float target_tcp_rotation[3])
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b0a8      	sub	sp, #160	; 0xa0
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
	float T_TCP[4][4];
	float thetas_pos[3];
	pose_to_translation_matrix(target_tcp_position, target_tcp_rotation, T_TCP);
 8001a96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	6839      	ldr	r1, [r7, #0]
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f004 fb58 	bl	8006154 <pose_to_translation_matrix>
	bool ret_pos = Position(T_TCP, thetas_pos);
 8001aa4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001aa8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fc1a 	bl	80012e8 <Position>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	if (ret_pos == false)
 8001aba:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001abe:	f083 0301 	eor.w	r3, r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <IK+0x40>
		return false;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e1dd      	b.n	8001e88 <IK+0x3fc>

	float thetas1[6];
	float thetas2[6];
	bool ret_rot = Rotation(T_TCP, thetas_pos, thetas1, thetas2);
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ad4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001ad8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001adc:	f7ff ff54 	bl	8001988 <Rotation>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	if (ret_rot == false)
 8001ae6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001aea:	f083 0301 	eor.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <IK+0x6c>
		return false;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e1c7      	b.n	8001e88 <IK+0x3fc>

	thetas1[0] = thetas_pos[0];
 8001af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
	thetas1[1] = thetas_pos[1];
 8001afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
	thetas1[2] = thetas_pos[2];
 8001b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
	thetas2[0] = thetas_pos[0];
 8001b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b06:	60fb      	str	r3, [r7, #12]
	thetas2[1] = thetas_pos[1];
 8001b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b0a:	613b      	str	r3, [r7, #16]
	thetas2[2] = thetas_pos[2];
 8001b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b0e:	617b      	str	r3, [r7, #20]

	//Joint offset adjust
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001b16:	e040      	b.n	8001b9a <IK+0x10e>
	{
		thetas1[index] = (thetas1[index] - Alto.DH.Joints[index].theta);
 8001b18:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	33a0      	adds	r3, #160	; 0xa0
 8001b20:	443b      	add	r3, r7
 8001b22:	3b7c      	subs	r3, #124	; 0x7c
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8001b2c:	49d8      	ldr	r1, [pc, #864]	; (8001e90 <IK+0x404>)
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	33a0      	adds	r3, #160	; 0xa0
 8001b4c:	443b      	add	r3, r7
 8001b4e:	3b7c      	subs	r3, #124	; 0x7c
 8001b50:	edc3 7a00 	vstr	s15, [r3]
		thetas2[index] = (thetas2[index] - Alto.DH.Joints[index].theta);
 8001b54:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	33a0      	adds	r3, #160	; 0xa0
 8001b5c:	443b      	add	r3, r7
 8001b5e:	3b94      	subs	r3, #148	; 0x94
 8001b60:	ed93 7a00 	vldr	s14, [r3]
 8001b64:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8001b68:	49c9      	ldr	r1, [pc, #804]	; (8001e90 <IK+0x404>)
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001b80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	33a0      	adds	r3, #160	; 0xa0
 8001b88:	443b      	add	r3, r7
 8001b8a:	3b94      	subs	r3, #148	; 0x94
 8001b8c:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 8001b90:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001b94:	3301      	adds	r3, #1
 8001b96:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001b9a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001b9e:	2b05      	cmp	r3, #5
 8001ba0:	d9ba      	bls.n	8001b18 <IK+0x8c>
	}

	//IK solution rating
	float total_dist1 = 0;
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float total_dist2 = 0;
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	bool is_theta1_failed = false;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	bool is_theta2_failed = false;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8001bc4:	e0b4      	b.n	8001d30 <IK+0x2a4>
	{
		if(thetas1[index] > Alto.Upper_JointAngle_Limit[index] ||
 8001bc6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	33a0      	adds	r3, #160	; 0xa0
 8001bce:	443b      	add	r3, r7
 8001bd0:	3b7c      	subs	r3, #124	; 0x7c
 8001bd2:	ed93 7a00 	vldr	s14, [r3]
 8001bd6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001bda:	4aad      	ldr	r2, [pc, #692]	; (8001e90 <IK+0x404>)
 8001bdc:	3390      	adds	r3, #144	; 0x90
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	dc14      	bgt.n	8001c1a <IK+0x18e>
				thetas1[index] < Alto.Lower_JointAngle_Limit[index])
 8001bf0:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	33a0      	adds	r3, #160	; 0xa0
 8001bf8:	443b      	add	r3, r7
 8001bfa:	3b7c      	subs	r3, #124	; 0x7c
 8001bfc:	ed93 7a00 	vldr	s14, [r3]
 8001c00:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001c04:	4aa2      	ldr	r2, [pc, #648]	; (8001e90 <IK+0x404>)
 8001c06:	3396      	adds	r3, #150	; 0x96
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
		if(thetas1[index] > Alto.Upper_JointAngle_Limit[index] ||
 8001c10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	d502      	bpl.n	8001c20 <IK+0x194>
			is_theta1_failed = true;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

		if(thetas2[index] > Alto.Upper_JointAngle_Limit[index] ||
 8001c20:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	33a0      	adds	r3, #160	; 0xa0
 8001c28:	443b      	add	r3, r7
 8001c2a:	3b94      	subs	r3, #148	; 0x94
 8001c2c:	ed93 7a00 	vldr	s14, [r3]
 8001c30:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001c34:	4a96      	ldr	r2, [pc, #600]	; (8001e90 <IK+0x404>)
 8001c36:	3390      	adds	r3, #144	; 0x90
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c48:	dc14      	bgt.n	8001c74 <IK+0x1e8>
				thetas2[index] < Alto.Lower_JointAngle_Limit[index])
 8001c4a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	33a0      	adds	r3, #160	; 0xa0
 8001c52:	443b      	add	r3, r7
 8001c54:	3b94      	subs	r3, #148	; 0x94
 8001c56:	ed93 7a00 	vldr	s14, [r3]
 8001c5a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001c5e:	4a8c      	ldr	r2, [pc, #560]	; (8001e90 <IK+0x404>)
 8001c60:	3396      	adds	r3, #150	; 0x96
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	edd3 7a00 	vldr	s15, [r3]
		if(thetas2[index] > Alto.Upper_JointAngle_Limit[index] ||
 8001c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	d502      	bpl.n	8001c7a <IK+0x1ee>
			is_theta2_failed = true;
 8001c74:	2301      	movs	r3, #1
 8001c76:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92

		total_dist1 += fabsf(Alto.Current_JointAngle[index] - thetas1[index]) * Alto.DH.Joints[index].ik_joint_weight;
 8001c7a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001c7e:	4a84      	ldr	r2, [pc, #528]	; (8001e90 <IK+0x404>)
 8001c80:	339c      	adds	r3, #156	; 0x9c
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	ed93 7a00 	vldr	s14, [r3]
 8001c8a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	33a0      	adds	r3, #160	; 0xa0
 8001c92:	443b      	add	r3, r7
 8001c94:	3b7c      	subs	r3, #124	; 0x7c
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9e:	eeb0 7ae7 	vabs.f32	s14, s15
 8001ca2:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8001ca6:	497a      	ldr	r1, [pc, #488]	; (8001e90 <IK+0x404>)
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	f503 73ed 	add.w	r3, r3, #474	; 0x1da
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8001cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ccc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		total_dist2 += fabsf(Alto.Current_JointAngle[index] - thetas2[index]) * Alto.DH.Joints[index].ik_joint_weight;
 8001cd0:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001cd4:	4a6e      	ldr	r2, [pc, #440]	; (8001e90 <IK+0x404>)
 8001cd6:	339c      	adds	r3, #156	; 0x9c
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	ed93 7a00 	vldr	s14, [r3]
 8001ce0:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	33a0      	adds	r3, #160	; 0xa0
 8001ce8:	443b      	add	r3, r7
 8001cea:	3b94      	subs	r3, #148	; 0x94
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf4:	eeb0 7ae7 	vabs.f32	s14, s15
 8001cf8:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8001cfc:	4964      	ldr	r1, [pc, #400]	; (8001e90 <IK+0x404>)
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	f503 73ed 	add.w	r3, r3, #474	; 0x1da
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d22:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 8001d26:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8001d30:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	f67f af46 	bls.w	8001bc6 <IK+0x13a>
	}
	if(is_theta1_failed && is_theta2_failed)
 8001d3a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <IK+0x2c2>
 8001d42:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <IK+0x2c2>
		return false;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e09c      	b.n	8001e88 <IK+0x3fc>

	//Assign IK solution to Target_JointAngle
	if(is_theta1_failed || is_theta2_failed)
 8001d4e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d103      	bne.n	8001d5e <IK+0x2d2>
 8001d56:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d03d      	beq.n	8001dda <IK+0x34e>
	{
		if(is_theta1_failed)
 8001d5e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d01a      	beq.n	8001d9c <IK+0x310>
		{
			for(uint8_t index = 0; index < AXIS_NUM; index++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8001d6c:	e012      	b.n	8001d94 <IK+0x308>
				Alto.Target_JointAngle[index] = thetas1[index];
 8001d6e:	f897 2090 	ldrb.w	r2, [r7, #144]	; 0x90
 8001d72:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	32a0      	adds	r2, #160	; 0xa0
 8001d7a:	443a      	add	r2, r7
 8001d7c:	3a7c      	subs	r2, #124	; 0x7c
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	4943      	ldr	r1, [pc, #268]	; (8001e90 <IK+0x404>)
 8001d82:	33a8      	adds	r3, #168	; 0xa8
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	601a      	str	r2, [r3, #0]
			for(uint8_t index = 0; index < AXIS_NUM; index++)
 8001d8a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8001d94:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d9e8      	bls.n	8001d6e <IK+0x2e2>
		}
		if(is_theta2_failed)
 8001d9c:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01a      	beq.n	8001dda <IK+0x34e>
		{
			for(uint8_t index = 0; index < AXIS_NUM; index++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001daa:	e012      	b.n	8001dd2 <IK+0x346>
				Alto.Target_JointAngle[index] = thetas2[index];
 8001dac:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001db0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	32a0      	adds	r2, #160	; 0xa0
 8001db8:	443a      	add	r2, r7
 8001dba:	3a94      	subs	r2, #148	; 0x94
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	4934      	ldr	r1, [pc, #208]	; (8001e90 <IK+0x404>)
 8001dc0:	33a8      	adds	r3, #168	; 0xa8
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	601a      	str	r2, [r3, #0]
			for(uint8_t index = 0; index < AXIS_NUM; index++)
 8001dc8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001dd2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d9e8      	bls.n	8001dac <IK+0x320>
		}
	}
	if(!is_theta1_failed && !is_theta2_failed)
 8001dda:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001dde:	f083 0301 	eor.w	r3, r3, #1
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d04e      	beq.n	8001e86 <IK+0x3fa>
 8001de8:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001dec:	f083 0301 	eor.w	r3, r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d047      	beq.n	8001e86 <IK+0x3fa>
	{
		//Choose solution 1
		if(total_dist1 < total_dist2)
 8001df6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8001dfa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	d51a      	bpl.n	8001e3e <IK+0x3b2>
		{
			for(uint8_t index = 0; index < AXIS_NUM; index++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001e0e:	e012      	b.n	8001e36 <IK+0x3aa>
				Alto.Target_JointAngle[index] = thetas1[index];
 8001e10:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8001e14:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	32a0      	adds	r2, #160	; 0xa0
 8001e1c:	443a      	add	r2, r7
 8001e1e:	3a7c      	subs	r2, #124	; 0x7c
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	491b      	ldr	r1, [pc, #108]	; (8001e90 <IK+0x404>)
 8001e24:	33a8      	adds	r3, #168	; 0xa8
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	601a      	str	r2, [r3, #0]
			for(uint8_t index = 0; index < AXIS_NUM; index++)
 8001e2c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001e30:	3301      	adds	r3, #1
 8001e32:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001e36:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001e3a:	2b05      	cmp	r3, #5
 8001e3c:	d9e8      	bls.n	8001e10 <IK+0x384>
		}
		//Choose solution 2
		if(total_dist1 >= total_dist2)
 8001e3e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8001e42:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001e46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4e:	db1a      	blt.n	8001e86 <IK+0x3fa>
		{
			for(uint8_t index = 0; index < AXIS_NUM; index++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8001e56:	e012      	b.n	8001e7e <IK+0x3f2>
				Alto.Target_JointAngle[index] = thetas2[index];
 8001e58:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8001e5c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001e60:	0092      	lsls	r2, r2, #2
 8001e62:	32a0      	adds	r2, #160	; 0xa0
 8001e64:	443a      	add	r2, r7
 8001e66:	3a94      	subs	r2, #148	; 0x94
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	4909      	ldr	r1, [pc, #36]	; (8001e90 <IK+0x404>)
 8001e6c:	33a8      	adds	r3, #168	; 0xa8
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	601a      	str	r2, [r3, #0]
			for(uint8_t index = 0; index < AXIS_NUM; index++)
 8001e74:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8001e7e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001e82:	2b05      	cmp	r3, #5
 8001e84:	d9e8      	bls.n	8001e58 <IK+0x3cc>
		}
	}
	return true;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	37a0      	adds	r7, #160	; 0xa0
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	2000016c 	.word	0x2000016c

08001e94 <Robot_Config_Init>:
CAN_TxHeaderTypeDef TxHeader;
CAN_RxHeaderTypeDef RxHeader;
uint32_t TxMailbox;

void Robot_Config_Init(Robot *a)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	//Alto robot parameters config start:
	a->Mode = DISABLE_MODE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 22d5 	strb.w	r2, [r3, #725]	; 0x2d5
	a->Start_Flag = false;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
	a->Stop_Flag = false;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
	a->Start_Entry_Flag = false;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
	a->Home_Flag = false;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9

	a->Homing_State = HITTING_LIMIT_ENTEY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
	a->Homing_Joint = 3;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db

	a->Execute = DO;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
	a->Mov = MOVP;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
	a->Coor = BASE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2

	a->Speed = DEFAULT_FAST_SPEED;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2250      	movs	r2, #80	; 0x50
 8001ef0:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
	a->Acc = DEFAULT_ACC;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	22ff      	movs	r2, #255	; 0xff
 8001ef8:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
	//Alto robot parameters config end.

	//Steppers parameters config start:
	for(int i = 0; i < AXIS_NUM; i++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	e099      	b.n	8002036 <Robot_Config_Init+0x1a2>
	{
		a->Steppers[i].id = (uint8_t)(i + 1);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	b2d8      	uxtb	r0, r3
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	214c      	movs	r1, #76	; 0x4c
 8001f10:	fb01 f303 	mul.w	r3, r1, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	4602      	mov	r2, r0
 8001f18:	701a      	strb	r2, [r3, #0]
		a->Steppers[i].Speed = a->Speed;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 32d3 	ldrb.w	r3, [r3, #723]	; 0x2d3
 8001f20:	b298      	uxth	r0, r3
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	214c      	movs	r1, #76	; 0x4c
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	4602      	mov	r2, r0
 8001f32:	801a      	strh	r2, [r3, #0]
		a->Steppers[i].Acc = a->Acc;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 02d4 	ldrb.w	r0, [r3, #724]	; 0x2d4
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	214c      	movs	r1, #76	; 0x4c
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	3304      	adds	r3, #4
 8001f48:	4602      	mov	r2, r0
 8001f4a:	701a      	strb	r2, [r3, #0]
		a->Steppers[i].Clk = 0;
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	214c      	movs	r1, #76	; 0x4c
 8001f52:	fb01 f303 	mul.w	r3, r1, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	3308      	adds	r3, #8
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
		a->Steppers[i].Angle = 0;
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	214c      	movs	r1, #76	; 0x4c
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	330c      	adds	r3, #12
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
		a->Steppers[i].Error = 0;
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	214c      	movs	r1, #76	; 0x4c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3310      	adds	r3, #16
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
		a->Steppers[i].En = true;
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	214c      	movs	r1, #76	; 0x4c
 8001f8c:	fb01 f303 	mul.w	r3, r1, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	3314      	adds	r3, #20
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
		a->Steppers[i].Block = false;
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	214c      	movs	r1, #76	; 0x4c
 8001f9e:	fb01 f303 	mul.w	r3, r1, r3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3315      	adds	r3, #21
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
		a->Steppers[i].Clk_Delta = 0;
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	214c      	movs	r1, #76	; 0x4c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3340      	adds	r3, #64	; 0x40
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
		a->Steppers[i].Target_Clk = 0;
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	214c      	movs	r1, #76	; 0x4c
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3344      	adds	r3, #68	; 0x44
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
		a->Steppers[i].Target_En = true;
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	214c      	movs	r1, #76	; 0x4c
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	3348      	adds	r3, #72	; 0x48
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
		a->Steppers[i].isStop = false;
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	214c      	movs	r1, #76	; 0x4c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	3349      	adds	r3, #73	; 0x49
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
		a->Steppers[i].Set_Zero_Requset = false;
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	214c      	movs	r1, #76	; 0x4c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	334a      	adds	r3, #74	; 0x4a
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
		for(uint8_t index = 0; index < CLK_DELTA_SAMPLE_LENGTH; index++)
 8002004:	2300      	movs	r3, #0
 8002006:	72fb      	strb	r3, [r7, #11]
 8002008:	e00f      	b.n	800202a <Robot_Config_Init+0x196>
			a->Steppers[i]._Clk_Delta[index] = 0;
 800200a:	7af8      	ldrb	r0, [r7, #11]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	4403      	add	r3, r0
 800201c:	3306      	adds	r3, #6
 800201e:	2200      	movs	r2, #0
 8002020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint8_t index = 0; index < CLK_DELTA_SAMPLE_LENGTH; index++)
 8002024:	7afb      	ldrb	r3, [r7, #11]
 8002026:	3301      	adds	r3, #1
 8002028:	72fb      	strb	r3, [r7, #11]
 800202a:	7afb      	ldrb	r3, [r7, #11]
 800202c:	2b09      	cmp	r3, #9
 800202e:	d9ec      	bls.n	800200a <Robot_Config_Init+0x176>
	for(int i = 0; i < AXIS_NUM; i++)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3301      	adds	r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b05      	cmp	r3, #5
 800203a:	f77f af62 	ble.w	8001f02 <Robot_Config_Init+0x6e>
	}
	//Steppers parameters config end.

	//Steppers IK and DH parameters config start:
	Vec_Init(a->Current_JointAngle, 6);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8002044:	2106      	movs	r1, #6
 8002046:	4618      	mov	r0, r3
 8002048:	f002 fc67 	bl	800491a <Vec_Init>
	Vec3_Init(a->Current_TCP_Position);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002052:	4618      	mov	r0, r3
 8002054:	f002 fc7f 	bl	8004956 <Vec3_Init>
	Vec3_Init(a->Current_TCP_Rotation);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800205e:	4618      	mov	r0, r3
 8002060:	f002 fc79 	bl	8004956 <Vec3_Init>
	Vec_Init(a->Target_JointAngle, 6);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 800206a:	2106      	movs	r1, #6
 800206c:	4618      	mov	r0, r3
 800206e:	f002 fc54 	bl	800491a <Vec_Init>
	Vec3_Init(a->Target_TCP_Position);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8002078:	4618      	mov	r0, r3
 800207a:	f002 fc6c 	bl	8004956 <Vec3_Init>
	Vec3_Init(a->Target_TCP_Rotation);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002084:	4618      	mov	r0, r3
 8002086:	f002 fc66 	bl	8004956 <Vec3_Init>

	a->Upper_JointAngle_Limit[0] = JOINT1_ANGLE_UPPER_LIMIT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a73      	ldr	r2, [pc, #460]	; (800225c <Robot_Config_Init+0x3c8>)
 800208e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	a->Upper_JointAngle_Limit[1] = JOINT2_ANGLE_UPPER_LIMIT;;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a72      	ldr	r2, [pc, #456]	; (8002260 <Robot_Config_Init+0x3cc>)
 8002096:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	a->Upper_JointAngle_Limit[2] = JOINT3_ANGLE_UPPER_LIMIT;;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a70      	ldr	r2, [pc, #448]	; (8002260 <Robot_Config_Init+0x3cc>)
 800209e:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	a->Upper_JointAngle_Limit[3] = JOINT4_ANGLE_UPPER_LIMIT;;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a6d      	ldr	r2, [pc, #436]	; (800225c <Robot_Config_Init+0x3c8>)
 80020a6:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	a->Upper_JointAngle_Limit[4] = JOINT5_ANGLE_UPPER_LIMIT;;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a6d      	ldr	r2, [pc, #436]	; (8002264 <Robot_Config_Init+0x3d0>)
 80020ae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	a->Upper_JointAngle_Limit[5] = JOINT6_ANGLE_UPPER_LIMIT;;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a69      	ldr	r2, [pc, #420]	; (800225c <Robot_Config_Init+0x3c8>)
 80020b6:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254

	a->Lower_JointAngle_Limit[0] = JOINT1_ANGLE_LOWER_LIMIT;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a6a      	ldr	r2, [pc, #424]	; (8002268 <Robot_Config_Init+0x3d4>)
 80020be:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	a->Lower_JointAngle_Limit[1] = JOINT2_ANGLE_LOWER_LIMIT;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a69      	ldr	r2, [pc, #420]	; (800226c <Robot_Config_Init+0x3d8>)
 80020c6:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	a->Lower_JointAngle_Limit[2] = JOINT3_ANGLE_LOWER_LIMIT;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a67      	ldr	r2, [pc, #412]	; (800226c <Robot_Config_Init+0x3d8>)
 80020ce:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	a->Lower_JointAngle_Limit[3] = JOINT4_ANGLE_LOWER_LIMIT;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a64      	ldr	r2, [pc, #400]	; (8002268 <Robot_Config_Init+0x3d4>)
 80020d6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	a->Lower_JointAngle_Limit[4] = JOINT5_ANGLE_LOWER_LIMIT;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a64      	ldr	r2, [pc, #400]	; (8002270 <Robot_Config_Init+0x3dc>)
 80020de:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	a->Lower_JointAngle_Limit[5] = JOINT6_ANGLE_LOWER_LIMIT;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a60      	ldr	r2, [pc, #384]	; (8002268 <Robot_Config_Init+0x3d4>)
 80020e6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

	a->DH.Joints[0].d = d_1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a61      	ldr	r2, [pc, #388]	; (8002274 <Robot_Config_Init+0x3e0>)
 80020ee:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	a->DH.Joints[0].r = r_1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a60      	ldr	r2, [pc, #384]	; (8002278 <Robot_Config_Init+0x3e4>)
 80020f6:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	a->DH.Joints[0].alpha = alpha_1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a58      	ldr	r2, [pc, #352]	; (8002260 <Robot_Config_Init+0x3cc>)
 80020fe:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	a->DH.Joints[0].theta = theta_1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	a->DH.Joints[0].orientation = orientation_1;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	22ff      	movs	r2, #255	; 0xff
 8002110:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
	a->DH.Joints[0].reduction_ratio = reduction_ratio_1;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2232      	movs	r2, #50	; 0x32
 8002118:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
	a->DH.Joints[0].ik_joint_weight = ik_joint_weight_1;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da

	a->DH.Joints[1].d = d_2;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	a->DH.Joints[1].r = r_2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a52      	ldr	r2, [pc, #328]	; (800227c <Robot_Config_Init+0x3e8>)
 8002132:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	a->DH.Joints[1].alpha = alpha_2;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	a->DH.Joints[1].theta = theta_2;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a47      	ldr	r2, [pc, #284]	; (8002260 <Robot_Config_Init+0x3cc>)
 8002144:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	a->DH.Joints[1].orientation = orientation_2;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
	a->DH.Joints[1].reduction_ratio = reduction_ratio_2;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2232      	movs	r2, #50	; 0x32
 8002154:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
	a->DH.Joints[1].ik_joint_weight = ik_joint_weight_2;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee

	a->DH.Joints[2].d = d_3;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	a->DH.Joints[2].r = r_3;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a44      	ldr	r2, [pc, #272]	; (8002280 <Robot_Config_Init+0x3ec>)
 800216e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	a->DH.Joints[2].alpha = alpha_3;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a3a      	ldr	r2, [pc, #232]	; (8002260 <Robot_Config_Init+0x3cc>)
 8002176:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	a->DH.Joints[2].theta = theta_3;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	a->DH.Joints[2].orientation = orientation_3;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	a->DH.Joints[2].reduction_ratio = reduction_ratio_3;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	221e      	movs	r2, #30
 8002190:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	a->DH.Joints[2].ik_joint_weight = ik_joint_weight_3;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202

	a->DH.Joints[3].d = d_4;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a39      	ldr	r2, [pc, #228]	; (8002284 <Robot_Config_Init+0x3f0>)
 80021a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	a->DH.Joints[3].r = r_4;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	a->DH.Joints[3].alpha = alpha_4;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a2e      	ldr	r2, [pc, #184]	; (800226c <Robot_Config_Init+0x3d8>)
 80021b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	a->DH.Joints[3].theta = theta_4;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	a->DH.Joints[3].orientation = orientation_4;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	a->DH.Joints[3].reduction_ratio = reduction_ratio_4;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	221e      	movs	r2, #30
 80021cc:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
	a->DH.Joints[3].ik_joint_weight = ik_joint_weight_4;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2203      	movs	r2, #3
 80021d4:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216

	a->DH.Joints[4].d = d_5;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	a->DH.Joints[4].r = r_5;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	a->DH.Joints[4].alpha = alpha_5;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <Robot_Config_Init+0x3cc>)
 80021f0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	a->DH.Joints[4].theta = theta_5;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	a->DH.Joints[4].orientation = orientation_5;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
	a->DH.Joints[4].reduction_ratio = reduction_ratio_5;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	221e      	movs	r2, #30
 800220a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
	a->DH.Joints[4].ik_joint_weight = ik_joint_weight_5;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2202      	movs	r2, #2
 8002212:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

	a->DH.Joints[5].d = d_6;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <Robot_Config_Init+0x3f4>)
 800221a:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	a->DH.Joints[5].r = r_6;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	a->DH.Joints[5].alpha = alpha_6;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	a->DH.Joints[5].theta = theta_6;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	a->DH.Joints[5].orientation = orientation_6;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
	a->DH.Joints[5].reduction_ratio = reduction_ratio_6;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	221e      	movs	r2, #30
 8002248:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
	a->DH.Joints[5].ik_joint_weight = ik_joint_weight_6;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
	//Steppers IK and DH parameters config end.
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	43340000 	.word	0x43340000
 8002260:	42b40000 	.word	0x42b40000
 8002264:	42f00000 	.word	0x42f00000
 8002268:	c3340000 	.word	0xc3340000
 800226c:	c2b40000 	.word	0xc2b40000
 8002270:	c2f00000 	.word	0xc2f00000
 8002274:	43200000 	.word	0x43200000
 8002278:	420c0000 	.word	0x420c0000
 800227c:	43480000 	.word	0x43480000
 8002280:	42aa0000 	.word	0x42aa0000
 8002284:	431b0000 	.word	0x431b0000
 8002288:	430f8000 	.word	0x430f8000

0800228c <Emm_Request_Handle_Init>:

void Emm_Request_Handle_Init(Request_Handle *emm)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	emm->REQUEST_FLAG = GET_STEP_REQUEST_FLAG;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
	emm->REQUEST_ID = 1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	705a      	strb	r2, [r3, #1]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <PushBack>:

void PushBack(int32_t *Buf, uint8_t len, int16_t val)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
 80022b8:	4613      	mov	r3, r2
 80022ba:	803b      	strh	r3, [r7, #0]
	for(uint8_t i = 1; i < len; i++)
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	e00f      	b.n	80022e2 <PushBack+0x36>
	{
		Buf[i - 1] = Buf[i];
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	441a      	add	r2, r3
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022d0:	3b01      	subs	r3, #1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	440b      	add	r3, r1
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 1; i < len; i++)
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	3301      	adds	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d3eb      	bcc.n	80022c2 <PushBack+0x16>
	}
	Buf[len - 1] = val;
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022f0:	3b01      	subs	r3, #1
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <CLK_Delta_Total>:

int16_t CLK_Delta_Total(int32_t *Buf, uint8_t len)
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	70fb      	strb	r3, [r7, #3]
	int16_t val = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 1; i < len; i++)
 800231a:	2301      	movs	r3, #1
 800231c:	737b      	strb	r3, [r7, #13]
 800231e:	e00f      	b.n	8002340 <CLK_Delta_Total+0x36>
	{
		val += abs(Buf[i]);
 8002320:	7b7b      	ldrb	r3, [r7, #13]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	bfb8      	it	lt
 800232e:	425b      	neglt	r3, r3
 8002330:	b29a      	uxth	r2, r3
 8002332:	89fb      	ldrh	r3, [r7, #14]
 8002334:	4413      	add	r3, r2
 8002336:	b29b      	uxth	r3, r3
 8002338:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 1; i < len; i++)
 800233a:	7b7b      	ldrb	r3, [r7, #13]
 800233c:	3301      	adds	r3, #1
 800233e:	737b      	strb	r3, [r7, #13]
 8002340:	7b7a      	ldrb	r2, [r7, #13]
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	429a      	cmp	r2, r3
 8002346:	d3eb      	bcc.n	8002320 <CLK_Delta_Total+0x16>
	}
	return val;
 8002348:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <Command_State_Machine>:
#include "command.h"
#include "usbd_cdc_if.h"
#include "main.h"

void Command_State_Machine(uint8_t* Buf, uint32_t Len)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
	switch(Buf[0])
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b39      	cmp	r3, #57	; 0x39
 8002368:	f200 8160 	bhi.w	800262c <Command_State_Machine+0x2d4>
 800236c:	a201      	add	r2, pc, #4	; (adr r2, 8002374 <Command_State_Machine+0x1c>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	0800245d 	.word	0x0800245d
 8002378:	08002465 	.word	0x08002465
 800237c:	0800246d 	.word	0x0800246d
 8002380:	08002475 	.word	0x08002475
 8002384:	0800247d 	.word	0x0800247d
 8002388:	08002485 	.word	0x08002485
 800238c:	0800248d 	.word	0x0800248d
 8002390:	08002495 	.word	0x08002495
 8002394:	0800249d 	.word	0x0800249d
 8002398:	080024a5 	.word	0x080024a5
 800239c:	080024ad 	.word	0x080024ad
 80023a0:	080024b5 	.word	0x080024b5
 80023a4:	080024bd 	.word	0x080024bd
 80023a8:	080024c5 	.word	0x080024c5
 80023ac:	080024cd 	.word	0x080024cd
 80023b0:	080024d5 	.word	0x080024d5
 80023b4:	080024dd 	.word	0x080024dd
 80023b8:	080024e5 	.word	0x080024e5
 80023bc:	080024ed 	.word	0x080024ed
 80023c0:	080024f5 	.word	0x080024f5
 80023c4:	080024fd 	.word	0x080024fd
 80023c8:	08002505 	.word	0x08002505
 80023cc:	0800250d 	.word	0x0800250d
 80023d0:	08002515 	.word	0x08002515
 80023d4:	0800251d 	.word	0x0800251d
 80023d8:	08002525 	.word	0x08002525
 80023dc:	0800252d 	.word	0x0800252d
 80023e0:	08002535 	.word	0x08002535
 80023e4:	0800253d 	.word	0x0800253d
 80023e8:	08002545 	.word	0x08002545
 80023ec:	0800254d 	.word	0x0800254d
 80023f0:	08002555 	.word	0x08002555
 80023f4:	0800255d 	.word	0x0800255d
 80023f8:	08002565 	.word	0x08002565
 80023fc:	0800256d 	.word	0x0800256d
 8002400:	08002575 	.word	0x08002575
 8002404:	0800257d 	.word	0x0800257d
 8002408:	08002585 	.word	0x08002585
 800240c:	0800258d 	.word	0x0800258d
 8002410:	08002595 	.word	0x08002595
 8002414:	0800259d 	.word	0x0800259d
 8002418:	080025a5 	.word	0x080025a5
 800241c:	080025ad 	.word	0x080025ad
 8002420:	080025b5 	.word	0x080025b5
 8002424:	080025bd 	.word	0x080025bd
 8002428:	080025c5 	.word	0x080025c5
 800242c:	080025cd 	.word	0x080025cd
 8002430:	080025d5 	.word	0x080025d5
 8002434:	080025dd 	.word	0x080025dd
 8002438:	080025e5 	.word	0x080025e5
 800243c:	080025ed 	.word	0x080025ed
 8002440:	080025f5 	.word	0x080025f5
 8002444:	080025fd 	.word	0x080025fd
 8002448:	08002605 	.word	0x08002605
 800244c:	0800260d 	.word	0x0800260d
 8002450:	08002615 	.word	0x08002615
 8002454:	0800261d 	.word	0x0800261d
 8002458:	08002625 	.word	0x08002625
	{
		//single stepper command
		case ALTO_STEPPER_ABS:
			stepper_abs(Buf);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f915 	bl	800268c <stepper_abs>
			break;
 8002462:	e0e3      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_STEPPER_JOG:
			stepper_jog(Buf);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f949 	bl	80026fc <stepper_jog>
			break;
 800246a:	e0df      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_STEPPER_STOP:
			stepper_stop(Buf);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f987 	bl	8002780 <stepper_stop>
			break;
 8002472:	e0db      	b.n	800262c <Command_State_Machine+0x2d4>

		case ALTO_STEPPER_SET_ZERO:
			stepper_set_zero(Buf);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f9a9 	bl	80027cc <stepper_set_zero>
			break;
 800247a:	e0d7      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_STEPPER_SET_EN:
			stepper_set_en(Buf);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f9cb 	bl	8002818 <stepper_set_en>
			break;
 8002482:	e0d3      	b.n	800262c <Command_State_Machine+0x2d4>

		case ALTO_STEPPER_GET_ANGLE:
			stepper_get_angle(Buf);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f9f5 	bl	8002874 <stepper_get_angle>
			break;
 800248a:	e0cf      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_STEPPER_GET_STEP:
			stepper_get_step(Buf);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 fa51 	bl	8002934 <stepper_get_step>
			break;
 8002492:	e0cb      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_STEPPER_GET_ERROR:
			stepper_get_error(Buf);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 faa1 	bl	80029dc <stepper_get_error>
			break;
 800249a:	e0c7      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_STEPPER_GET_EN:
			stepper_get_en(Buf);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fafd 	bl	8002a9c <stepper_get_en>
			break;
 80024a2:	e0c3      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_STEPPER_GET_BLOCK:
			stepper_get_block(Buf);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fb29 	bl	8002afc <stepper_get_block>
			break;
 80024aa:	e0bf      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_STEPPER_GET_SPEED:
			stepper_get_speed(Buf);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fb55 	bl	8002b5c <stepper_get_speed>
			break;
 80024b2:	e0bb      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_STEPPER_GET_ACC:
			stepper_get_acc(Buf);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fb8f 	bl	8002bd8 <stepper_get_acc>
			break;
 80024ba:	e0b7      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_STEPPER_GET_ISBUSY:
			stepper_get_isbusy(Buf);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fbbb 	bl	8002c38 <stepper_get_isbusy>
			break;
 80024c2:	e0b3      	b.n	800262c <Command_State_Machine+0x2d4>

		case ALTO_STEPPER_SET_SPEED:
			stepper_set_speed(Buf);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fbed 	bl	8002ca4 <stepper_set_speed>
			break;
 80024ca:	e0af      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_STEPPER_SET_ACC:
			stepper_set_acc(Buf);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fc1b 	bl	8002d08 <stepper_set_acc>
			break;
 80024d2:	e0ab      	b.n	800262c <Command_State_Machine+0x2d4>

		//robot command
		case ALTO_GET_MODE:
			get_mode(Buf);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fc3f 	bl	8002d58 <get_mode>
			break;
 80024da:	e0a7      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_POSITION_FLAG:
			get_position_flag(Buf);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fc53 	bl	8002d88 <get_position_flag>
			break;
 80024e2:	e0a3      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_BUSY_FLAG:
			get_busy_flag(Buf);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fc97 	bl	8002e18 <get_busy_flag>
			break;
 80024ea:	e09f      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_HOME_FLAG:
			get_home_flag(Buf);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fcc1 	bl	8002e74 <get_home_flag>
			break;
 80024f2:	e09b      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_TCP_X:
			get_tcp_x(Buf);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fcd7 	bl	8002ea8 <get_tcp_x>
			break;
 80024fa:	e097      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_TCP_Y:
			get_tcp_y(Buf);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fd1d 	bl	8002f3c <get_tcp_y>
			break;
 8002502:	e093      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_TCP_Z:
			get_tcp_z(Buf);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 fd63 	bl	8002fd0 <get_tcp_z>
			break;
 800250a:	e08f      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_TCP_RX:
			get_tcp_rx(Buf);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fda9 	bl	8003064 <get_tcp_rx>
			break;
 8002512:	e08b      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_TCP_RY:
			get_tcp_ry(Buf);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fdef 	bl	80030f8 <get_tcp_ry>
			break;
 800251a:	e087      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_TCP_RZ:
			get_tcp_rz(Buf);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fe35 	bl	800318c <get_tcp_rz>
			break;
 8002522:	e083      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_TARGET_TCP_X:
			get_target_tcp_x(Buf);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fe7b 	bl	8003220 <get_target_tcp_x>
			break;
 800252a:	e07f      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_TARGET_TCP_Y:
			get_target_tcp_y(Buf);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fec1 	bl	80032b4 <get_target_tcp_y>
			break;
 8002532:	e07b      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_TARGET_TCP_Z:
			get_target_tcp_z(Buf);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 ff07 	bl	8003348 <get_target_tcp_z>
			break;
 800253a:	e077      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_TARGET_TCP_RX:
			get_target_tcp_rx(Buf);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 ff4d 	bl	80033dc <get_target_tcp_rx>
			break;
 8002542:	e073      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_TARGET_TCP_RY:
			get_target_tcp_ry(Buf);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 ff93 	bl	8003470 <get_target_tcp_ry>
			break;
 800254a:	e06f      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_TARGET_TCP_RZ:
			get_target_tcp_rz(Buf);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 ffd9 	bl	8003504 <get_target_tcp_rz>
			break;
 8002552:	e06b      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_JOINT_ANGLE:
			get_joint_angle(Buf);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f001 f81f 	bl	8003598 <get_joint_angle>
			break;
 800255a:	e067      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GET_TARGET_JOINT_ANGLE:
			get_target_joint_angle(Buf);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f001 f877 	bl	8003650 <get_target_joint_angle>
			break;
 8002562:	e063      	b.n	800262c <Command_State_Machine+0x2d4>

		case ALTO_OPERATE:
			operate(Buf);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f001 f8cf 	bl	8003708 <operate>
			break;
 800256a:	e05f      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_HOME:
			home(Buf);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f001 f8dd 	bl	800372c <home>
			break;
 8002572:	e05b      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_DISABLE:
			disable(Buf);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f001 f8eb 	bl	8003750 <disable>
			break;
 800257a:	e057      	b.n	800262c <Command_State_Machine+0x2d4>

		case ALTO_START:
			start(Buf);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f001 f8f9 	bl	8003774 <start>
			break;
 8002582:	e053      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_STOP:
			stop(Buf);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f001 f913 	bl	80037b0 <stop>
			break;
 800258a:	e04f      	b.n	800262c <Command_State_Machine+0x2d4>

		case ALTO_SET_JOINT_HOME_OFFSET:
			set_joint_home_offset(Buf);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f001 f92f 	bl	80037f0 <set_joint_home_offset>
			break;
 8002592:	e04b      	b.n	800262c <Command_State_Machine+0x2d4>

		case ALTO_SET_JOINT_ANGLE:
			set_joint_angle(Buf);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f001 f935 	bl	8003804 <set_joint_angle>
			break;
 800259a:	e047      	b.n	800262c <Command_State_Machine+0x2d4>

		case ALTO_SET_COOR:
			set_coor(Buf);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f001 f987 	bl	80038b0 <set_coor>
			break;
 80025a2:	e043      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_SET_SPEED:
			set_speed(Buf);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f001 f9b1 	bl	800390c <set_speed>
			break;
 80025aa:	e03f      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_SET_ACC:
			set_acc(Buf);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f001 f9c7 	bl	8003940 <set_acc>
			break;
 80025b2:	e03b      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_SET_MOV:
			set_mov(Buf);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f001 f9dd 	bl	8003974 <set_mov>
			break;
 80025ba:	e037      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_SET_X:
			set_x(Buf);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f001 fa07 	bl	80039d0 <set_x>
			break;
 80025c2:	e033      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_SET_Y:
			set_y(Buf);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f001 fa45 	bl	8003a54 <set_y>
			break;
 80025ca:	e02f      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_SET_Z:
			set_z(Buf);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f001 fa83 	bl	8003ad8 <set_z>
			break;
 80025d2:	e02b      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_SET_RX:
			set_rx(Buf);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f001 fac1 	bl	8003b5c <set_rx>
			break;
 80025da:	e027      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_SET_RY:
			set_ry(Buf);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f001 faff 	bl	8003be0 <set_ry>
			break;
 80025e2:	e023      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_SET_RZ:
			set_rz(Buf);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f001 fb3d 	bl	8003c64 <set_rz>
			break;
 80025ea:	e01f      	b.n	800262c <Command_State_Machine+0x2d4>

		case ALTO_GO_X:
			go_x(Buf);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f001 fb7b 	bl	8003ce8 <go_x>
			break;
 80025f2:	e01b      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GO_Y:
			go_y(Buf);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f001 fbed 	bl	8003dd4 <go_y>
			break;
 80025fa:	e017      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GO_Z:
			go_z(Buf);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f001 fc5f 	bl	8003ec0 <go_z>
			break;
 8002602:	e013      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GO_RX:
			go_rx(Buf);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f001 fcd1 	bl	8003fac <go_rx>
			break;
 800260a:	e00f      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GO_RY:
			go_ry(Buf);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f001 fd47 	bl	80040a0 <go_ry>
			break;
 8002612:	e00b      	b.n	800262c <Command_State_Machine+0x2d4>
		case ALTO_GO_RZ:
			go_rz(Buf);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f001 fdbd 	bl	8004194 <go_rz>
			break;
 800261a:	e007      	b.n	800262c <Command_State_Machine+0x2d4>

		case ALTO_GO_JOINT:
			go_joint(Buf);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f001 fe33 	bl	8004288 <go_joint>
			break;
 8002622:	e003      	b.n	800262c <Command_State_Machine+0x2d4>

		case ALTO_GET_MESSAGE:
			get_msg(Buf);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f001 fe9f 	bl	8004368 <get_msg>
			break;
 800262a:	bf00      	nop
	}
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <error_return>:

void error_return(uint8_t c)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
	CDC_TXData[0] = c;
 800263e:	4a07      	ldr	r2, [pc, #28]	; (800265c <error_return+0x28>)
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	7013      	strb	r3, [r2, #0]
	CDC_TXData[1] = ERROR_HEX;
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <error_return+0x28>)
 8002646:	22ee      	movs	r2, #238	; 0xee
 8002648:	705a      	strb	r2, [r3, #1]
	CDC_Transmit_FS(CDC_TXData, 2);
 800264a:	2102      	movs	r1, #2
 800264c:	4803      	ldr	r0, [pc, #12]	; (800265c <error_return+0x28>)
 800264e:	f00b ffd9 	bl	800e604 <CDC_Transmit_FS>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000470 	.word	0x20000470

08002660 <done_return>:

void done_return(uint8_t c)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
	CDC_TXData[0] = c;
 800266a:	4a07      	ldr	r2, [pc, #28]	; (8002688 <done_return+0x28>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	7013      	strb	r3, [r2, #0]
	CDC_TXData[1] = DONE_HEX;
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <done_return+0x28>)
 8002672:	22dd      	movs	r2, #221	; 0xdd
 8002674:	705a      	strb	r2, [r3, #1]
	CDC_Transmit_FS(CDC_TXData, 2);
 8002676:	2102      	movs	r1, #2
 8002678:	4803      	ldr	r0, [pc, #12]	; (8002688 <done_return+0x28>)
 800267a:	f00b ffc3 	bl	800e604 <CDC_Transmit_FS>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000470 	.word	0x20000470

0800268c <stepper_abs>:

void stepper_abs(uint8_t* Buf)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	785b      	ldrb	r3, [r3, #1]
 8002698:	73fb      	strb	r3, [r7, #15]
	uint8_t index = id - 1;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	3b01      	subs	r3, #1
 800269e:	73bb      	strb	r3, [r7, #14]
	int32_t clk = (int32_t)(
			((int32_t)Buf[2] << 24) |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3302      	adds	r3, #2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	061a      	lsls	r2, r3, #24
			((int32_t)Buf[3] << 16) |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3303      	adds	r3, #3
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	041b      	lsls	r3, r3, #16
			((int32_t)Buf[2] << 24) |
 80026b0:	431a      	orrs	r2, r3
			((int32_t)Buf[4] << 8) |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	021b      	lsls	r3, r3, #8
			((int32_t)Buf[3] << 16) |
 80026ba:	4313      	orrs	r3, r2
			((int32_t)Buf[5] << 0));
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	3205      	adds	r2, #5
 80026c0:	7812      	ldrb	r2, [r2, #0]
	int32_t clk = (int32_t)(
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60bb      	str	r3, [r7, #8]

	if (id > AXIS_NUM || id == 0)
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	d802      	bhi.n	80026d2 <stepper_abs+0x46>
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d103      	bne.n	80026da <stepper_abs+0x4e>
	{
		error_return(ALTO_STEPPER_ABS);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7ff ffae 	bl	8002634 <error_return>
		return;
 80026d8:	e00b      	b.n	80026f2 <stepper_abs+0x66>
	}

	Alto.Steppers[index].Target_Clk = clk;
 80026da:	7bbb      	ldrb	r3, [r7, #14]
 80026dc:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <stepper_abs+0x6c>)
 80026de:	214c      	movs	r1, #76	; 0x4c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	3344      	adds	r3, #68	; 0x44
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	601a      	str	r2, [r3, #0]

	done_return(ALTO_STEPPER_ABS);
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7ff ffb7 	bl	8002660 <done_return>
}
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	2000016c 	.word	0x2000016c

080026fc <stepper_jog>:

void stepper_jog(uint8_t* Buf)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	785b      	ldrb	r3, [r3, #1]
 8002708:	73fb      	strb	r3, [r7, #15]
	uint8_t index = id - 1;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	3b01      	subs	r3, #1
 800270e:	73bb      	strb	r3, [r7, #14]
	int32_t clk = (int32_t)(
			((int32_t)Buf[2] << 24) |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3302      	adds	r3, #2
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	061a      	lsls	r2, r3, #24
			((int32_t)Buf[3] << 16) |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3303      	adds	r3, #3
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	041b      	lsls	r3, r3, #16
			((int32_t)Buf[2] << 24) |
 8002720:	431a      	orrs	r2, r3
			((int32_t)Buf[4] << 8) |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3304      	adds	r3, #4
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	021b      	lsls	r3, r3, #8
			((int32_t)Buf[3] << 16) |
 800272a:	4313      	orrs	r3, r2
			((int32_t)Buf[5] << 0));
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	3205      	adds	r2, #5
 8002730:	7812      	ldrb	r2, [r2, #0]
	int32_t clk = (int32_t)(
 8002732:	4313      	orrs	r3, r2
 8002734:	60bb      	str	r3, [r7, #8]

	if (id > AXIS_NUM || id == 0)
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	2b06      	cmp	r3, #6
 800273a:	d802      	bhi.n	8002742 <stepper_jog+0x46>
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <stepper_jog+0x4e>
	{
		error_return(ALTO_STEPPER_JOG);
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff ff76 	bl	8002634 <error_return>
		return;
 8002748:	e014      	b.n	8002774 <stepper_jog+0x78>
	}

	Alto.Steppers[index].Target_Clk += clk;
 800274a:	7bbb      	ldrb	r3, [r7, #14]
 800274c:	4a0b      	ldr	r2, [pc, #44]	; (800277c <stepper_jog+0x80>)
 800274e:	214c      	movs	r1, #76	; 0x4c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	3344      	adds	r3, #68	; 0x44
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	7bbb      	ldrb	r3, [r7, #14]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	440a      	add	r2, r1
 8002760:	4906      	ldr	r1, [pc, #24]	; (800277c <stepper_jog+0x80>)
 8002762:	204c      	movs	r0, #76	; 0x4c
 8002764:	fb00 f303 	mul.w	r3, r0, r3
 8002768:	440b      	add	r3, r1
 800276a:	3344      	adds	r3, #68	; 0x44
 800276c:	601a      	str	r2, [r3, #0]

	done_return(ALTO_STEPPER_JOG);
 800276e:	2001      	movs	r0, #1
 8002770:	f7ff ff76 	bl	8002660 <done_return>
}
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	2000016c 	.word	0x2000016c

08002780 <stepper_stop>:

void stepper_stop(uint8_t* Buf)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	785b      	ldrb	r3, [r3, #1]
 800278c:	73fb      	strb	r3, [r7, #15]
	uint8_t index = id - 1;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	3b01      	subs	r3, #1
 8002792:	73bb      	strb	r3, [r7, #14]

	if (id > AXIS_NUM || id == 0)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b06      	cmp	r3, #6
 8002798:	d802      	bhi.n	80027a0 <stepper_stop+0x20>
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d103      	bne.n	80027a8 <stepper_stop+0x28>
	{
		error_return(ALTO_STEPPER_STOP);
 80027a0:	2002      	movs	r0, #2
 80027a2:	f7ff ff47 	bl	8002634 <error_return>
		return;
 80027a6:	e00b      	b.n	80027c0 <stepper_stop+0x40>
	}

	Alto.Steppers[index].isStop = true;
 80027a8:	7bbb      	ldrb	r3, [r7, #14]
 80027aa:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <stepper_stop+0x48>)
 80027ac:	214c      	movs	r1, #76	; 0x4c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	3349      	adds	r3, #73	; 0x49
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]

	done_return(ALTO_STEPPER_STOP);
 80027ba:	2002      	movs	r0, #2
 80027bc:	f7ff ff50 	bl	8002660 <done_return>
}
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	2000016c 	.word	0x2000016c

080027cc <stepper_set_zero>:

void stepper_set_zero(uint8_t* Buf)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	785b      	ldrb	r3, [r3, #1]
 80027d8:	73fb      	strb	r3, [r7, #15]
	uint8_t index = id - 1;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	3b01      	subs	r3, #1
 80027de:	73bb      	strb	r3, [r7, #14]

	if (id > AXIS_NUM || id == 0)
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	2b06      	cmp	r3, #6
 80027e4:	d802      	bhi.n	80027ec <stepper_set_zero+0x20>
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d103      	bne.n	80027f4 <stepper_set_zero+0x28>
	{
		error_return(ALTO_STEPPER_SET_ZERO);
 80027ec:	2003      	movs	r0, #3
 80027ee:	f7ff ff21 	bl	8002634 <error_return>
		return;
 80027f2:	e00b      	b.n	800280c <stepper_set_zero+0x40>
	}

	Alto.Steppers[index].Set_Zero_Requset = true;
 80027f4:	7bbb      	ldrb	r3, [r7, #14]
 80027f6:	4a07      	ldr	r2, [pc, #28]	; (8002814 <stepper_set_zero+0x48>)
 80027f8:	214c      	movs	r1, #76	; 0x4c
 80027fa:	fb01 f303 	mul.w	r3, r1, r3
 80027fe:	4413      	add	r3, r2
 8002800:	334a      	adds	r3, #74	; 0x4a
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]

	done_return(ALTO_STEPPER_SET_ZERO);
 8002806:	2003      	movs	r0, #3
 8002808:	f7ff ff2a 	bl	8002660 <done_return>
}
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000016c 	.word	0x2000016c

08002818 <stepper_set_en>:

void stepper_set_en(uint8_t* Buf)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	73fb      	strb	r3, [r7, #15]
	uint8_t index = id - 1;
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	3b01      	subs	r3, #1
 800282a:	73bb      	strb	r3, [r7, #14]
	bool target_en = (bool)Buf[2];
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3302      	adds	r3, #2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	bf14      	ite	ne
 8002836:	2301      	movne	r3, #1
 8002838:	2300      	moveq	r3, #0
 800283a:	737b      	strb	r3, [r7, #13]

	if (id > AXIS_NUM || id == 0)
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	2b06      	cmp	r3, #6
 8002840:	d802      	bhi.n	8002848 <stepper_set_en+0x30>
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d103      	bne.n	8002850 <stepper_set_en+0x38>
	{
		error_return(ALTO_STEPPER_SET_EN);
 8002848:	2004      	movs	r0, #4
 800284a:	f7ff fef3 	bl	8002634 <error_return>
		return;
 800284e:	e00b      	b.n	8002868 <stepper_set_en+0x50>
	}

	Alto.Steppers[index].Target_En = target_en;
 8002850:	7bbb      	ldrb	r3, [r7, #14]
 8002852:	4a07      	ldr	r2, [pc, #28]	; (8002870 <stepper_set_en+0x58>)
 8002854:	214c      	movs	r1, #76	; 0x4c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	3348      	adds	r3, #72	; 0x48
 800285e:	7b7a      	ldrb	r2, [r7, #13]
 8002860:	701a      	strb	r2, [r3, #0]

	done_return(ALTO_STEPPER_SET_EN);
 8002862:	2004      	movs	r0, #4
 8002864:	f7ff fefc 	bl	8002660 <done_return>
}
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	2000016c 	.word	0x2000016c

08002874 <stepper_get_angle>:

void stepper_get_angle(uint8_t* Buf)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	75fb      	strb	r3, [r7, #23]
	uint8_t index = id - 1;
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	3b01      	subs	r3, #1
 8002886:	75bb      	strb	r3, [r7, #22]

	if (id > AXIS_NUM || id == 0)
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b06      	cmp	r3, #6
 800288c:	d802      	bhi.n	8002894 <stepper_get_angle+0x20>
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d103      	bne.n	800289c <stepper_get_angle+0x28>
	{
		error_return(ALTO_STEPPER_GET_ANGLE);
 8002894:	2005      	movs	r0, #5
 8002896:	f7ff fecd 	bl	8002634 <error_return>
		return;
 800289a:	e042      	b.n	8002922 <stepper_get_angle+0xae>
	}

	float m = Alto.Steppers[index].Angle;
 800289c:	7dbb      	ldrb	r3, [r7, #22]
 800289e:	4a22      	ldr	r2, [pc, #136]	; (8002928 <stepper_get_angle+0xb4>)
 80028a0:	214c      	movs	r1, #76	; 0x4c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	330c      	adds	r3, #12
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	613b      	str	r3, [r7, #16]
	int16_t m_int = (int16_t)m;
 80028ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80028b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028b6:	ee17 3a90 	vmov	r3, s15
 80028ba:	81fb      	strh	r3, [r7, #14]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 80028bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80028cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800292c <stepper_get_angle+0xb8>
 80028d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028dc:	ee17 3a90 	vmov	r3, s15
 80028e0:	81bb      	strh	r3, [r7, #12]

	CDC_TXData[0] = ALTO_STEPPER_GET_ANGLE;
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <stepper_get_angle+0xbc>)
 80028e4:	2205      	movs	r2, #5
 80028e6:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = id;
 80028e8:	4a11      	ldr	r2, [pc, #68]	; (8002930 <stepper_get_angle+0xbc>)
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
 80028ec:	7053      	strb	r3, [r2, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 8);
 80028ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028f2:	121b      	asrs	r3, r3, #8
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <stepper_get_angle+0xbc>)
 80028fa:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_int >> 0);
 80028fc:	89fb      	ldrh	r3, [r7, #14]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <stepper_get_angle+0xbc>)
 8002902:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 8);
 8002904:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002908:	121b      	asrs	r3, r3, #8
 800290a:	b21b      	sxth	r3, r3
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <stepper_get_angle+0xbc>)
 8002910:	711a      	strb	r2, [r3, #4]
	CDC_TXData[5] = (uint8_t)(m_dec >> 0);
 8002912:	89bb      	ldrh	r3, [r7, #12]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <stepper_get_angle+0xbc>)
 8002918:	715a      	strb	r2, [r3, #5]

	CDC_Transmit_FS(CDC_TXData, 6);
 800291a:	2106      	movs	r1, #6
 800291c:	4804      	ldr	r0, [pc, #16]	; (8002930 <stepper_get_angle+0xbc>)
 800291e:	f00b fe71 	bl	800e604 <CDC_Transmit_FS>
}
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000016c 	.word	0x2000016c
 800292c:	461c4000 	.word	0x461c4000
 8002930:	20000470 	.word	0x20000470

08002934 <stepper_get_step>:

void stepper_get_step(uint8_t* Buf)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	785b      	ldrb	r3, [r3, #1]
 8002940:	73fb      	strb	r3, [r7, #15]
	uint8_t index = id - 1;
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	3b01      	subs	r3, #1
 8002946:	73bb      	strb	r3, [r7, #14]

	if (id > AXIS_NUM || id == 0)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b06      	cmp	r3, #6
 800294c:	d802      	bhi.n	8002954 <stepper_get_step+0x20>
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <stepper_get_step+0x28>
	{
		error_return(ALTO_STEPPER_GET_STEP);
 8002954:	2006      	movs	r0, #6
 8002956:	f7ff fe6d 	bl	8002634 <error_return>
		return;
 800295a:	e038      	b.n	80029ce <stepper_get_step+0x9a>
	}

	CDC_TXData[0] = ALTO_STEPPER_GET_STEP;
 800295c:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <stepper_get_step+0xa0>)
 800295e:	2206      	movs	r2, #6
 8002960:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = id;
 8002962:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <stepper_get_step+0xa0>)
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	7053      	strb	r3, [r2, #1]
	CDC_TXData[2] = (uint8_t)(Alto.Steppers[index].Clk >> 24);
 8002968:	7bbb      	ldrb	r3, [r7, #14]
 800296a:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <stepper_get_step+0xa4>)
 800296c:	214c      	movs	r1, #76	; 0x4c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3308      	adds	r3, #8
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	161b      	asrs	r3, r3, #24
 800297a:	b2da      	uxtb	r2, r3
 800297c:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <stepper_get_step+0xa0>)
 800297e:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(Alto.Steppers[index].Clk >> 16);
 8002980:	7bbb      	ldrb	r3, [r7, #14]
 8002982:	4a15      	ldr	r2, [pc, #84]	; (80029d8 <stepper_get_step+0xa4>)
 8002984:	214c      	movs	r1, #76	; 0x4c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3308      	adds	r3, #8
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	141b      	asrs	r3, r3, #16
 8002992:	b2da      	uxtb	r2, r3
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <stepper_get_step+0xa0>)
 8002996:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(Alto.Steppers[index].Clk >> 8);
 8002998:	7bbb      	ldrb	r3, [r7, #14]
 800299a:	4a0f      	ldr	r2, [pc, #60]	; (80029d8 <stepper_get_step+0xa4>)
 800299c:	214c      	movs	r1, #76	; 0x4c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3308      	adds	r3, #8
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	121b      	asrs	r3, r3, #8
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <stepper_get_step+0xa0>)
 80029ae:	711a      	strb	r2, [r3, #4]
	CDC_TXData[5] = (uint8_t)(Alto.Steppers[index].Clk >> 0);
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
 80029b2:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <stepper_get_step+0xa4>)
 80029b4:	214c      	movs	r1, #76	; 0x4c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3308      	adds	r3, #8
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <stepper_get_step+0xa0>)
 80029c4:	715a      	strb	r2, [r3, #5]
	CDC_Transmit_FS(CDC_TXData, 6);
 80029c6:	2106      	movs	r1, #6
 80029c8:	4802      	ldr	r0, [pc, #8]	; (80029d4 <stepper_get_step+0xa0>)
 80029ca:	f00b fe1b 	bl	800e604 <CDC_Transmit_FS>
}
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000470 	.word	0x20000470
 80029d8:	2000016c 	.word	0x2000016c

080029dc <stepper_get_error>:

void stepper_get_error(uint8_t* Buf)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	75fb      	strb	r3, [r7, #23]
	uint8_t index = id - 1;
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	75bb      	strb	r3, [r7, #22]

	if (id > AXIS_NUM || id == 0)
 80029f0:	7dfb      	ldrb	r3, [r7, #23]
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d802      	bhi.n	80029fc <stepper_get_error+0x20>
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d103      	bne.n	8002a04 <stepper_get_error+0x28>
	{
		error_return(ALTO_STEPPER_GET_ERROR);
 80029fc:	2007      	movs	r0, #7
 80029fe:	f7ff fe19 	bl	8002634 <error_return>
		return;
 8002a02:	e042      	b.n	8002a8a <stepper_get_error+0xae>
	}

	float m = Alto.Steppers[index].Error;
 8002a04:	7dbb      	ldrb	r3, [r7, #22]
 8002a06:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <stepper_get_error+0xb4>)
 8002a08:	214c      	movs	r1, #76	; 0x4c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3310      	adds	r3, #16
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	613b      	str	r3, [r7, #16]
	int16_t m_int = (int16_t)m;
 8002a16:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a1e:	ee17 3a90 	vmov	r3, s15
 8002a22:	81fb      	strh	r3, [r7, #14]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 8002a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a28:	ee07 3a90 	vmov	s15, r3
 8002a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a30:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a38:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002a94 <stepper_get_error+0xb8>
 8002a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a44:	ee17 3a90 	vmov	r3, s15
 8002a48:	81bb      	strh	r3, [r7, #12]

	CDC_TXData[0] = ALTO_STEPPER_GET_ERROR;
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <stepper_get_error+0xbc>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = id;
 8002a50:	4a11      	ldr	r2, [pc, #68]	; (8002a98 <stepper_get_error+0xbc>)
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
 8002a54:	7053      	strb	r3, [r2, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 8);
 8002a56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a5a:	121b      	asrs	r3, r3, #8
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <stepper_get_error+0xbc>)
 8002a62:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_int >> 0);
 8002a64:	89fb      	ldrh	r3, [r7, #14]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <stepper_get_error+0xbc>)
 8002a6a:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 8);
 8002a6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a70:	121b      	asrs	r3, r3, #8
 8002a72:	b21b      	sxth	r3, r3
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <stepper_get_error+0xbc>)
 8002a78:	711a      	strb	r2, [r3, #4]
	CDC_TXData[5] = (uint8_t)(m_dec >> 0);
 8002a7a:	89bb      	ldrh	r3, [r7, #12]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <stepper_get_error+0xbc>)
 8002a80:	715a      	strb	r2, [r3, #5]
	CDC_Transmit_FS(CDC_TXData, 6);
 8002a82:	2106      	movs	r1, #6
 8002a84:	4804      	ldr	r0, [pc, #16]	; (8002a98 <stepper_get_error+0xbc>)
 8002a86:	f00b fdbd 	bl	800e604 <CDC_Transmit_FS>
}
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	2000016c 	.word	0x2000016c
 8002a94:	461c4000 	.word	0x461c4000
 8002a98:	20000470 	.word	0x20000470

08002a9c <stepper_get_en>:

void stepper_get_en(uint8_t* Buf)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	785b      	ldrb	r3, [r3, #1]
 8002aa8:	73fb      	strb	r3, [r7, #15]
	uint8_t index = id - 1;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	73bb      	strb	r3, [r7, #14]

	if (id > AXIS_NUM || id == 0)
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d802      	bhi.n	8002abc <stepper_get_en+0x20>
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d103      	bne.n	8002ac4 <stepper_get_en+0x28>
	{
		error_return(ALTO_STEPPER_GET_EN);
 8002abc:	2008      	movs	r0, #8
 8002abe:	f7ff fdb9 	bl	8002634 <error_return>
		return;
 8002ac2:	e014      	b.n	8002aee <stepper_get_en+0x52>
	}

	CDC_TXData[0] = ALTO_STEPPER_GET_EN;
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <stepper_get_en+0x58>)
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = id;
 8002aca:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <stepper_get_en+0x58>)
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	7053      	strb	r3, [r2, #1]
	CDC_TXData[2] = (uint8_t)(Alto.Steppers[index].En >> 0);
 8002ad0:	7bbb      	ldrb	r3, [r7, #14]
 8002ad2:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <stepper_get_en+0x5c>)
 8002ad4:	214c      	movs	r1, #76	; 0x4c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3314      	adds	r3, #20
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <stepper_get_en+0x58>)
 8002ae4:	709a      	strb	r2, [r3, #2]
	CDC_Transmit_FS(CDC_TXData, 3);
 8002ae6:	2103      	movs	r1, #3
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <stepper_get_en+0x58>)
 8002aea:	f00b fd8b 	bl	800e604 <CDC_Transmit_FS>
}
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000470 	.word	0x20000470
 8002af8:	2000016c 	.word	0x2000016c

08002afc <stepper_get_block>:

void stepper_get_block(uint8_t* Buf)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	785b      	ldrb	r3, [r3, #1]
 8002b08:	73fb      	strb	r3, [r7, #15]
	uint8_t index = id - 1;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	73bb      	strb	r3, [r7, #14]

	if (id > AXIS_NUM || id == 0)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d802      	bhi.n	8002b1c <stepper_get_block+0x20>
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d103      	bne.n	8002b24 <stepper_get_block+0x28>
	{
		error_return(ALTO_STEPPER_GET_BLOCK);
 8002b1c:	2009      	movs	r0, #9
 8002b1e:	f7ff fd89 	bl	8002634 <error_return>
		return;
 8002b22:	e014      	b.n	8002b4e <stepper_get_block+0x52>
	}

	CDC_TXData[0] = ALTO_STEPPER_GET_BLOCK;
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <stepper_get_block+0x58>)
 8002b26:	2209      	movs	r2, #9
 8002b28:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = id;
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <stepper_get_block+0x58>)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	7053      	strb	r3, [r2, #1]
	CDC_TXData[2] = (uint8_t)(Alto.Steppers[index].Block >> 0);
 8002b30:	7bbb      	ldrb	r3, [r7, #14]
 8002b32:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <stepper_get_block+0x5c>)
 8002b34:	214c      	movs	r1, #76	; 0x4c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3315      	adds	r3, #21
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <stepper_get_block+0x58>)
 8002b44:	709a      	strb	r2, [r3, #2]
	CDC_Transmit_FS(CDC_TXData, 3);
 8002b46:	2103      	movs	r1, #3
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <stepper_get_block+0x58>)
 8002b4a:	f00b fd5b 	bl	800e604 <CDC_Transmit_FS>
}
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000470 	.word	0x20000470
 8002b58:	2000016c 	.word	0x2000016c

08002b5c <stepper_get_speed>:

void stepper_get_speed(uint8_t* Buf)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	785b      	ldrb	r3, [r3, #1]
 8002b68:	73fb      	strb	r3, [r7, #15]
	uint8_t index = id - 1;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	73bb      	strb	r3, [r7, #14]

	if (id > AXIS_NUM || id == 0)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	2b06      	cmp	r3, #6
 8002b74:	d802      	bhi.n	8002b7c <stepper_get_speed+0x20>
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d103      	bne.n	8002b84 <stepper_get_speed+0x28>
	{
		error_return(ALTO_STEPPER_GET_SPEED);
 8002b7c:	200a      	movs	r0, #10
 8002b7e:	f7ff fd59 	bl	8002634 <error_return>
		return;
 8002b82:	e021      	b.n	8002bc8 <stepper_get_speed+0x6c>
	}

	CDC_TXData[0] = ALTO_STEPPER_GET_SPEED;
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <stepper_get_speed+0x74>)
 8002b86:	220a      	movs	r2, #10
 8002b88:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = id;
 8002b8a:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <stepper_get_speed+0x74>)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	7053      	strb	r3, [r2, #1]
	CDC_TXData[2] = (uint8_t)(Alto.Steppers[index].Speed >> 8);
 8002b90:	7bbb      	ldrb	r3, [r7, #14]
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <stepper_get_speed+0x78>)
 8002b94:	214c      	movs	r1, #76	; 0x4c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	0a1b      	lsrs	r3, r3, #8
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <stepper_get_speed+0x74>)
 8002ba8:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(Alto.Steppers[index].Speed >> 0);
 8002baa:	7bbb      	ldrb	r3, [r7, #14]
 8002bac:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <stepper_get_speed+0x78>)
 8002bae:	214c      	movs	r1, #76	; 0x4c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <stepper_get_speed+0x74>)
 8002bbe:	70da      	strb	r2, [r3, #3]
	CDC_Transmit_FS(CDC_TXData, 4);
 8002bc0:	2104      	movs	r1, #4
 8002bc2:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <stepper_get_speed+0x74>)
 8002bc4:	f00b fd1e 	bl	800e604 <CDC_Transmit_FS>
}
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000470 	.word	0x20000470
 8002bd4:	2000016c 	.word	0x2000016c

08002bd8 <stepper_get_acc>:

void stepper_get_acc(uint8_t* Buf)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	785b      	ldrb	r3, [r3, #1]
 8002be4:	73fb      	strb	r3, [r7, #15]
	uint8_t index = id - 1;
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	73bb      	strb	r3, [r7, #14]

	if (id > AXIS_NUM || id == 0)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d802      	bhi.n	8002bf8 <stepper_get_acc+0x20>
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d103      	bne.n	8002c00 <stepper_get_acc+0x28>
	{
		error_return(ALTO_STEPPER_GET_ACC);
 8002bf8:	200b      	movs	r0, #11
 8002bfa:	f7ff fd1b 	bl	8002634 <error_return>
		return;
 8002bfe:	e013      	b.n	8002c28 <stepper_get_acc+0x50>
	}

	CDC_TXData[0] = ALTO_STEPPER_GET_ACC;
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <stepper_get_acc+0x58>)
 8002c02:	220b      	movs	r2, #11
 8002c04:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = id;
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <stepper_get_acc+0x58>)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	7053      	strb	r3, [r2, #1]
	CDC_TXData[2] = (uint8_t)(Alto.Steppers[index].Acc >> 0);
 8002c0c:	7bbb      	ldrb	r3, [r7, #14]
 8002c0e:	4a09      	ldr	r2, [pc, #36]	; (8002c34 <stepper_get_acc+0x5c>)
 8002c10:	214c      	movs	r1, #76	; 0x4c
 8002c12:	fb01 f303 	mul.w	r3, r1, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	3304      	adds	r3, #4
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <stepper_get_acc+0x58>)
 8002c1e:	709a      	strb	r2, [r3, #2]
	CDC_Transmit_FS(CDC_TXData, 3);
 8002c20:	2103      	movs	r1, #3
 8002c22:	4803      	ldr	r0, [pc, #12]	; (8002c30 <stepper_get_acc+0x58>)
 8002c24:	f00b fcee 	bl	800e604 <CDC_Transmit_FS>
}
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000470 	.word	0x20000470
 8002c34:	2000016c 	.word	0x2000016c

08002c38 <stepper_get_isbusy>:

void stepper_get_isbusy(uint8_t* Buf)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	785b      	ldrb	r3, [r3, #1]
 8002c44:	73fb      	strb	r3, [r7, #15]
	uint8_t index = id - 1;
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	73bb      	strb	r3, [r7, #14]

	if (id > AXIS_NUM || id == 0)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d802      	bhi.n	8002c58 <stepper_get_isbusy+0x20>
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <stepper_get_isbusy+0x28>
	{
		error_return(ALTO_STEPPER_GET_ISBUSY);
 8002c58:	200c      	movs	r0, #12
 8002c5a:	f7ff fceb 	bl	8002634 <error_return>
		return;
 8002c5e:	e019      	b.n	8002c94 <stepper_get_isbusy+0x5c>
	}

	CDC_TXData[0] = ALTO_STEPPER_GET_ISBUSY;
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <stepper_get_isbusy+0x64>)
 8002c62:	220c      	movs	r2, #12
 8002c64:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = id;
 8002c66:	4a0d      	ldr	r2, [pc, #52]	; (8002c9c <stepper_get_isbusy+0x64>)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	7053      	strb	r3, [r2, #1]
	CDC_TXData[2] = (uint8_t)(Alto.Steppers[index].Clk_Delta != 0);
 8002c6c:	7bbb      	ldrb	r3, [r7, #14]
 8002c6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <stepper_get_isbusy+0x68>)
 8002c70:	214c      	movs	r1, #76	; 0x4c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3340      	adds	r3, #64	; 0x40
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf14      	ite	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	2300      	moveq	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <stepper_get_isbusy+0x64>)
 8002c8a:	709a      	strb	r2, [r3, #2]
	CDC_Transmit_FS(CDC_TXData, 3);
 8002c8c:	2103      	movs	r1, #3
 8002c8e:	4803      	ldr	r0, [pc, #12]	; (8002c9c <stepper_get_isbusy+0x64>)
 8002c90:	f00b fcb8 	bl	800e604 <CDC_Transmit_FS>
}
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000470 	.word	0x20000470
 8002ca0:	2000016c 	.word	0x2000016c

08002ca4 <stepper_set_speed>:

void stepper_set_speed(uint8_t* Buf)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	785b      	ldrb	r3, [r3, #1]
 8002cb0:	73fb      	strb	r3, [r7, #15]
	uint8_t index = id - 1;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	73bb      	strb	r3, [r7, #14]
	uint16_t spd = (uint16_t)(
					((uint16_t)Buf[2] << 8) |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3302      	adds	r3, #2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	b21a      	sxth	r2, r3
					((uint16_t)Buf[3] << 0));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3303      	adds	r3, #3
 8002cc6:	781b      	ldrb	r3, [r3, #0]
					((uint16_t)Buf[2] << 8) |
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b21b      	sxth	r3, r3
	uint16_t spd = (uint16_t)(
 8002cce:	81bb      	strh	r3, [r7, #12]

	if (id > AXIS_NUM || id == 0)
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b06      	cmp	r3, #6
 8002cd4:	d802      	bhi.n	8002cdc <stepper_set_speed+0x38>
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d103      	bne.n	8002ce4 <stepper_set_speed+0x40>
	{
		error_return(ALTO_STEPPER_SET_SPEED);
 8002cdc:	200d      	movs	r0, #13
 8002cde:	f7ff fca9 	bl	8002634 <error_return>
		return;
 8002ce2:	e00b      	b.n	8002cfc <stepper_set_speed+0x58>
	}

	Alto.Steppers[index].Speed = spd;
 8002ce4:	7bbb      	ldrb	r3, [r7, #14]
 8002ce6:	4a07      	ldr	r2, [pc, #28]	; (8002d04 <stepper_set_speed+0x60>)
 8002ce8:	214c      	movs	r1, #76	; 0x4c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	89ba      	ldrh	r2, [r7, #12]
 8002cf4:	801a      	strh	r2, [r3, #0]
	done_return(ALTO_STEPPER_SET_SPEED);
 8002cf6:	200d      	movs	r0, #13
 8002cf8:	f7ff fcb2 	bl	8002660 <done_return>
}
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	2000016c 	.word	0x2000016c

08002d08 <stepper_set_acc>:

void stepper_set_acc(uint8_t* Buf)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	785b      	ldrb	r3, [r3, #1]
 8002d14:	73fb      	strb	r3, [r7, #15]
	uint8_t index = id - 1;
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	73bb      	strb	r3, [r7, #14]
	uint8_t acc = Buf[2];
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	789b      	ldrb	r3, [r3, #2]
 8002d20:	737b      	strb	r3, [r7, #13]

	if (id > AXIS_NUM || id == 0)
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	2b06      	cmp	r3, #6
 8002d26:	d802      	bhi.n	8002d2e <stepper_set_acc+0x26>
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d103      	bne.n	8002d36 <stepper_set_acc+0x2e>
	{
		error_return(ALTO_STEPPER_SET_ACC);
 8002d2e:	200e      	movs	r0, #14
 8002d30:	f7ff fc80 	bl	8002634 <error_return>
		return;
 8002d34:	e00b      	b.n	8002d4e <stepper_set_acc+0x46>
	}

	Alto.Steppers[index].Acc = acc;
 8002d36:	7bbb      	ldrb	r3, [r7, #14]
 8002d38:	4a06      	ldr	r2, [pc, #24]	; (8002d54 <stepper_set_acc+0x4c>)
 8002d3a:	214c      	movs	r1, #76	; 0x4c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3304      	adds	r3, #4
 8002d44:	7b7a      	ldrb	r2, [r7, #13]
 8002d46:	701a      	strb	r2, [r3, #0]
	done_return(ALTO_STEPPER_SET_ACC);
 8002d48:	200e      	movs	r0, #14
 8002d4a:	f7ff fc89 	bl	8002660 <done_return>
}
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	2000016c 	.word	0x2000016c

08002d58 <get_mode>:

void get_mode(uint8_t* Buf)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	CDC_TXData[0] = ALTO_GET_MODE;
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <get_mode+0x28>)
 8002d62:	220f      	movs	r2, #15
 8002d64:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(Alto.Mode >> 0);
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <get_mode+0x2c>)
 8002d68:	f893 22d5 	ldrb.w	r2, [r3, #725]	; 0x2d5
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <get_mode+0x28>)
 8002d6e:	705a      	strb	r2, [r3, #1]
	CDC_Transmit_FS(CDC_TXData, 2);
 8002d70:	2102      	movs	r1, #2
 8002d72:	4803      	ldr	r0, [pc, #12]	; (8002d80 <get_mode+0x28>)
 8002d74:	f00b fc46 	bl	800e604 <CDC_Transmit_FS>
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000470 	.word	0x20000470
 8002d84:	2000016c 	.word	0x2000016c

08002d88 <get_position_flag>:

void get_position_flag(uint8_t* Buf)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	bool Position_Flag = true;//1 : In target position, 0 : NOt in target position.
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]

	for(uint8_t index = 0; index < AXIS_NUM; index++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	73bb      	strb	r3, [r7, #14]
 8002d98:	e023      	b.n	8002de2 <get_position_flag+0x5a>
	{
		if (fabsf(Alto.Target_JointAngle[index] - Alto.Current_JointAngle[index]) > CLK_DISTANCE_TOL)
 8002d9a:	7bbb      	ldrb	r3, [r7, #14]
 8002d9c:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <get_position_flag+0x88>)
 8002d9e:	33a8      	adds	r3, #168	; 0xa8
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	ed93 7a00 	vldr	s14, [r3]
 8002da8:	7bbb      	ldrb	r3, [r7, #14]
 8002daa:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <get_position_flag+0x88>)
 8002dac:	339c      	adds	r3, #156	; 0x9c
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dba:	eef0 7ae7 	vabs.f32	s15, s15
 8002dbe:	ee17 0a90 	vmov	r0, s15
 8002dc2:	f7fd fb69 	bl	8000498 <__aeabi_f2d>
 8002dc6:	a310      	add	r3, pc, #64	; (adr r3, 8002e08 <get_position_flag+0x80>)
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f7fd fe4c 	bl	8000a68 <__aeabi_dcmpgt>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <get_position_flag+0x54>
		{
			Position_Flag = false;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
			break;
 8002dda:	e005      	b.n	8002de8 <get_position_flag+0x60>
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 8002ddc:	7bbb      	ldrb	r3, [r7, #14]
 8002dde:	3301      	adds	r3, #1
 8002de0:	73bb      	strb	r3, [r7, #14]
 8002de2:	7bbb      	ldrb	r3, [r7, #14]
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d9d8      	bls.n	8002d9a <get_position_flag+0x12>
		}
	}

	CDC_TXData[0] = ALTO_GET_POSITION_FLAG;
 8002de8:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <get_position_flag+0x8c>)
 8002dea:	2210      	movs	r2, #16
 8002dec:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(Position_Flag >> 0);
 8002dee:	7bfa      	ldrb	r2, [r7, #15]
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <get_position_flag+0x8c>)
 8002df2:	705a      	strb	r2, [r3, #1]
	CDC_Transmit_FS(CDC_TXData, 2);
 8002df4:	2102      	movs	r1, #2
 8002df6:	4807      	ldr	r0, [pc, #28]	; (8002e14 <get_position_flag+0x8c>)
 8002df8:	f00b fc04 	bl	800e604 <CDC_Transmit_FS>
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	f3af 8000 	nop.w
 8002e08:	9999999a 	.word	0x9999999a
 8002e0c:	3fb99999 	.word	0x3fb99999
 8002e10:	2000016c 	.word	0x2000016c
 8002e14:	20000470 	.word	0x20000470

08002e18 <get_busy_flag>:

void get_busy_flag(uint8_t* Buf)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	bool Busy_Flag = 1;//1 : Moving, 0 : Static.
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]

	for(uint8_t index = 0; index < AXIS_NUM; index++)
 8002e24:	2300      	movs	r3, #0
 8002e26:	73bb      	strb	r3, [r7, #14]
 8002e28:	e00e      	b.n	8002e48 <get_busy_flag+0x30>
	{
		if(Alto.Steppers[index].Clk_Delta != 0)
 8002e2a:	7bbb      	ldrb	r3, [r7, #14]
 8002e2c:	4a0f      	ldr	r2, [pc, #60]	; (8002e6c <get_busy_flag+0x54>)
 8002e2e:	214c      	movs	r1, #76	; 0x4c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	3340      	adds	r3, #64	; 0x40
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <get_busy_flag+0x2a>
		{
			Busy_Flag = 1;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 8002e42:	7bbb      	ldrb	r3, [r7, #14]
 8002e44:	3301      	adds	r3, #1
 8002e46:	73bb      	strb	r3, [r7, #14]
 8002e48:	7bbb      	ldrb	r3, [r7, #14]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d9ed      	bls.n	8002e2a <get_busy_flag+0x12>
		}
	}
	CDC_TXData[0] = ALTO_GET_BUSY_FLAG;
 8002e4e:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <get_busy_flag+0x58>)
 8002e50:	2211      	movs	r2, #17
 8002e52:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(Busy_Flag >> 0);
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <get_busy_flag+0x58>)
 8002e58:	705a      	strb	r2, [r3, #1]
	CDC_Transmit_FS(CDC_TXData, 2);
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	4804      	ldr	r0, [pc, #16]	; (8002e70 <get_busy_flag+0x58>)
 8002e5e:	f00b fbd1 	bl	800e604 <CDC_Transmit_FS>
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000016c 	.word	0x2000016c
 8002e70:	20000470 	.word	0x20000470

08002e74 <get_home_flag>:

void get_home_flag(uint8_t* Buf)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	CDC_TXData[0] = ALTO_GET_HOME_FLAG;
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <get_home_flag+0x2c>)
 8002e7e:	2212      	movs	r2, #18
 8002e80:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(Alto.Home_Flag >> 0);
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <get_home_flag+0x30>)
 8002e84:	f893 32d9 	ldrb.w	r3, [r3, #729]	; 0x2d9
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <get_home_flag+0x2c>)
 8002e8c:	705a      	strb	r2, [r3, #1]
	CDC_Transmit_FS(CDC_TXData, 2);
 8002e8e:	2102      	movs	r1, #2
 8002e90:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <get_home_flag+0x2c>)
 8002e92:	f00b fbb7 	bl	800e604 <CDC_Transmit_FS>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000470 	.word	0x20000470
 8002ea4:	2000016c 	.word	0x2000016c

08002ea8 <get_tcp_x>:

void get_tcp_x(uint8_t* Buf)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	float m = Alto.Current_TCP_Position[0];
 8002eb0:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <get_tcp_x+0x88>)
 8002eb2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8002eb6:	60fb      	str	r3, [r7, #12]
	int16_t m_int = (int16_t)m;
 8002eb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ec0:	ee17 3a90 	vmov	r3, s15
 8002ec4:	817b      	strh	r3, [r7, #10]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 8002ec6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ed2:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eda:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002f34 <get_tcp_x+0x8c>
 8002ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ee6:	ee17 3a90 	vmov	r3, s15
 8002eea:	813b      	strh	r3, [r7, #8]

	CDC_TXData[0] = ALTO_GET_TCP_X;
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <get_tcp_x+0x90>)
 8002eee:	2213      	movs	r2, #19
 8002ef0:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(m_int >> 8);
 8002ef2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ef6:	121b      	asrs	r3, r3, #8
 8002ef8:	b21b      	sxth	r3, r3
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <get_tcp_x+0x90>)
 8002efe:	705a      	strb	r2, [r3, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 0);
 8002f00:	897b      	ldrh	r3, [r7, #10]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <get_tcp_x+0x90>)
 8002f06:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_dec >> 8);
 8002f08:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002f0c:	121b      	asrs	r3, r3, #8
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <get_tcp_x+0x90>)
 8002f14:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 0);
 8002f16:	893b      	ldrh	r3, [r7, #8]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <get_tcp_x+0x90>)
 8002f1c:	711a      	strb	r2, [r3, #4]

	CDC_Transmit_FS(CDC_TXData, 5);
 8002f1e:	2105      	movs	r1, #5
 8002f20:	4805      	ldr	r0, [pc, #20]	; (8002f38 <get_tcp_x+0x90>)
 8002f22:	f00b fb6f 	bl	800e604 <CDC_Transmit_FS>
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	2000016c 	.word	0x2000016c
 8002f34:	461c4000 	.word	0x461c4000
 8002f38:	20000470 	.word	0x20000470

08002f3c <get_tcp_y>:

void get_tcp_y(uint8_t* Buf)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	float m = Alto.Current_TCP_Position[1];
 8002f44:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <get_tcp_y+0x88>)
 8002f46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002f4a:	60fb      	str	r3, [r7, #12]
	int16_t m_int = (int16_t)m;
 8002f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f54:	ee17 3a90 	vmov	r3, s15
 8002f58:	817b      	strh	r3, [r7, #10]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 8002f5a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f66:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002fc8 <get_tcp_y+0x8c>
 8002f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f7a:	ee17 3a90 	vmov	r3, s15
 8002f7e:	813b      	strh	r3, [r7, #8]

	CDC_TXData[0] = ALTO_GET_TCP_Y;
 8002f80:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <get_tcp_y+0x90>)
 8002f82:	2214      	movs	r2, #20
 8002f84:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(m_int >> 8);
 8002f86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f8a:	121b      	asrs	r3, r3, #8
 8002f8c:	b21b      	sxth	r3, r3
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <get_tcp_y+0x90>)
 8002f92:	705a      	strb	r2, [r3, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 0);
 8002f94:	897b      	ldrh	r3, [r7, #10]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <get_tcp_y+0x90>)
 8002f9a:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_dec >> 8);
 8002f9c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fa0:	121b      	asrs	r3, r3, #8
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <get_tcp_y+0x90>)
 8002fa8:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 0);
 8002faa:	893b      	ldrh	r3, [r7, #8]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <get_tcp_y+0x90>)
 8002fb0:	711a      	strb	r2, [r3, #4]

	CDC_Transmit_FS(CDC_TXData, 5);
 8002fb2:	2105      	movs	r1, #5
 8002fb4:	4805      	ldr	r0, [pc, #20]	; (8002fcc <get_tcp_y+0x90>)
 8002fb6:	f00b fb25 	bl	800e604 <CDC_Transmit_FS>
}
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	2000016c 	.word	0x2000016c
 8002fc8:	461c4000 	.word	0x461c4000
 8002fcc:	20000470 	.word	0x20000470

08002fd0 <get_tcp_z>:

void get_tcp_z(uint8_t* Buf)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	float m = Alto.Current_TCP_Position[2];
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <get_tcp_z+0x88>)
 8002fda:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8002fde:	60fb      	str	r3, [r7, #12]
	int16_t m_int = (int16_t)m;
 8002fe0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe8:	ee17 3a90 	vmov	r3, s15
 8002fec:	817b      	strh	r3, [r7, #10]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 8002fee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ffa:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003002:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800305c <get_tcp_z+0x8c>
 8003006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800300a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800300e:	ee17 3a90 	vmov	r3, s15
 8003012:	813b      	strh	r3, [r7, #8]

	CDC_TXData[0] = ALTO_GET_TCP_Z;
 8003014:	4b12      	ldr	r3, [pc, #72]	; (8003060 <get_tcp_z+0x90>)
 8003016:	2215      	movs	r2, #21
 8003018:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(m_int >> 8);
 800301a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800301e:	121b      	asrs	r3, r3, #8
 8003020:	b21b      	sxth	r3, r3
 8003022:	b2da      	uxtb	r2, r3
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <get_tcp_z+0x90>)
 8003026:	705a      	strb	r2, [r3, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 0);
 8003028:	897b      	ldrh	r3, [r7, #10]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <get_tcp_z+0x90>)
 800302e:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_dec >> 8);
 8003030:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003034:	121b      	asrs	r3, r3, #8
 8003036:	b21b      	sxth	r3, r3
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <get_tcp_z+0x90>)
 800303c:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 0);
 800303e:	893b      	ldrh	r3, [r7, #8]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <get_tcp_z+0x90>)
 8003044:	711a      	strb	r2, [r3, #4]

	CDC_Transmit_FS(CDC_TXData, 5);
 8003046:	2105      	movs	r1, #5
 8003048:	4805      	ldr	r0, [pc, #20]	; (8003060 <get_tcp_z+0x90>)
 800304a:	f00b fadb 	bl	800e604 <CDC_Transmit_FS>
}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2000016c 	.word	0x2000016c
 800305c:	461c4000 	.word	0x461c4000
 8003060:	20000470 	.word	0x20000470

08003064 <get_tcp_rx>:

void get_tcp_rx(uint8_t* Buf)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	float m = Alto.Current_TCP_Rotation[0];
 800306c:	4b1f      	ldr	r3, [pc, #124]	; (80030ec <get_tcp_rx+0x88>)
 800306e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003072:	60fb      	str	r3, [r7, #12]
	int16_t m_int = (int16_t)m;
 8003074:	edd7 7a03 	vldr	s15, [r7, #12]
 8003078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800307c:	ee17 3a90 	vmov	r3, s15
 8003080:	817b      	strh	r3, [r7, #10]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 8003082:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003086:	ee07 3a90 	vmov	s15, r3
 800308a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800308e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003096:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80030f0 <get_tcp_rx+0x8c>
 800309a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800309e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030a2:	ee17 3a90 	vmov	r3, s15
 80030a6:	813b      	strh	r3, [r7, #8]

	CDC_TXData[0] = ALTO_GET_TCP_RX;
 80030a8:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <get_tcp_rx+0x90>)
 80030aa:	2216      	movs	r2, #22
 80030ac:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(m_int >> 8);
 80030ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030b2:	121b      	asrs	r3, r3, #8
 80030b4:	b21b      	sxth	r3, r3
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <get_tcp_rx+0x90>)
 80030ba:	705a      	strb	r2, [r3, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 0);
 80030bc:	897b      	ldrh	r3, [r7, #10]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <get_tcp_rx+0x90>)
 80030c2:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_dec >> 8);
 80030c4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80030c8:	121b      	asrs	r3, r3, #8
 80030ca:	b21b      	sxth	r3, r3
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <get_tcp_rx+0x90>)
 80030d0:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 0);
 80030d2:	893b      	ldrh	r3, [r7, #8]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <get_tcp_rx+0x90>)
 80030d8:	711a      	strb	r2, [r3, #4]

	CDC_Transmit_FS(CDC_TXData, 5);
 80030da:	2105      	movs	r1, #5
 80030dc:	4805      	ldr	r0, [pc, #20]	; (80030f4 <get_tcp_rx+0x90>)
 80030de:	f00b fa91 	bl	800e604 <CDC_Transmit_FS>
}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	2000016c 	.word	0x2000016c
 80030f0:	461c4000 	.word	0x461c4000
 80030f4:	20000470 	.word	0x20000470

080030f8 <get_tcp_ry>:

void get_tcp_ry(uint8_t* Buf)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	float m = Alto.Current_TCP_Rotation[1];
 8003100:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <get_tcp_ry+0x88>)
 8003102:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8003106:	60fb      	str	r3, [r7, #12]
	int16_t m_int = (int16_t)m;
 8003108:	edd7 7a03 	vldr	s15, [r7, #12]
 800310c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003110:	ee17 3a90 	vmov	r3, s15
 8003114:	817b      	strh	r3, [r7, #10]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 8003116:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003122:	ed97 7a03 	vldr	s14, [r7, #12]
 8003126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003184 <get_tcp_ry+0x8c>
 800312e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003136:	ee17 3a90 	vmov	r3, s15
 800313a:	813b      	strh	r3, [r7, #8]

	CDC_TXData[0] = ALTO_GET_TCP_RY;
 800313c:	4b12      	ldr	r3, [pc, #72]	; (8003188 <get_tcp_ry+0x90>)
 800313e:	2217      	movs	r2, #23
 8003140:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(m_int >> 8);
 8003142:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003146:	121b      	asrs	r3, r3, #8
 8003148:	b21b      	sxth	r3, r3
 800314a:	b2da      	uxtb	r2, r3
 800314c:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <get_tcp_ry+0x90>)
 800314e:	705a      	strb	r2, [r3, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 0);
 8003150:	897b      	ldrh	r3, [r7, #10]
 8003152:	b2da      	uxtb	r2, r3
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <get_tcp_ry+0x90>)
 8003156:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_dec >> 8);
 8003158:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800315c:	121b      	asrs	r3, r3, #8
 800315e:	b21b      	sxth	r3, r3
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <get_tcp_ry+0x90>)
 8003164:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 0);
 8003166:	893b      	ldrh	r3, [r7, #8]
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4b07      	ldr	r3, [pc, #28]	; (8003188 <get_tcp_ry+0x90>)
 800316c:	711a      	strb	r2, [r3, #4]

	CDC_Transmit_FS(CDC_TXData, 5);
 800316e:	2105      	movs	r1, #5
 8003170:	4805      	ldr	r0, [pc, #20]	; (8003188 <get_tcp_ry+0x90>)
 8003172:	f00b fa47 	bl	800e604 <CDC_Transmit_FS>
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	2000016c 	.word	0x2000016c
 8003184:	461c4000 	.word	0x461c4000
 8003188:	20000470 	.word	0x20000470

0800318c <get_tcp_rz>:

void get_tcp_rz(uint8_t* Buf)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	float m = Alto.Current_TCP_Rotation[2];
 8003194:	4b1f      	ldr	r3, [pc, #124]	; (8003214 <get_tcp_rz+0x88>)
 8003196:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800319a:	60fb      	str	r3, [r7, #12]
	int16_t m_int = (int16_t)m;
 800319c:	edd7 7a03 	vldr	s15, [r7, #12]
 80031a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031a4:	ee17 3a90 	vmov	r3, s15
 80031a8:	817b      	strh	r3, [r7, #10]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 80031aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80031ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031be:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003218 <get_tcp_rz+0x8c>
 80031c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031ca:	ee17 3a90 	vmov	r3, s15
 80031ce:	813b      	strh	r3, [r7, #8]

	CDC_TXData[0] = ALTO_GET_TCP_RZ;
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <get_tcp_rz+0x90>)
 80031d2:	2218      	movs	r2, #24
 80031d4:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(m_int >> 8);
 80031d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031da:	121b      	asrs	r3, r3, #8
 80031dc:	b21b      	sxth	r3, r3
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <get_tcp_rz+0x90>)
 80031e2:	705a      	strb	r2, [r3, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 0);
 80031e4:	897b      	ldrh	r3, [r7, #10]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <get_tcp_rz+0x90>)
 80031ea:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_dec >> 8);
 80031ec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80031f0:	121b      	asrs	r3, r3, #8
 80031f2:	b21b      	sxth	r3, r3
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <get_tcp_rz+0x90>)
 80031f8:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 0);
 80031fa:	893b      	ldrh	r3, [r7, #8]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <get_tcp_rz+0x90>)
 8003200:	711a      	strb	r2, [r3, #4]

	CDC_Transmit_FS(CDC_TXData, 5);
 8003202:	2105      	movs	r1, #5
 8003204:	4805      	ldr	r0, [pc, #20]	; (800321c <get_tcp_rz+0x90>)
 8003206:	f00b f9fd 	bl	800e604 <CDC_Transmit_FS>
}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	2000016c 	.word	0x2000016c
 8003218:	461c4000 	.word	0x461c4000
 800321c:	20000470 	.word	0x20000470

08003220 <get_target_tcp_x>:

void get_target_tcp_x(uint8_t* Buf)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	float m = Alto.Target_TCP_Position[0];
 8003228:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <get_target_tcp_x+0x88>)
 800322a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800322e:	60fb      	str	r3, [r7, #12]
	int16_t m_int = (int16_t)m;
 8003230:	edd7 7a03 	vldr	s15, [r7, #12]
 8003234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003238:	ee17 3a90 	vmov	r3, s15
 800323c:	817b      	strh	r3, [r7, #10]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 800323e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800324a:	ed97 7a03 	vldr	s14, [r7, #12]
 800324e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003252:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80032ac <get_target_tcp_x+0x8c>
 8003256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800325a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800325e:	ee17 3a90 	vmov	r3, s15
 8003262:	813b      	strh	r3, [r7, #8]

	CDC_TXData[0] = ALTO_GET_TARGET_TCP_X;
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <get_target_tcp_x+0x90>)
 8003266:	2219      	movs	r2, #25
 8003268:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(m_int >> 8);
 800326a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800326e:	121b      	asrs	r3, r3, #8
 8003270:	b21b      	sxth	r3, r3
 8003272:	b2da      	uxtb	r2, r3
 8003274:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <get_target_tcp_x+0x90>)
 8003276:	705a      	strb	r2, [r3, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 0);
 8003278:	897b      	ldrh	r3, [r7, #10]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <get_target_tcp_x+0x90>)
 800327e:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_dec >> 8);
 8003280:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003284:	121b      	asrs	r3, r3, #8
 8003286:	b21b      	sxth	r3, r3
 8003288:	b2da      	uxtb	r2, r3
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <get_target_tcp_x+0x90>)
 800328c:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 0);
 800328e:	893b      	ldrh	r3, [r7, #8]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <get_target_tcp_x+0x90>)
 8003294:	711a      	strb	r2, [r3, #4]

	CDC_Transmit_FS(CDC_TXData, 5);
 8003296:	2105      	movs	r1, #5
 8003298:	4805      	ldr	r0, [pc, #20]	; (80032b0 <get_target_tcp_x+0x90>)
 800329a:	f00b f9b3 	bl	800e604 <CDC_Transmit_FS>
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	2000016c 	.word	0x2000016c
 80032ac:	461c4000 	.word	0x461c4000
 80032b0:	20000470 	.word	0x20000470

080032b4 <get_target_tcp_y>:

void get_target_tcp_y(uint8_t* Buf)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	float m = Alto.Target_TCP_Position[1];
 80032bc:	4b1f      	ldr	r3, [pc, #124]	; (800333c <get_target_tcp_y+0x88>)
 80032be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80032c2:	60fb      	str	r3, [r7, #12]
	int16_t m_int = (int16_t)m;
 80032c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80032c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032cc:	ee17 3a90 	vmov	r3, s15
 80032d0:	817b      	strh	r3, [r7, #10]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 80032d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032de:	ed97 7a03 	vldr	s14, [r7, #12]
 80032e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003340 <get_target_tcp_y+0x8c>
 80032ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032f2:	ee17 3a90 	vmov	r3, s15
 80032f6:	813b      	strh	r3, [r7, #8]

	CDC_TXData[0] = ALTO_GET_TARGET_TCP_Y;
 80032f8:	4b12      	ldr	r3, [pc, #72]	; (8003344 <get_target_tcp_y+0x90>)
 80032fa:	221a      	movs	r2, #26
 80032fc:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(m_int >> 8);
 80032fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003302:	121b      	asrs	r3, r3, #8
 8003304:	b21b      	sxth	r3, r3
 8003306:	b2da      	uxtb	r2, r3
 8003308:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <get_target_tcp_y+0x90>)
 800330a:	705a      	strb	r2, [r3, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 0);
 800330c:	897b      	ldrh	r3, [r7, #10]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <get_target_tcp_y+0x90>)
 8003312:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_dec >> 8);
 8003314:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003318:	121b      	asrs	r3, r3, #8
 800331a:	b21b      	sxth	r3, r3
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <get_target_tcp_y+0x90>)
 8003320:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 0);
 8003322:	893b      	ldrh	r3, [r7, #8]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4b07      	ldr	r3, [pc, #28]	; (8003344 <get_target_tcp_y+0x90>)
 8003328:	711a      	strb	r2, [r3, #4]

	CDC_Transmit_FS(CDC_TXData, 5);
 800332a:	2105      	movs	r1, #5
 800332c:	4805      	ldr	r0, [pc, #20]	; (8003344 <get_target_tcp_y+0x90>)
 800332e:	f00b f969 	bl	800e604 <CDC_Transmit_FS>
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	2000016c 	.word	0x2000016c
 8003340:	461c4000 	.word	0x461c4000
 8003344:	20000470 	.word	0x20000470

08003348 <get_target_tcp_z>:

void get_target_tcp_z(uint8_t* Buf)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	float m = Alto.Target_TCP_Position[2];
 8003350:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <get_target_tcp_z+0x88>)
 8003352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003356:	60fb      	str	r3, [r7, #12]
	int16_t m_int = (int16_t)m;
 8003358:	edd7 7a03 	vldr	s15, [r7, #12]
 800335c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003360:	ee17 3a90 	vmov	r3, s15
 8003364:	817b      	strh	r3, [r7, #10]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 8003366:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003372:	ed97 7a03 	vldr	s14, [r7, #12]
 8003376:	ee77 7a67 	vsub.f32	s15, s14, s15
 800337a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80033d4 <get_target_tcp_z+0x8c>
 800337e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003386:	ee17 3a90 	vmov	r3, s15
 800338a:	813b      	strh	r3, [r7, #8]

	CDC_TXData[0] = ALTO_GET_TARGET_TCP_Z;
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <get_target_tcp_z+0x90>)
 800338e:	221b      	movs	r2, #27
 8003390:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(m_int >> 8);
 8003392:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003396:	121b      	asrs	r3, r3, #8
 8003398:	b21b      	sxth	r3, r3
 800339a:	b2da      	uxtb	r2, r3
 800339c:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <get_target_tcp_z+0x90>)
 800339e:	705a      	strb	r2, [r3, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 0);
 80033a0:	897b      	ldrh	r3, [r7, #10]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <get_target_tcp_z+0x90>)
 80033a6:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_dec >> 8);
 80033a8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80033ac:	121b      	asrs	r3, r3, #8
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <get_target_tcp_z+0x90>)
 80033b4:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 0);
 80033b6:	893b      	ldrh	r3, [r7, #8]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <get_target_tcp_z+0x90>)
 80033bc:	711a      	strb	r2, [r3, #4]

	CDC_Transmit_FS(CDC_TXData, 5);
 80033be:	2105      	movs	r1, #5
 80033c0:	4805      	ldr	r0, [pc, #20]	; (80033d8 <get_target_tcp_z+0x90>)
 80033c2:	f00b f91f 	bl	800e604 <CDC_Transmit_FS>
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	2000016c 	.word	0x2000016c
 80033d4:	461c4000 	.word	0x461c4000
 80033d8:	20000470 	.word	0x20000470

080033dc <get_target_tcp_rx>:

void get_target_tcp_rx(uint8_t* Buf)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	float m = Alto.Target_TCP_Rotation[0];
 80033e4:	4b1f      	ldr	r3, [pc, #124]	; (8003464 <get_target_tcp_rx+0x88>)
 80033e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80033ea:	60fb      	str	r3, [r7, #12]
	int16_t m_int = (int16_t)m;
 80033ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80033f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033f4:	ee17 3a90 	vmov	r3, s15
 80033f8:	817b      	strh	r3, [r7, #10]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 80033fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003406:	ed97 7a03 	vldr	s14, [r7, #12]
 800340a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800340e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003468 <get_target_tcp_rx+0x8c>
 8003412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800341a:	ee17 3a90 	vmov	r3, s15
 800341e:	813b      	strh	r3, [r7, #8]

	CDC_TXData[0] = ALTO_GET_TARGET_TCP_RX;
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <get_target_tcp_rx+0x90>)
 8003422:	221c      	movs	r2, #28
 8003424:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(m_int >> 8);
 8003426:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800342a:	121b      	asrs	r3, r3, #8
 800342c:	b21b      	sxth	r3, r3
 800342e:	b2da      	uxtb	r2, r3
 8003430:	4b0e      	ldr	r3, [pc, #56]	; (800346c <get_target_tcp_rx+0x90>)
 8003432:	705a      	strb	r2, [r3, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 0);
 8003434:	897b      	ldrh	r3, [r7, #10]
 8003436:	b2da      	uxtb	r2, r3
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <get_target_tcp_rx+0x90>)
 800343a:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_dec >> 8);
 800343c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003440:	121b      	asrs	r3, r3, #8
 8003442:	b21b      	sxth	r3, r3
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <get_target_tcp_rx+0x90>)
 8003448:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 0);
 800344a:	893b      	ldrh	r3, [r7, #8]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4b07      	ldr	r3, [pc, #28]	; (800346c <get_target_tcp_rx+0x90>)
 8003450:	711a      	strb	r2, [r3, #4]

	CDC_Transmit_FS(CDC_TXData, 5);
 8003452:	2105      	movs	r1, #5
 8003454:	4805      	ldr	r0, [pc, #20]	; (800346c <get_target_tcp_rx+0x90>)
 8003456:	f00b f8d5 	bl	800e604 <CDC_Transmit_FS>
}
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	2000016c 	.word	0x2000016c
 8003468:	461c4000 	.word	0x461c4000
 800346c:	20000470 	.word	0x20000470

08003470 <get_target_tcp_ry>:

void get_target_tcp_ry(uint8_t* Buf)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	float m = Alto.Target_TCP_Rotation[1];
 8003478:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <get_target_tcp_ry+0x88>)
 800347a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800347e:	60fb      	str	r3, [r7, #12]
	int16_t m_int = (int16_t)m;
 8003480:	edd7 7a03 	vldr	s15, [r7, #12]
 8003484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003488:	ee17 3a90 	vmov	r3, s15
 800348c:	817b      	strh	r3, [r7, #10]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 800348e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800349a:	ed97 7a03 	vldr	s14, [r7, #12]
 800349e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80034fc <get_target_tcp_ry+0x8c>
 80034a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ae:	ee17 3a90 	vmov	r3, s15
 80034b2:	813b      	strh	r3, [r7, #8]

	CDC_TXData[0] = ALTO_GET_TARGET_TCP_RY;
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <get_target_tcp_ry+0x90>)
 80034b6:	221d      	movs	r2, #29
 80034b8:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(m_int >> 8);
 80034ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80034be:	121b      	asrs	r3, r3, #8
 80034c0:	b21b      	sxth	r3, r3
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <get_target_tcp_ry+0x90>)
 80034c6:	705a      	strb	r2, [r3, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 0);
 80034c8:	897b      	ldrh	r3, [r7, #10]
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <get_target_tcp_ry+0x90>)
 80034ce:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_dec >> 8);
 80034d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80034d4:	121b      	asrs	r3, r3, #8
 80034d6:	b21b      	sxth	r3, r3
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <get_target_tcp_ry+0x90>)
 80034dc:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 0);
 80034de:	893b      	ldrh	r3, [r7, #8]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <get_target_tcp_ry+0x90>)
 80034e4:	711a      	strb	r2, [r3, #4]

	CDC_Transmit_FS(CDC_TXData, 5);
 80034e6:	2105      	movs	r1, #5
 80034e8:	4805      	ldr	r0, [pc, #20]	; (8003500 <get_target_tcp_ry+0x90>)
 80034ea:	f00b f88b 	bl	800e604 <CDC_Transmit_FS>
}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	2000016c 	.word	0x2000016c
 80034fc:	461c4000 	.word	0x461c4000
 8003500:	20000470 	.word	0x20000470

08003504 <get_target_tcp_rz>:

void get_target_tcp_rz(uint8_t* Buf)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	float m = Alto.Target_TCP_Rotation[2];
 800350c:	4b1f      	ldr	r3, [pc, #124]	; (800358c <get_target_tcp_rz+0x88>)
 800350e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8003512:	60fb      	str	r3, [r7, #12]
	int16_t m_int = (int16_t)m;
 8003514:	edd7 7a03 	vldr	s15, [r7, #12]
 8003518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800351c:	ee17 3a90 	vmov	r3, s15
 8003520:	817b      	strh	r3, [r7, #10]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 8003522:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800352e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003536:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003590 <get_target_tcp_rz+0x8c>
 800353a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800353e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003542:	ee17 3a90 	vmov	r3, s15
 8003546:	813b      	strh	r3, [r7, #8]

	CDC_TXData[0] = ALTO_GET_TARGET_TCP_RZ;
 8003548:	4b12      	ldr	r3, [pc, #72]	; (8003594 <get_target_tcp_rz+0x90>)
 800354a:	221e      	movs	r2, #30
 800354c:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = (uint8_t)(m_int >> 8);
 800354e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003552:	121b      	asrs	r3, r3, #8
 8003554:	b21b      	sxth	r3, r3
 8003556:	b2da      	uxtb	r2, r3
 8003558:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <get_target_tcp_rz+0x90>)
 800355a:	705a      	strb	r2, [r3, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 0);
 800355c:	897b      	ldrh	r3, [r7, #10]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <get_target_tcp_rz+0x90>)
 8003562:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_dec >> 8);
 8003564:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003568:	121b      	asrs	r3, r3, #8
 800356a:	b21b      	sxth	r3, r3
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <get_target_tcp_rz+0x90>)
 8003570:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 0);
 8003572:	893b      	ldrh	r3, [r7, #8]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4b07      	ldr	r3, [pc, #28]	; (8003594 <get_target_tcp_rz+0x90>)
 8003578:	711a      	strb	r2, [r3, #4]

	CDC_Transmit_FS(CDC_TXData, 5);
 800357a:	2105      	movs	r1, #5
 800357c:	4805      	ldr	r0, [pc, #20]	; (8003594 <get_target_tcp_rz+0x90>)
 800357e:	f00b f841 	bl	800e604 <CDC_Transmit_FS>
}
 8003582:	bf00      	nop
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	2000016c 	.word	0x2000016c
 8003590:	461c4000 	.word	0x461c4000
 8003594:	20000470 	.word	0x20000470

08003598 <get_joint_angle>:

void get_joint_angle(uint8_t* Buf)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	785b      	ldrb	r3, [r3, #1]
 80035a4:	75fb      	strb	r3, [r7, #23]
	uint8_t index = id - 1;
 80035a6:	7dfb      	ldrb	r3, [r7, #23]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	75bb      	strb	r3, [r7, #22]
	if (id > AXIS_NUM || id == 0)
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d844      	bhi.n	800363c <get_joint_angle+0xa4>
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d041      	beq.n	800363c <get_joint_angle+0xa4>
	{
		return;
	}

	float m = Alto.Current_JointAngle[index];
 80035b8:	7dbb      	ldrb	r3, [r7, #22]
 80035ba:	4a22      	ldr	r2, [pc, #136]	; (8003644 <get_joint_angle+0xac>)
 80035bc:	339c      	adds	r3, #156	; 0x9c
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	613b      	str	r3, [r7, #16]
	int16_t m_int = (int16_t)m;
 80035c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80035ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035ce:	ee17 3a90 	vmov	r3, s15
 80035d2:	81fb      	strh	r3, [r7, #14]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 80035d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035d8:	ee07 3a90 	vmov	s15, r3
 80035dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80035e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035e8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003648 <get_joint_angle+0xb0>
 80035ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035f4:	ee17 3a90 	vmov	r3, s15
 80035f8:	81bb      	strh	r3, [r7, #12]

	CDC_TXData[0] = ALTO_GET_JOINT_ANGLE;
 80035fa:	4b14      	ldr	r3, [pc, #80]	; (800364c <get_joint_angle+0xb4>)
 80035fc:	221f      	movs	r2, #31
 80035fe:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = id;
 8003600:	4a12      	ldr	r2, [pc, #72]	; (800364c <get_joint_angle+0xb4>)
 8003602:	7dfb      	ldrb	r3, [r7, #23]
 8003604:	7053      	strb	r3, [r2, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 8);
 8003606:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800360a:	121b      	asrs	r3, r3, #8
 800360c:	b21b      	sxth	r3, r3
 800360e:	b2da      	uxtb	r2, r3
 8003610:	4b0e      	ldr	r3, [pc, #56]	; (800364c <get_joint_angle+0xb4>)
 8003612:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_int >> 0);
 8003614:	89fb      	ldrh	r3, [r7, #14]
 8003616:	b2da      	uxtb	r2, r3
 8003618:	4b0c      	ldr	r3, [pc, #48]	; (800364c <get_joint_angle+0xb4>)
 800361a:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 8);
 800361c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003620:	121b      	asrs	r3, r3, #8
 8003622:	b21b      	sxth	r3, r3
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4b09      	ldr	r3, [pc, #36]	; (800364c <get_joint_angle+0xb4>)
 8003628:	711a      	strb	r2, [r3, #4]
	CDC_TXData[5] = (uint8_t)(m_dec >> 0);
 800362a:	89bb      	ldrh	r3, [r7, #12]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <get_joint_angle+0xb4>)
 8003630:	715a      	strb	r2, [r3, #5]

	CDC_Transmit_FS(CDC_TXData, 6);
 8003632:	2106      	movs	r1, #6
 8003634:	4805      	ldr	r0, [pc, #20]	; (800364c <get_joint_angle+0xb4>)
 8003636:	f00a ffe5 	bl	800e604 <CDC_Transmit_FS>
 800363a:	e000      	b.n	800363e <get_joint_angle+0xa6>
		return;
 800363c:	bf00      	nop
}
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	2000016c 	.word	0x2000016c
 8003648:	461c4000 	.word	0x461c4000
 800364c:	20000470 	.word	0x20000470

08003650 <get_target_joint_angle>:

void get_target_joint_angle(uint8_t* Buf)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[1];
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	785b      	ldrb	r3, [r3, #1]
 800365c:	75fb      	strb	r3, [r7, #23]
	uint8_t index = id - 1;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	3b01      	subs	r3, #1
 8003662:	75bb      	strb	r3, [r7, #22]
	if (id > AXIS_NUM || id == 0)
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	2b06      	cmp	r3, #6
 8003668:	d844      	bhi.n	80036f4 <get_target_joint_angle+0xa4>
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d041      	beq.n	80036f4 <get_target_joint_angle+0xa4>
	{
		return;
	}

	float m = Alto.Target_JointAngle[index];
 8003670:	7dbb      	ldrb	r3, [r7, #22]
 8003672:	4a22      	ldr	r2, [pc, #136]	; (80036fc <get_target_joint_angle+0xac>)
 8003674:	33a8      	adds	r3, #168	; 0xa8
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	613b      	str	r3, [r7, #16]
	int16_t m_int = (int16_t)m;
 800367e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003686:	ee17 3a90 	vmov	r3, s15
 800368a:	81fb      	strh	r3, [r7, #14]
	int16_t m_dec = (int16_t)((m - m_int) * 10000);
 800368c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003690:	ee07 3a90 	vmov	s15, r3
 8003694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003698:	ed97 7a04 	vldr	s14, [r7, #16]
 800369c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036a0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003700 <get_target_joint_angle+0xb0>
 80036a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ac:	ee17 3a90 	vmov	r3, s15
 80036b0:	81bb      	strh	r3, [r7, #12]

	CDC_TXData[0] = ALTO_GET_TARGET_JOINT_ANGLE;
 80036b2:	4b14      	ldr	r3, [pc, #80]	; (8003704 <get_target_joint_angle+0xb4>)
 80036b4:	2220      	movs	r2, #32
 80036b6:	701a      	strb	r2, [r3, #0]
	CDC_TXData[1] = id;
 80036b8:	4a12      	ldr	r2, [pc, #72]	; (8003704 <get_target_joint_angle+0xb4>)
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
 80036bc:	7053      	strb	r3, [r2, #1]
	CDC_TXData[2] = (uint8_t)(m_int >> 8);
 80036be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036c2:	121b      	asrs	r3, r3, #8
 80036c4:	b21b      	sxth	r3, r3
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <get_target_joint_angle+0xb4>)
 80036ca:	709a      	strb	r2, [r3, #2]
	CDC_TXData[3] = (uint8_t)(m_int >> 0);
 80036cc:	89fb      	ldrh	r3, [r7, #14]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <get_target_joint_angle+0xb4>)
 80036d2:	70da      	strb	r2, [r3, #3]
	CDC_TXData[4] = (uint8_t)(m_dec >> 8);
 80036d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80036d8:	121b      	asrs	r3, r3, #8
 80036da:	b21b      	sxth	r3, r3
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <get_target_joint_angle+0xb4>)
 80036e0:	711a      	strb	r2, [r3, #4]
	CDC_TXData[5] = (uint8_t)(m_dec >> 0);
 80036e2:	89bb      	ldrh	r3, [r7, #12]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <get_target_joint_angle+0xb4>)
 80036e8:	715a      	strb	r2, [r3, #5]

	CDC_Transmit_FS(CDC_TXData, 6);
 80036ea:	2106      	movs	r1, #6
 80036ec:	4805      	ldr	r0, [pc, #20]	; (8003704 <get_target_joint_angle+0xb4>)
 80036ee:	f00a ff89 	bl	800e604 <CDC_Transmit_FS>
 80036f2:	e000      	b.n	80036f6 <get_target_joint_angle+0xa6>
		return;
 80036f4:	bf00      	nop
}
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	2000016c 	.word	0x2000016c
 8003700:	461c4000 	.word	0x461c4000
 8003704:	20000470 	.word	0x20000470

08003708 <operate>:

void operate(uint8_t* Buf)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	Alto.Mode = OPERATING_MODE;
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <operate+0x20>)
 8003712:	2200      	movs	r2, #0
 8003714:	f883 22d5 	strb.w	r2, [r3, #725]	; 0x2d5
	done_return(ALTO_OPERATE);
 8003718:	2021      	movs	r0, #33	; 0x21
 800371a:	f7fe ffa1 	bl	8002660 <done_return>
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	2000016c 	.word	0x2000016c

0800372c <home>:

void home(uint8_t* Buf)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	Alto.Mode = HOMING_MODE;
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <home+0x20>)
 8003736:	2201      	movs	r2, #1
 8003738:	f883 22d5 	strb.w	r2, [r3, #725]	; 0x2d5
	done_return(ALTO_HOME);
 800373c:	2022      	movs	r0, #34	; 0x22
 800373e:	f7fe ff8f 	bl	8002660 <done_return>
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	2000016c 	.word	0x2000016c

08003750 <disable>:

void disable(uint8_t* Buf)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	Alto.Mode = DISABLE_MODE;
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <disable+0x20>)
 800375a:	2202      	movs	r2, #2
 800375c:	f883 22d5 	strb.w	r2, [r3, #725]	; 0x2d5
	done_return(ALTO_DISABLE);
 8003760:	2023      	movs	r0, #35	; 0x23
 8003762:	f7fe ff7d 	bl	8002660 <done_return>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	2000016c 	.word	0x2000016c

08003774 <start>:

void start(uint8_t* Buf)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <start+0x38>)
 800377e:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <start+0x1a>
	{
		error_return(ALTO_START);
 8003786:	2024      	movs	r0, #36	; 0x24
 8003788:	f7fe ff54 	bl	8002634 <error_return>
		return;
 800378c:	e00a      	b.n	80037a4 <start+0x30>
	}

	Alto.Start_Flag = true;
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <start+0x38>)
 8003790:	2201      	movs	r2, #1
 8003792:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
	Alto.Start_Entry_Flag = true;
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <start+0x38>)
 8003798:	2201      	movs	r2, #1
 800379a:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
	done_return(ALTO_START);
 800379e:	2024      	movs	r0, #36	; 0x24
 80037a0:	f7fe ff5e 	bl	8002660 <done_return>
}
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	2000016c 	.word	0x2000016c

080037b0 <stop>:

void stop(uint8_t* Buf)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 80037b8:	2300      	movs	r3, #0
 80037ba:	73fb      	strb	r3, [r7, #15]
 80037bc:	e00b      	b.n	80037d6 <stop+0x26>
		Alto.Steppers[index].isStop = true;
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <stop+0x3c>)
 80037c2:	214c      	movs	r1, #76	; 0x4c
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	3349      	adds	r3, #73	; 0x49
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	3301      	adds	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d9f0      	bls.n	80037be <stop+0xe>
	done_return(ALTO_START);
 80037dc:	2024      	movs	r0, #36	; 0x24
 80037de:	f7fe ff3f 	bl	8002660 <done_return>
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	2000016c 	.word	0x2000016c

080037f0 <set_joint_home_offset>:

void set_joint_home_offset(uint8_t* Buf)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <set_joint_angle>:

void set_joint_angle(uint8_t* Buf)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 800380c:	4b26      	ldr	r3, [pc, #152]	; (80038a8 <set_joint_angle+0xa4>)
 800380e:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <set_joint_angle+0x1a>
	{
		error_return(ALTO_SET_JOINT_ANGLE);
 8003816:	2027      	movs	r0, #39	; 0x27
 8003818:	f7fe ff0c 	bl	8002634 <error_return>
		return;
 800381c:	e041      	b.n	80038a2 <set_joint_angle+0x9e>
	}

	uint8_t id = Buf[1];
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	785b      	ldrb	r3, [r3, #1]
 8003822:	73fb      	strb	r3, [r7, #15]
	uint8_t index = id - 1;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	3b01      	subs	r3, #1
 8003828:	73bb      	strb	r3, [r7, #14]
	if (id > AXIS_NUM || id == 0)
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b06      	cmp	r3, #6
 800382e:	d802      	bhi.n	8003836 <set_joint_angle+0x32>
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <set_joint_angle+0x3a>
	{
		error_return(ALTO_SET_JOINT_ANGLE);
 8003836:	2027      	movs	r0, #39	; 0x27
 8003838:	f7fe fefc 	bl	8002634 <error_return>
		return;
 800383c:	e031      	b.n	80038a2 <set_joint_angle+0x9e>
	}

	int16_t m_int = (int16_t)((int16_t)Buf[2] << 8 | (int16_t)Buf[3] << 0);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3302      	adds	r3, #2
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	021b      	lsls	r3, r3, #8
 8003846:	b21a      	sxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3303      	adds	r3, #3
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	b21b      	sxth	r3, r3
 8003850:	4313      	orrs	r3, r2
 8003852:	81bb      	strh	r3, [r7, #12]
	int16_t m_dec = (int16_t)((int16_t)Buf[4] << 8 | (int16_t)Buf[5] << 0);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	b21a      	sxth	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3305      	adds	r3, #5
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b21b      	sxth	r3, r3
 8003866:	4313      	orrs	r3, r2
 8003868:	817b      	strh	r3, [r7, #10]
	Alto.Target_JointAngle[index] = (float)((float)m_int + (float)m_dec / 10000);
 800386a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003876:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003882:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 80038ac <set_joint_angle+0xa8>
 8003886:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800388a:	7bbb      	ldrb	r3, [r7, #14]
 800388c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003890:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <set_joint_angle+0xa4>)
 8003892:	33a8      	adds	r3, #168	; 0xa8
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	edc3 7a00 	vstr	s15, [r3]

	done_return(ALTO_SET_JOINT_ANGLE);
 800389c:	2027      	movs	r0, #39	; 0x27
 800389e:	f7fe fedf 	bl	8002660 <done_return>
}
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	2000016c 	.word	0x2000016c
 80038ac:	461c4000 	.word	0x461c4000

080038b0 <set_coor>:

void set_coor(uint8_t* Buf)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 80038b8:	4b13      	ldr	r3, [pc, #76]	; (8003908 <set_coor+0x58>)
 80038ba:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <set_coor+0x1a>
	{
		error_return(ALTO_SET_COOR);
 80038c2:	2028      	movs	r0, #40	; 0x28
 80038c4:	f7fe feb6 	bl	8002634 <error_return>
		return;
 80038c8:	e01b      	b.n	8003902 <set_coor+0x52>
	}

	switch(Buf[1])
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3301      	adds	r3, #1
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <set_coor+0x2a>
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d008      	beq.n	80038ea <set_coor+0x3a>
 80038d8:	e00f      	b.n	80038fa <set_coor+0x4a>
	{
		case BASE:
			Alto.Coor = BASE;
 80038da:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <set_coor+0x58>)
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
			done_return(ALTO_SET_COOR);
 80038e2:	2028      	movs	r0, #40	; 0x28
 80038e4:	f7fe febc 	bl	8002660 <done_return>
			break;
 80038e8:	e00b      	b.n	8003902 <set_coor+0x52>
		case TOOL:
			Alto.Coor = TOOL;
 80038ea:	4b07      	ldr	r3, [pc, #28]	; (8003908 <set_coor+0x58>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
			done_return(ALTO_SET_COOR);
 80038f2:	2028      	movs	r0, #40	; 0x28
 80038f4:	f7fe feb4 	bl	8002660 <done_return>
			break;
 80038f8:	e003      	b.n	8003902 <set_coor+0x52>
		default:
			error_return(ALTO_SET_COOR);
 80038fa:	2028      	movs	r0, #40	; 0x28
 80038fc:	f7fe fe9a 	bl	8002634 <error_return>
			break;
 8003900:	bf00      	nop
	}
}
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	2000016c 	.word	0x2000016c

0800390c <set_speed>:

void set_speed(uint8_t* Buf)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 8003914:	4b09      	ldr	r3, [pc, #36]	; (800393c <set_speed+0x30>)
 8003916:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <set_speed+0x1a>
	{
		error_return(ALTO_SET_SPEED);
 800391e:	2029      	movs	r0, #41	; 0x29
 8003920:	f7fe fe88 	bl	8002634 <error_return>
		return;
 8003924:	e007      	b.n	8003936 <set_speed+0x2a>
	}

	Alto.Speed = Buf[1];
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	785a      	ldrb	r2, [r3, #1]
 800392a:	4b04      	ldr	r3, [pc, #16]	; (800393c <set_speed+0x30>)
 800392c:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
	done_return(ALTO_SET_SPEED);
 8003930:	2029      	movs	r0, #41	; 0x29
 8003932:	f7fe fe95 	bl	8002660 <done_return>
}
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	2000016c 	.word	0x2000016c

08003940 <set_acc>:

void set_acc(uint8_t* Buf)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <set_acc+0x30>)
 800394a:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <set_acc+0x1a>
	{
		error_return(ALTO_SET_ACC);
 8003952:	202a      	movs	r0, #42	; 0x2a
 8003954:	f7fe fe6e 	bl	8002634 <error_return>
		return;
 8003958:	e007      	b.n	800396a <set_acc+0x2a>
	}

	Alto.Acc = Buf[1];
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	785a      	ldrb	r2, [r3, #1]
 800395e:	4b04      	ldr	r3, [pc, #16]	; (8003970 <set_acc+0x30>)
 8003960:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
	done_return(ALTO_SET_ACC);
 8003964:	202a      	movs	r0, #42	; 0x2a
 8003966:	f7fe fe7b 	bl	8002660 <done_return>
}
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	2000016c 	.word	0x2000016c

08003974 <set_mov>:

void set_mov(uint8_t* Buf)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 800397c:	4b13      	ldr	r3, [pc, #76]	; (80039cc <set_mov+0x58>)
 800397e:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <set_mov+0x1a>
	{
		error_return(ALTO_SET_MOV);
 8003986:	202b      	movs	r0, #43	; 0x2b
 8003988:	f7fe fe54 	bl	8002634 <error_return>
		return;
 800398c:	e01b      	b.n	80039c6 <set_mov+0x52>
	}

	switch(Buf[1])
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3301      	adds	r3, #1
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <set_mov+0x2a>
 8003998:	2b01      	cmp	r3, #1
 800399a:	d008      	beq.n	80039ae <set_mov+0x3a>
 800399c:	e00f      	b.n	80039be <set_mov+0x4a>
	{
		case MOVP:
			Alto.Mov = MOVP;
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <set_mov+0x58>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
			done_return(ALTO_SET_MOV);
 80039a6:	202b      	movs	r0, #43	; 0x2b
 80039a8:	f7fe fe5a 	bl	8002660 <done_return>
			break;
 80039ac:	e00b      	b.n	80039c6 <set_mov+0x52>
//		case MOVL:
//			Alto.Mov = MOVL;
//			done_return(ALTO_SET_MOV);
//			break;
		case JOINT:
			Alto.Mov = JOINT;
 80039ae:	4b07      	ldr	r3, [pc, #28]	; (80039cc <set_mov+0x58>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
			done_return(ALTO_SET_MOV);
 80039b6:	202b      	movs	r0, #43	; 0x2b
 80039b8:	f7fe fe52 	bl	8002660 <done_return>
			break;
 80039bc:	e003      	b.n	80039c6 <set_mov+0x52>
		default:
			error_return(ALTO_SET_MOV);
 80039be:	202b      	movs	r0, #43	; 0x2b
 80039c0:	f7fe fe38 	bl	8002634 <error_return>
			break;
 80039c4:	bf00      	nop
	}
}
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	2000016c 	.word	0x2000016c

080039d0 <set_x>:

void set_x(uint8_t* Buf)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 80039d8:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <set_x+0x7c>)
 80039da:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <set_x+0x1a>
	{
		error_return(ALTO_SET_X);
 80039e2:	202c      	movs	r0, #44	; 0x2c
 80039e4:	f7fe fe26 	bl	8002634 <error_return>
		return;
 80039e8:	e02d      	b.n	8003a46 <set_x+0x76>
	}

	int16_t m_int = (int16_t)((int16_t)Buf[1] << 8 | (int16_t)Buf[2] << 0);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3301      	adds	r3, #1
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	b21a      	sxth	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3302      	adds	r3, #2
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	b21b      	sxth	r3, r3
 80039fc:	4313      	orrs	r3, r2
 80039fe:	81fb      	strh	r3, [r7, #14]
	int16_t m_dec = (int16_t)((int16_t)Buf[3] << 8 | (int16_t)Buf[4] << 0);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3303      	adds	r3, #3
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	b21a      	sxth	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	b21b      	sxth	r3, r3
 8003a12:	4313      	orrs	r3, r2
 8003a14:	81bb      	strh	r3, [r7, #12]
	Alto.Target_TCP_Position[0] = (float)((float)m_int + (float)m_dec / 10000);
 8003a16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a2e:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8003a50 <set_x+0x80>
 8003a32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a3a:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <set_x+0x7c>)
 8003a3c:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8

	done_return(ALTO_SET_X);
 8003a40:	202c      	movs	r0, #44	; 0x2c
 8003a42:	f7fe fe0d 	bl	8002660 <done_return>
}
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	2000016c 	.word	0x2000016c
 8003a50:	461c4000 	.word	0x461c4000

08003a54 <set_y>:

void set_y(uint8_t* Buf)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 8003a5c:	4b1c      	ldr	r3, [pc, #112]	; (8003ad0 <set_y+0x7c>)
 8003a5e:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <set_y+0x1a>
	{
		error_return(ALTO_SET_Y);
 8003a66:	202d      	movs	r0, #45	; 0x2d
 8003a68:	f7fe fde4 	bl	8002634 <error_return>
		return;
 8003a6c:	e02d      	b.n	8003aca <set_y+0x76>
	}

	int16_t m_int = (int16_t)((int16_t)Buf[1] << 8 | (int16_t)Buf[2] << 0);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3301      	adds	r3, #1
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	b21a      	sxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3302      	adds	r3, #2
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	b21b      	sxth	r3, r3
 8003a80:	4313      	orrs	r3, r2
 8003a82:	81fb      	strh	r3, [r7, #14]
	int16_t m_dec = (int16_t)((int16_t)Buf[3] << 8 | (int16_t)Buf[4] << 0);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3303      	adds	r3, #3
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	b21a      	sxth	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3304      	adds	r3, #4
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b21b      	sxth	r3, r3
 8003a96:	4313      	orrs	r3, r2
 8003a98:	81bb      	strh	r3, [r7, #12]
	Alto.Target_TCP_Position[1] = (float)((float)m_int + (float)m_dec / 10000);
 8003a9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aa6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ab2:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8003ad4 <set_y+0x80>
 8003ab6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003abe:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <set_y+0x7c>)
 8003ac0:	edc3 7aaf 	vstr	s15, [r3, #700]	; 0x2bc

	done_return(ALTO_SET_Y);
 8003ac4:	202d      	movs	r0, #45	; 0x2d
 8003ac6:	f7fe fdcb 	bl	8002660 <done_return>
}
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	2000016c 	.word	0x2000016c
 8003ad4:	461c4000 	.word	0x461c4000

08003ad8 <set_z>:

void set_z(uint8_t* Buf)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 8003ae0:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <set_z+0x7c>)
 8003ae2:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <set_z+0x1a>
	{
		error_return(ALTO_SET_Z);
 8003aea:	202e      	movs	r0, #46	; 0x2e
 8003aec:	f7fe fda2 	bl	8002634 <error_return>
		return;
 8003af0:	e02d      	b.n	8003b4e <set_z+0x76>
	}

	int16_t m_int = (int16_t)((int16_t)Buf[1] << 8 | (int16_t)Buf[2] << 0);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3301      	adds	r3, #1
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	b21a      	sxth	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3302      	adds	r3, #2
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	b21b      	sxth	r3, r3
 8003b04:	4313      	orrs	r3, r2
 8003b06:	81fb      	strh	r3, [r7, #14]
	int16_t m_dec = (int16_t)((int16_t)Buf[3] << 8 | (int16_t)Buf[4] << 0);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3303      	adds	r3, #3
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	b21a      	sxth	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3304      	adds	r3, #4
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b21b      	sxth	r3, r3
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	81bb      	strh	r3, [r7, #12]
	Alto.Target_TCP_Position[2] = (float)((float)m_int + (float)m_dec / 10000);
 8003b1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b36:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8003b58 <set_z+0x80>
 8003b3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b42:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <set_z+0x7c>)
 8003b44:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0

	done_return(ALTO_SET_Z);
 8003b48:	202e      	movs	r0, #46	; 0x2e
 8003b4a:	f7fe fd89 	bl	8002660 <done_return>
}
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	2000016c 	.word	0x2000016c
 8003b58:	461c4000 	.word	0x461c4000

08003b5c <set_rx>:

void set_rx(uint8_t* Buf)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 8003b64:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <set_rx+0x7c>)
 8003b66:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <set_rx+0x1a>
	{
		error_return(ALTO_SET_RX);
 8003b6e:	202f      	movs	r0, #47	; 0x2f
 8003b70:	f7fe fd60 	bl	8002634 <error_return>
		return;
 8003b74:	e02d      	b.n	8003bd2 <set_rx+0x76>
	}

	int16_t m_int = (int16_t)((int16_t)Buf[1] << 8 | (int16_t)Buf[2] << 0);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	b21a      	sxth	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3302      	adds	r3, #2
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b21b      	sxth	r3, r3
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	81fb      	strh	r3, [r7, #14]
	int16_t m_dec = (int16_t)((int16_t)Buf[3] << 8 | (int16_t)Buf[4] << 0);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3303      	adds	r3, #3
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	b21a      	sxth	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	b21b      	sxth	r3, r3
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	81bb      	strh	r3, [r7, #12]
	Alto.Target_TCP_Rotation[0] = (float)((float)m_int + (float)m_dec / 10000);
 8003ba2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003bb2:	ee07 3a90 	vmov	s15, r3
 8003bb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003bba:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8003bdc <set_rx+0x80>
 8003bbe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc6:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <set_rx+0x7c>)
 8003bc8:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4

	done_return(ALTO_SET_RX);
 8003bcc:	202f      	movs	r0, #47	; 0x2f
 8003bce:	f7fe fd47 	bl	8002660 <done_return>
}
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	2000016c 	.word	0x2000016c
 8003bdc:	461c4000 	.word	0x461c4000

08003be0 <set_ry>:

void set_ry(uint8_t* Buf)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 8003be8:	4b1c      	ldr	r3, [pc, #112]	; (8003c5c <set_ry+0x7c>)
 8003bea:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <set_ry+0x1a>
	{
		error_return(ALTO_SET_RY);
 8003bf2:	2030      	movs	r0, #48	; 0x30
 8003bf4:	f7fe fd1e 	bl	8002634 <error_return>
		return;
 8003bf8:	e02d      	b.n	8003c56 <set_ry+0x76>
	}

	int16_t m_int = (int16_t)((int16_t)Buf[1] << 8 | (int16_t)Buf[2] << 0);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	b21a      	sxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3302      	adds	r3, #2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	b21b      	sxth	r3, r3
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	81fb      	strh	r3, [r7, #14]
	int16_t m_dec = (int16_t)((int16_t)Buf[3] << 8 | (int16_t)Buf[4] << 0);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3303      	adds	r3, #3
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	b21a      	sxth	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	b21b      	sxth	r3, r3
 8003c22:	4313      	orrs	r3, r2
 8003c24:	81bb      	strh	r3, [r7, #12]
	Alto.Target_TCP_Rotation[1] = (float)((float)m_int + (float)m_dec / 10000);
 8003c26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c3e:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8003c60 <set_ry+0x80>
 8003c42:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c4a:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <set_ry+0x7c>)
 8003c4c:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8

	done_return(ALTO_SET_RY);
 8003c50:	2030      	movs	r0, #48	; 0x30
 8003c52:	f7fe fd05 	bl	8002660 <done_return>
}
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	2000016c 	.word	0x2000016c
 8003c60:	461c4000 	.word	0x461c4000

08003c64 <set_rz>:

void set_rz(uint8_t* Buf)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 8003c6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ce0 <set_rz+0x7c>)
 8003c6e:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <set_rz+0x1a>
	{
		error_return(ALTO_SET_RZ);
 8003c76:	2031      	movs	r0, #49	; 0x31
 8003c78:	f7fe fcdc 	bl	8002634 <error_return>
		return;
 8003c7c:	e02d      	b.n	8003cda <set_rz+0x76>
	}

	int16_t m_int = (int16_t)((int16_t)Buf[1] << 8 | (int16_t)Buf[2] << 0);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3301      	adds	r3, #1
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	b21a      	sxth	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3302      	adds	r3, #2
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	b21b      	sxth	r3, r3
 8003c90:	4313      	orrs	r3, r2
 8003c92:	81fb      	strh	r3, [r7, #14]
	int16_t m_dec = (int16_t)((int16_t)Buf[3] << 8 | (int16_t)Buf[4] << 0);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3303      	adds	r3, #3
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	b21a      	sxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	b21b      	sxth	r3, r3
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	81bb      	strh	r3, [r7, #12]
	Alto.Target_TCP_Rotation[2] = (float)((float)m_int + (float)m_dec / 10000);
 8003caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003cc2:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8003ce4 <set_rz+0x80>
 8003cc6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cce:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <set_rz+0x7c>)
 8003cd0:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc

	done_return(ALTO_SET_RZ);
 8003cd4:	2031      	movs	r0, #49	; 0x31
 8003cd6:	f7fe fcc3 	bl	8002660 <done_return>
}
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	2000016c 	.word	0x2000016c
 8003ce4:	461c4000 	.word	0x461c4000

08003ce8 <go_x>:

void go_x(uint8_t* Buf)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 8003cf0:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <go_x+0xe4>)
 8003cf2:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <go_x+0x1a>
	{
		error_return(ALTO_GO_X);
 8003cfa:	2032      	movs	r0, #50	; 0x32
 8003cfc:	f7fe fc9a 	bl	8002634 <error_return>
		return;
 8003d00:	e060      	b.n	8003dc4 <go_x+0xdc>
	}

	Alto.Start_Flag = true;
 8003d02:	4b32      	ldr	r3, [pc, #200]	; (8003dcc <go_x+0xe4>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
	Alto.Start_Entry_Flag = true;
 8003d0a:	4b30      	ldr	r3, [pc, #192]	; (8003dcc <go_x+0xe4>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7

	int16_t m_int = (int16_t)((int16_t)Buf[1] << 8 | (int16_t)Buf[2] << 0);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3301      	adds	r3, #1
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	b21a      	sxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3302      	adds	r3, #2
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	b21b      	sxth	r3, r3
 8003d24:	4313      	orrs	r3, r2
 8003d26:	81fb      	strh	r3, [r7, #14]
	int16_t m_dec = (int16_t)((int16_t)Buf[3] << 8 | (int16_t)Buf[4] << 0);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3303      	adds	r3, #3
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	b21a      	sxth	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3304      	adds	r3, #4
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	b21b      	sxth	r3, r3
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	81bb      	strh	r3, [r7, #12]
	float x = (float)((float)m_int + (float)m_dec / 10000);
 8003d3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d56:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8003dd0 <go_x+0xe8>
 8003d5a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d62:	edc7 7a02 	vstr	s15, [r7, #8]

	Alto.Target_TCP_Position[0] = Alto.Current_TCP_Position[0] + x;
 8003d66:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <go_x+0xe4>)
 8003d68:	ed93 7aa2 	vldr	s14, [r3, #648]	; 0x288
 8003d6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d74:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <go_x+0xe4>)
 8003d76:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
	Alto.Target_TCP_Position[1] = Alto.Current_TCP_Position[1];
 8003d7a:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <go_x+0xe4>)
 8003d7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003d80:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <go_x+0xe4>)
 8003d82:	f8c2 32bc 	str.w	r3, [r2, #700]	; 0x2bc
	Alto.Target_TCP_Position[2] = Alto.Current_TCP_Position[2];
 8003d86:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <go_x+0xe4>)
 8003d88:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003d8c:	4a0f      	ldr	r2, [pc, #60]	; (8003dcc <go_x+0xe4>)
 8003d8e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
	Alto.Target_TCP_Rotation[0] = Alto.Current_TCP_Rotation[0];
 8003d92:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <go_x+0xe4>)
 8003d94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003d98:	4a0c      	ldr	r2, [pc, #48]	; (8003dcc <go_x+0xe4>)
 8003d9a:	f8c2 32c4 	str.w	r3, [r2, #708]	; 0x2c4
	Alto.Target_TCP_Rotation[1] = Alto.Current_TCP_Rotation[1];
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <go_x+0xe4>)
 8003da0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8003da4:	4a09      	ldr	r2, [pc, #36]	; (8003dcc <go_x+0xe4>)
 8003da6:	f8c2 32c8 	str.w	r3, [r2, #712]	; 0x2c8
	Alto.Target_TCP_Rotation[2] = Alto.Current_TCP_Rotation[2];
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <go_x+0xe4>)
 8003dac:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8003db0:	4a06      	ldr	r2, [pc, #24]	; (8003dcc <go_x+0xe4>)
 8003db2:	f8c2 32cc 	str.w	r3, [r2, #716]	; 0x2cc
	Alto.Mov = MOVP;
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <go_x+0xe4>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1

	done_return(ALTO_GO_X);
 8003dbe:	2032      	movs	r0, #50	; 0x32
 8003dc0:	f7fe fc4e 	bl	8002660 <done_return>
}
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	2000016c 	.word	0x2000016c
 8003dd0:	461c4000 	.word	0x461c4000

08003dd4 <go_y>:

void go_y(uint8_t* Buf)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 8003ddc:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <go_y+0xe4>)
 8003dde:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <go_y+0x1a>
	{
		error_return(ALTO_GO_Y);
 8003de6:	2033      	movs	r0, #51	; 0x33
 8003de8:	f7fe fc24 	bl	8002634 <error_return>
		return;
 8003dec:	e060      	b.n	8003eb0 <go_y+0xdc>
	}

	Alto.Start_Flag = true;
 8003dee:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <go_y+0xe4>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
	Alto.Start_Entry_Flag = true;
 8003df6:	4b30      	ldr	r3, [pc, #192]	; (8003eb8 <go_y+0xe4>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7

	int16_t m_int = (int16_t)((int16_t)Buf[1] << 8 | (int16_t)Buf[2] << 0);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3301      	adds	r3, #1
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	b21a      	sxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	b21b      	sxth	r3, r3
 8003e10:	4313      	orrs	r3, r2
 8003e12:	81fb      	strh	r3, [r7, #14]
	int16_t m_dec = (int16_t)((int16_t)Buf[3] << 8 | (int16_t)Buf[4] << 0);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3303      	adds	r3, #3
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	b21a      	sxth	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b21b      	sxth	r3, r3
 8003e26:	4313      	orrs	r3, r2
 8003e28:	81bb      	strh	r3, [r7, #12]
	float y = (float)((float)m_int + (float)m_dec / 10000);
 8003e2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e42:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8003ebc <go_y+0xe8>
 8003e46:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e4e:	edc7 7a02 	vstr	s15, [r7, #8]

	Alto.Target_TCP_Position[0] = Alto.Current_TCP_Position[0];
 8003e52:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <go_y+0xe4>)
 8003e54:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8003e58:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <go_y+0xe4>)
 8003e5a:	f8c2 32b8 	str.w	r3, [r2, #696]	; 0x2b8
	Alto.Target_TCP_Position[1] = Alto.Current_TCP_Position[1] + y;
 8003e5e:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <go_y+0xe4>)
 8003e60:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8003e64:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e6c:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <go_y+0xe4>)
 8003e6e:	edc3 7aaf 	vstr	s15, [r3, #700]	; 0x2bc
	Alto.Target_TCP_Position[2] = Alto.Current_TCP_Position[2];
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <go_y+0xe4>)
 8003e74:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003e78:	4a0f      	ldr	r2, [pc, #60]	; (8003eb8 <go_y+0xe4>)
 8003e7a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
	Alto.Target_TCP_Rotation[0] = Alto.Current_TCP_Rotation[0];
 8003e7e:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <go_y+0xe4>)
 8003e80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003e84:	4a0c      	ldr	r2, [pc, #48]	; (8003eb8 <go_y+0xe4>)
 8003e86:	f8c2 32c4 	str.w	r3, [r2, #708]	; 0x2c4
	Alto.Target_TCP_Rotation[1] = Alto.Current_TCP_Rotation[1];
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <go_y+0xe4>)
 8003e8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8003e90:	4a09      	ldr	r2, [pc, #36]	; (8003eb8 <go_y+0xe4>)
 8003e92:	f8c2 32c8 	str.w	r3, [r2, #712]	; 0x2c8
	Alto.Target_TCP_Rotation[2] = Alto.Current_TCP_Rotation[2];
 8003e96:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <go_y+0xe4>)
 8003e98:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8003e9c:	4a06      	ldr	r2, [pc, #24]	; (8003eb8 <go_y+0xe4>)
 8003e9e:	f8c2 32cc 	str.w	r3, [r2, #716]	; 0x2cc
	Alto.Mov = MOVP;
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <go_y+0xe4>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1

	done_return(ALTO_GO_Y);
 8003eaa:	2033      	movs	r0, #51	; 0x33
 8003eac:	f7fe fbd8 	bl	8002660 <done_return>
}
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2000016c 	.word	0x2000016c
 8003ebc:	461c4000 	.word	0x461c4000

08003ec0 <go_z>:

void go_z(uint8_t* Buf)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 8003ec8:	4b36      	ldr	r3, [pc, #216]	; (8003fa4 <go_z+0xe4>)
 8003eca:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <go_z+0x1a>
	{
		error_return(ALTO_GO_Z);
 8003ed2:	2034      	movs	r0, #52	; 0x34
 8003ed4:	f7fe fbae 	bl	8002634 <error_return>
		return;
 8003ed8:	e060      	b.n	8003f9c <go_z+0xdc>
	}

	Alto.Start_Flag = true;
 8003eda:	4b32      	ldr	r3, [pc, #200]	; (8003fa4 <go_z+0xe4>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
	Alto.Start_Entry_Flag = true;
 8003ee2:	4b30      	ldr	r3, [pc, #192]	; (8003fa4 <go_z+0xe4>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7

	int16_t m_int = (int16_t)((int16_t)Buf[1] << 8 | (int16_t)Buf[2] << 0);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3301      	adds	r3, #1
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	b21a      	sxth	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	4313      	orrs	r3, r2
 8003efe:	81fb      	strh	r3, [r7, #14]
	int16_t m_dec = (int16_t)((int16_t)Buf[3] << 8 | (int16_t)Buf[4] << 0);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3303      	adds	r3, #3
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	b21a      	sxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	b21b      	sxth	r3, r3
 8003f12:	4313      	orrs	r3, r2
 8003f14:	81bb      	strh	r3, [r7, #12]
	float z = (float)((float)m_int + (float)m_dec / 10000);
 8003f16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f2e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8003fa8 <go_z+0xe8>
 8003f32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f3a:	edc7 7a02 	vstr	s15, [r7, #8]

	Alto.Target_TCP_Position[0] = Alto.Current_TCP_Position[0];
 8003f3e:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <go_z+0xe4>)
 8003f40:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8003f44:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <go_z+0xe4>)
 8003f46:	f8c2 32b8 	str.w	r3, [r2, #696]	; 0x2b8
	Alto.Target_TCP_Position[1] = Alto.Current_TCP_Position[1];
 8003f4a:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <go_z+0xe4>)
 8003f4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <go_z+0xe4>)
 8003f52:	f8c2 32bc 	str.w	r3, [r2, #700]	; 0x2bc
	Alto.Target_TCP_Position[2] = Alto.Current_TCP_Position[2] + z;
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <go_z+0xe4>)
 8003f58:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 8003f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f64:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <go_z+0xe4>)
 8003f66:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
	Alto.Target_TCP_Rotation[0] = Alto.Current_TCP_Rotation[0];
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <go_z+0xe4>)
 8003f6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003f70:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <go_z+0xe4>)
 8003f72:	f8c2 32c4 	str.w	r3, [r2, #708]	; 0x2c4
	Alto.Target_TCP_Rotation[1] = Alto.Current_TCP_Rotation[1];
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <go_z+0xe4>)
 8003f78:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8003f7c:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <go_z+0xe4>)
 8003f7e:	f8c2 32c8 	str.w	r3, [r2, #712]	; 0x2c8
	Alto.Target_TCP_Rotation[2] = Alto.Current_TCP_Rotation[2];
 8003f82:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <go_z+0xe4>)
 8003f84:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8003f88:	4a06      	ldr	r2, [pc, #24]	; (8003fa4 <go_z+0xe4>)
 8003f8a:	f8c2 32cc 	str.w	r3, [r2, #716]	; 0x2cc
	Alto.Mov = MOVP;
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <go_z+0xe4>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1

	done_return(ALTO_GO_Z);
 8003f96:	2034      	movs	r0, #52	; 0x34
 8003f98:	f7fe fb62 	bl	8002660 <done_return>
}
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	2000016c 	.word	0x2000016c
 8003fa8:	461c4000 	.word	0x461c4000

08003fac <go_rx>:

void go_rx(uint8_t* Buf)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b0b4      	sub	sp, #208	; 0xd0
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 8003fb4:	4b34      	ldr	r3, [pc, #208]	; (8004088 <go_rx+0xdc>)
 8003fb6:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <go_rx+0x1a>
	{
		error_return(ALTO_GO_RX);
 8003fbe:	2035      	movs	r0, #53	; 0x35
 8003fc0:	f7fe fb38 	bl	8002634 <error_return>
 8003fc4:	e05d      	b.n	8004082 <go_rx+0xd6>
		return;
	}

	Alto.Start_Flag = true;
 8003fc6:	4b30      	ldr	r3, [pc, #192]	; (8004088 <go_rx+0xdc>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
	Alto.Start_Entry_Flag = true;
 8003fce:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <go_rx+0xdc>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7

	int16_t m_int = (int16_t)((int16_t)Buf[1] << 8 | (int16_t)Buf[2] << 0);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	b21a      	sxth	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3302      	adds	r3, #2
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	b21b      	sxth	r3, r3
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
	int16_t m_dec = (int16_t)((int16_t)Buf[3] << 8 | (int16_t)Buf[4] << 0);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3303      	adds	r3, #3
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	b21a      	sxth	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	b21b      	sxth	r3, r3
 8004000:	4313      	orrs	r3, r2
 8004002:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
	float rx = (float)((float)m_int + (float)m_dec / 10000);
 8004006:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004012:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800401e:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800408c <go_rx+0xe0>
 8004022:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800402a:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8

	float T_TCP[4][4];
	float T_rx[4][4];
	pose_to_translation_matrix(Alto.Current_TCP_Position, Alto.Current_TCP_Rotation, T_TCP);
 800402e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004032:	461a      	mov	r2, r3
 8004034:	4916      	ldr	r1, [pc, #88]	; (8004090 <go_rx+0xe4>)
 8004036:	4817      	ldr	r0, [pc, #92]	; (8004094 <go_rx+0xe8>)
 8004038:	f002 f88c 	bl	8006154 <pose_to_translation_matrix>
	T_init(T_rx);
 800403c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004040:	4618      	mov	r0, r3
 8004042:	f001 ff3d 	bl	8005ec0 <T_init>
	rotate_x(T_rx, rx);
 8004046:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800404a:	ed97 0a32 	vldr	s0, [r7, #200]	; 0xc8
 800404e:	4618      	mov	r0, r3
 8004050:	f001 ff8a 	bl	8005f68 <rotate_x>
	float T_ans[4][4];
	Mat4x4_Mul(T_TCP, T_rx, T_ans);
 8004054:	f107 0208 	add.w	r2, r7, #8
 8004058:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800405c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fc84 	bl	800496e <Mat4x4_Mul>
	translation_matrix_to_pose(T_ans, Alto.Target_TCP_Position, Alto.Target_TCP_Rotation);
 8004066:	f107 0308 	add.w	r3, r7, #8
 800406a:	4a0b      	ldr	r2, [pc, #44]	; (8004098 <go_rx+0xec>)
 800406c:	490b      	ldr	r1, [pc, #44]	; (800409c <go_rx+0xf0>)
 800406e:	4618      	mov	r0, r3
 8004070:	f002 f8a5 	bl	80061be <translation_matrix_to_pose>
	Alto.Mov = MOVP;
 8004074:	4b04      	ldr	r3, [pc, #16]	; (8004088 <go_rx+0xdc>)
 8004076:	2200      	movs	r2, #0
 8004078:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1

	done_return(ALTO_GO_RX);
 800407c:	2035      	movs	r0, #53	; 0x35
 800407e:	f7fe faef 	bl	8002660 <done_return>
}
 8004082:	37d0      	adds	r7, #208	; 0xd0
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	2000016c 	.word	0x2000016c
 800408c:	461c4000 	.word	0x461c4000
 8004090:	20000400 	.word	0x20000400
 8004094:	200003f4 	.word	0x200003f4
 8004098:	20000430 	.word	0x20000430
 800409c:	20000424 	.word	0x20000424

080040a0 <go_ry>:

void go_ry(uint8_t* Buf)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b0b4      	sub	sp, #208	; 0xd0
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 80040a8:	4b34      	ldr	r3, [pc, #208]	; (800417c <go_ry+0xdc>)
 80040aa:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <go_ry+0x1a>
	{
		error_return(ALTO_GO_RY);
 80040b2:	2036      	movs	r0, #54	; 0x36
 80040b4:	f7fe fabe 	bl	8002634 <error_return>
 80040b8:	e05d      	b.n	8004176 <go_ry+0xd6>
		return;
	}

	Alto.Start_Flag = true;
 80040ba:	4b30      	ldr	r3, [pc, #192]	; (800417c <go_ry+0xdc>)
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
	Alto.Start_Entry_Flag = true;
 80040c2:	4b2e      	ldr	r3, [pc, #184]	; (800417c <go_ry+0xdc>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7

	int16_t m_int = (int16_t)((int16_t)Buf[1] << 8 | (int16_t)Buf[2] << 0);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3301      	adds	r3, #1
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	b21a      	sxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3302      	adds	r3, #2
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	b21b      	sxth	r3, r3
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
	int16_t m_dec = (int16_t)((int16_t)Buf[3] << 8 | (int16_t)Buf[4] << 0);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3303      	adds	r3, #3
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	b21a      	sxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3304      	adds	r3, #4
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	b21b      	sxth	r3, r3
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
	float ry = (float)((float)m_int + (float)m_dec / 10000);
 80040fa:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004106:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004112:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8004180 <go_ry+0xe0>
 8004116:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800411a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800411e:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8

	float T_TCP[4][4];
	float T_ry[4][4];
	pose_to_translation_matrix(Alto.Current_TCP_Position, Alto.Current_TCP_Rotation, T_TCP);
 8004122:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004126:	461a      	mov	r2, r3
 8004128:	4916      	ldr	r1, [pc, #88]	; (8004184 <go_ry+0xe4>)
 800412a:	4817      	ldr	r0, [pc, #92]	; (8004188 <go_ry+0xe8>)
 800412c:	f002 f812 	bl	8006154 <pose_to_translation_matrix>
	T_init(T_ry);
 8004130:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004134:	4618      	mov	r0, r3
 8004136:	f001 fec3 	bl	8005ec0 <T_init>
	rotate_y(T_ry, ry);
 800413a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800413e:	ed97 0a32 	vldr	s0, [r7, #200]	; 0xc8
 8004142:	4618      	mov	r0, r3
 8004144:	f001 ff55 	bl	8005ff2 <rotate_y>
	float T_ans[4][4];
	Mat4x4_Mul(T_TCP, T_ry, T_ans);
 8004148:	f107 0208 	add.w	r2, r7, #8
 800414c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004150:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fc0a 	bl	800496e <Mat4x4_Mul>
	translation_matrix_to_pose(T_ans, Alto.Target_TCP_Position, Alto.Target_TCP_Rotation);
 800415a:	f107 0308 	add.w	r3, r7, #8
 800415e:	4a0b      	ldr	r2, [pc, #44]	; (800418c <go_ry+0xec>)
 8004160:	490b      	ldr	r1, [pc, #44]	; (8004190 <go_ry+0xf0>)
 8004162:	4618      	mov	r0, r3
 8004164:	f002 f82b 	bl	80061be <translation_matrix_to_pose>
	Alto.Mov = MOVP;
 8004168:	4b04      	ldr	r3, [pc, #16]	; (800417c <go_ry+0xdc>)
 800416a:	2200      	movs	r2, #0
 800416c:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1

	done_return(ALTO_GO_RY);
 8004170:	2036      	movs	r0, #54	; 0x36
 8004172:	f7fe fa75 	bl	8002660 <done_return>
}
 8004176:	37d0      	adds	r7, #208	; 0xd0
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	2000016c 	.word	0x2000016c
 8004180:	461c4000 	.word	0x461c4000
 8004184:	20000400 	.word	0x20000400
 8004188:	200003f4 	.word	0x200003f4
 800418c:	20000430 	.word	0x20000430
 8004190:	20000424 	.word	0x20000424

08004194 <go_rz>:

void go_rz(uint8_t* Buf)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b0b4      	sub	sp, #208	; 0xd0
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 800419c:	4b34      	ldr	r3, [pc, #208]	; (8004270 <go_rz+0xdc>)
 800419e:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <go_rz+0x1a>
	{
		error_return(ALTO_GO_RZ);
 80041a6:	2037      	movs	r0, #55	; 0x37
 80041a8:	f7fe fa44 	bl	8002634 <error_return>
 80041ac:	e05d      	b.n	800426a <go_rz+0xd6>
		return;
	}

	Alto.Start_Flag = true;
 80041ae:	4b30      	ldr	r3, [pc, #192]	; (8004270 <go_rz+0xdc>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
	Alto.Start_Entry_Flag = true;
 80041b6:	4b2e      	ldr	r3, [pc, #184]	; (8004270 <go_rz+0xdc>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7

	int16_t m_int = (int16_t)((int16_t)Buf[1] << 8 | (int16_t)Buf[2] << 0);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3301      	adds	r3, #1
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	b21a      	sxth	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3302      	adds	r3, #2
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	b21b      	sxth	r3, r3
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
	int16_t m_dec = (int16_t)((int16_t)Buf[3] << 8 | (int16_t)Buf[4] << 0);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3303      	adds	r3, #3
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	b21a      	sxth	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	b21b      	sxth	r3, r3
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
	float rz = (float)((float)m_int + (float)m_dec / 10000);
 80041ee:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041fa:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004206:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8004274 <go_rz+0xe0>
 800420a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800420e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004212:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8

	float T_TCP[4][4];
	float T_rz[4][4];
	pose_to_translation_matrix(Alto.Current_TCP_Position, Alto.Current_TCP_Rotation, T_TCP);
 8004216:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800421a:	461a      	mov	r2, r3
 800421c:	4916      	ldr	r1, [pc, #88]	; (8004278 <go_rz+0xe4>)
 800421e:	4817      	ldr	r0, [pc, #92]	; (800427c <go_rz+0xe8>)
 8004220:	f001 ff98 	bl	8006154 <pose_to_translation_matrix>
	T_init(T_rz);
 8004224:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004228:	4618      	mov	r0, r3
 800422a:	f001 fe49 	bl	8005ec0 <T_init>
	rotate_z(T_rz, rz);
 800422e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004232:	ed97 0a32 	vldr	s0, [r7, #200]	; 0xc8
 8004236:	4618      	mov	r0, r3
 8004238:	f001 ff20 	bl	800607c <rotate_z>
	float T_ans[4][4];
	Mat4x4_Mul(T_TCP, T_rz, T_ans);
 800423c:	f107 0208 	add.w	r2, r7, #8
 8004240:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004244:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fb90 	bl	800496e <Mat4x4_Mul>
	translation_matrix_to_pose(T_ans, Alto.Target_TCP_Position, Alto.Target_TCP_Rotation);
 800424e:	f107 0308 	add.w	r3, r7, #8
 8004252:	4a0b      	ldr	r2, [pc, #44]	; (8004280 <go_rz+0xec>)
 8004254:	490b      	ldr	r1, [pc, #44]	; (8004284 <go_rz+0xf0>)
 8004256:	4618      	mov	r0, r3
 8004258:	f001 ffb1 	bl	80061be <translation_matrix_to_pose>
	Alto.Mov = MOVP;
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <go_rz+0xdc>)
 800425e:	2200      	movs	r2, #0
 8004260:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1

	done_return(ALTO_GO_RZ);
 8004264:	2037      	movs	r0, #55	; 0x37
 8004266:	f7fe f9fb 	bl	8002660 <done_return>
}
 800426a:	37d0      	adds	r7, #208	; 0xd0
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	2000016c 	.word	0x2000016c
 8004274:	461c4000 	.word	0x461c4000
 8004278:	20000400 	.word	0x20000400
 800427c:	200003f4 	.word	0x200003f4
 8004280:	20000430 	.word	0x20000430
 8004284:	20000424 	.word	0x20000424

08004288 <go_joint>:

void go_joint(uint8_t* Buf)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	if(Alto.Start_Flag)
 8004290:	4b33      	ldr	r3, [pc, #204]	; (8004360 <go_joint+0xd8>)
 8004292:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <go_joint+0x1a>
	{
		error_return(ALTO_GO_JOINT);
 800429a:	2038      	movs	r0, #56	; 0x38
 800429c:	f7fe f9ca 	bl	8002634 <error_return>
		return;
 80042a0:	e05a      	b.n	8004358 <go_joint+0xd0>
	}

	Alto.Start_Flag = true;
 80042a2:	4b2f      	ldr	r3, [pc, #188]	; (8004360 <go_joint+0xd8>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
	Alto.Start_Entry_Flag = true;
 80042aa:	4b2d      	ldr	r3, [pc, #180]	; (8004360 <go_joint+0xd8>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7

	uint8_t id = Buf[1];
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	785b      	ldrb	r3, [r3, #1]
 80042b6:	75fb      	strb	r3, [r7, #23]
	uint8_t index = id - 1;
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	75bb      	strb	r3, [r7, #22]
	if (id > AXIS_NUM || id == 0)
 80042be:	7dfb      	ldrb	r3, [r7, #23]
 80042c0:	2b06      	cmp	r3, #6
 80042c2:	d802      	bhi.n	80042ca <go_joint+0x42>
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d103      	bne.n	80042d2 <go_joint+0x4a>
	{
		error_return(ALTO_GO_JOINT);
 80042ca:	2038      	movs	r0, #56	; 0x38
 80042cc:	f7fe f9b2 	bl	8002634 <error_return>
		return;
 80042d0:	e042      	b.n	8004358 <go_joint+0xd0>
	}

	int16_t m_int = (int16_t)((int16_t)Buf[2] << 8 | (int16_t)Buf[3] << 0);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3302      	adds	r3, #2
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	b21a      	sxth	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3303      	adds	r3, #3
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	b21b      	sxth	r3, r3
 80042e4:	4313      	orrs	r3, r2
 80042e6:	82bb      	strh	r3, [r7, #20]
	int16_t m_dec = (int16_t)((int16_t)Buf[4] << 8 | (int16_t)Buf[5] << 0);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	b21a      	sxth	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3305      	adds	r3, #5
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	b21b      	sxth	r3, r3
 80042fa:	4313      	orrs	r3, r2
 80042fc:	827b      	strh	r3, [r7, #18]
	float ang = (float)((float)m_int + (float)m_dec / 10000);
 80042fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800430a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004316:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004364 <go_joint+0xdc>
 800431a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800431e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004322:	edc7 7a03 	vstr	s15, [r7, #12]
	Alto.Target_JointAngle[index] = Alto.Current_JointAngle[index] + ang;
 8004326:	7dbb      	ldrb	r3, [r7, #22]
 8004328:	4a0d      	ldr	r2, [pc, #52]	; (8004360 <go_joint+0xd8>)
 800432a:	339c      	adds	r3, #156	; 0x9c
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	ed93 7a00 	vldr	s14, [r3]
 8004334:	7dbb      	ldrb	r3, [r7, #22]
 8004336:	edd7 7a03 	vldr	s15, [r7, #12]
 800433a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800433e:	4a08      	ldr	r2, [pc, #32]	; (8004360 <go_joint+0xd8>)
 8004340:	33a8      	adds	r3, #168	; 0xa8
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	edc3 7a00 	vstr	s15, [r3]
	Alto.Mov = JOINT;
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <go_joint+0xd8>)
 800434c:	2201      	movs	r2, #1
 800434e:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1

	done_return(ALTO_GO_JOINT);
 8004352:	2038      	movs	r0, #56	; 0x38
 8004354:	f7fe f984 	bl	8002660 <done_return>
}
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	2000016c 	.word	0x2000016c
 8004364:	461c4000 	.word	0x461c4000

08004368 <get_msg>:

void get_msg(uint8_t* Buf)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4a07      	ldr	r2, [pc, #28]	; (80043a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800438c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4a06      	ldr	r2, [pc, #24]	; (80043ac <vApplicationGetIdleTaskMemory+0x30>)
 8004392:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2280      	movs	r2, #128	; 0x80
 8004398:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	200004b0 	.word	0x200004b0
 80043ac:	20000550 	.word	0x20000550

080043b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043b0:	b5b0      	push	{r4, r5, r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043b6:	f001 ffb9 	bl	800632c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043ba:	f000 f839 	bl	8004430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043be:	f000 f8f9 	bl	80045b4 <MX_GPIO_Init>
  MX_CAN1_Init();
 80043c2:	f000 f89f 	bl	8004504 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  Robot_Config_Init(&Alto);
 80043c6:	4815      	ldr	r0, [pc, #84]	; (800441c <main+0x6c>)
 80043c8:	f7fd fd64 	bl	8001e94 <Robot_Config_Init>
  Emm_Request_Handle_Init(&Emm_Request_Handle);
 80043cc:	4814      	ldr	r0, [pc, #80]	; (8004420 <main+0x70>)
 80043ce:	f7fd ff5d 	bl	800228c <Emm_Request_Handle_Init>

  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80043d2:	4814      	ldr	r0, [pc, #80]	; (8004424 <main+0x74>)
 80043d4:	f002 f9ec 	bl	80067b0 <HAL_CAN_Start>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <main+0x32>
	Error_Handler();
 80043de:	f000 fa63 	bl	80048a8 <Error_Handler>

  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80043e2:	2102      	movs	r1, #2
 80043e4:	480f      	ldr	r0, [pc, #60]	; (8004424 <main+0x74>)
 80043e6:	f002 fc19 	bl	8006c1c <HAL_CAN_ActivateNotification>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <main+0x44>
	Error_Handler();
 80043f0:	f000 fa5a 	bl	80048a8 <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Master_Task */
  osThreadDef(Master_Task, Start_Master_Task, osPriorityNormal, 0, 256);
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <main+0x78>)
 80043f6:	1d3c      	adds	r4, r7, #4
 80043f8:	461d      	mov	r5, r3
 80043fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004402:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Master_TaskHandle = osThreadCreate(osThread(Master_Task), NULL);
 8004406:	1d3b      	adds	r3, r7, #4
 8004408:	2100      	movs	r1, #0
 800440a:	4618      	mov	r0, r3
 800440c:	f008 fddd 	bl	800cfca <osThreadCreate>
 8004410:	4603      	mov	r3, r0
 8004412:	4a06      	ldr	r2, [pc, #24]	; (800442c <main+0x7c>)
 8004414:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004416:	f008 fdd1 	bl	800cfbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800441a:	e7fe      	b.n	800441a <main+0x6a>
 800441c:	2000016c 	.word	0x2000016c
 8004420:	20000448 	.word	0x20000448
 8004424:	20000750 	.word	0x20000750
 8004428:	08010364 	.word	0x08010364
 800442c:	20000778 	.word	0x20000778

08004430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b094      	sub	sp, #80	; 0x50
 8004434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004436:	f107 0320 	add.w	r3, r7, #32
 800443a:	2230      	movs	r2, #48	; 0x30
 800443c:	2100      	movs	r1, #0
 800443e:	4618      	mov	r0, r3
 8004440:	f00a fd4a 	bl	800eed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004444:	f107 030c 	add.w	r3, r7, #12
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	60da      	str	r2, [r3, #12]
 8004452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004454:	2300      	movs	r3, #0
 8004456:	60bb      	str	r3, [r7, #8]
 8004458:	4b28      	ldr	r3, [pc, #160]	; (80044fc <SystemClock_Config+0xcc>)
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	4a27      	ldr	r2, [pc, #156]	; (80044fc <SystemClock_Config+0xcc>)
 800445e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004462:	6413      	str	r3, [r2, #64]	; 0x40
 8004464:	4b25      	ldr	r3, [pc, #148]	; (80044fc <SystemClock_Config+0xcc>)
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004470:	2300      	movs	r3, #0
 8004472:	607b      	str	r3, [r7, #4]
 8004474:	4b22      	ldr	r3, [pc, #136]	; (8004500 <SystemClock_Config+0xd0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a21      	ldr	r2, [pc, #132]	; (8004500 <SystemClock_Config+0xd0>)
 800447a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b1f      	ldr	r3, [pc, #124]	; (8004500 <SystemClock_Config+0xd0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004488:	607b      	str	r3, [r7, #4]
 800448a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800448c:	2301      	movs	r3, #1
 800448e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004496:	2302      	movs	r3, #2
 8004498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800449a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800449e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80044a0:	2304      	movs	r3, #4
 80044a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80044a4:	2390      	movs	r3, #144	; 0x90
 80044a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044a8:	2302      	movs	r3, #2
 80044aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80044ac:	2306      	movs	r3, #6
 80044ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044b0:	f107 0320 	add.w	r3, r7, #32
 80044b4:	4618      	mov	r0, r3
 80044b6:	f004 fb07 	bl	8008ac8 <HAL_RCC_OscConfig>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80044c0:	f000 f9f2 	bl	80048a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044c4:	230f      	movs	r3, #15
 80044c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044c8:	2302      	movs	r3, #2
 80044ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80044d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80044d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80044d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80044dc:	f107 030c 	add.w	r3, r7, #12
 80044e0:	2104      	movs	r1, #4
 80044e2:	4618      	mov	r0, r3
 80044e4:	f004 fd68 	bl	8008fb8 <HAL_RCC_ClockConfig>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80044ee:	f000 f9db 	bl	80048a8 <Error_Handler>
  }
}
 80044f2:	bf00      	nop
 80044f4:	3750      	adds	r7, #80	; 0x50
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40023800 	.word	0x40023800
 8004500:	40007000 	.word	0x40007000

08004504 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08a      	sub	sp, #40	; 0x28
 8004508:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800450a:	4b28      	ldr	r3, [pc, #160]	; (80045ac <MX_CAN1_Init+0xa8>)
 800450c:	4a28      	ldr	r2, [pc, #160]	; (80045b0 <MX_CAN1_Init+0xac>)
 800450e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8004510:	4b26      	ldr	r3, [pc, #152]	; (80045ac <MX_CAN1_Init+0xa8>)
 8004512:	2204      	movs	r2, #4
 8004514:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004516:	4b25      	ldr	r3, [pc, #148]	; (80045ac <MX_CAN1_Init+0xa8>)
 8004518:	2200      	movs	r2, #0
 800451a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800451c:	4b23      	ldr	r3, [pc, #140]	; (80045ac <MX_CAN1_Init+0xa8>)
 800451e:	2200      	movs	r2, #0
 8004520:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8004522:	4b22      	ldr	r3, [pc, #136]	; (80045ac <MX_CAN1_Init+0xa8>)
 8004524:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004528:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800452a:	4b20      	ldr	r3, [pc, #128]	; (80045ac <MX_CAN1_Init+0xa8>)
 800452c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004530:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004532:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <MX_CAN1_Init+0xa8>)
 8004534:	2200      	movs	r2, #0
 8004536:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004538:	4b1c      	ldr	r3, [pc, #112]	; (80045ac <MX_CAN1_Init+0xa8>)
 800453a:	2200      	movs	r2, #0
 800453c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800453e:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <MX_CAN1_Init+0xa8>)
 8004540:	2200      	movs	r2, #0
 8004542:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004544:	4b19      	ldr	r3, [pc, #100]	; (80045ac <MX_CAN1_Init+0xa8>)
 8004546:	2200      	movs	r2, #0
 8004548:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800454a:	4b18      	ldr	r3, [pc, #96]	; (80045ac <MX_CAN1_Init+0xa8>)
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004550:	4b16      	ldr	r3, [pc, #88]	; (80045ac <MX_CAN1_Init+0xa8>)
 8004552:	2200      	movs	r2, #0
 8004554:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004556:	4815      	ldr	r0, [pc, #84]	; (80045ac <MX_CAN1_Init+0xa8>)
 8004558:	f001 ff4e 	bl	80063f8 <HAL_CAN_Init>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8004562:	f000 f9a1 	bl	80048a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfil;
  canfil.FilterBank = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 800456e:	2300      	movs	r3, #0
 8004570:	613b      	str	r3, [r7, #16]
  canfil.FilterIdHigh = 0;
 8004572:	2300      	movs	r3, #0
 8004574:	603b      	str	r3, [r7, #0]
  canfil.FilterIdLow = 0;
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
  canfil.FilterMaskIdHigh = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	60bb      	str	r3, [r7, #8]
  canfil.FilterMaskIdLow = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8004582:	2301      	movs	r3, #1
 8004584:	61fb      	str	r3, [r7, #28]
  canfil.FilterActivation = ENABLE;
 8004586:	2301      	movs	r3, #1
 8004588:	623b      	str	r3, [r7, #32]
  canfil.SlaveStartFilterBank = 14;
 800458a:	230e      	movs	r3, #14
 800458c:	627b      	str	r3, [r7, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan1, &canfil) != HAL_OK)
 800458e:	463b      	mov	r3, r7
 8004590:	4619      	mov	r1, r3
 8004592:	4806      	ldr	r0, [pc, #24]	; (80045ac <MX_CAN1_Init+0xa8>)
 8004594:	f002 f82c 	bl	80065f0 <HAL_CAN_ConfigFilter>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_CAN1_Init+0x9e>
	  Error_Handler();
 800459e:	f000 f983 	bl	80048a8 <Error_Handler>



  /* USER CODE END CAN1_Init 2 */

}
 80045a2:	bf00      	nop
 80045a4:	3728      	adds	r7, #40	; 0x28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000750 	.word	0x20000750
 80045b0:	40006400 	.word	0x40006400

080045b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08c      	sub	sp, #48	; 0x30
 80045b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ba:	f107 031c 	add.w	r3, r7, #28
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	605a      	str	r2, [r3, #4]
 80045c4:	609a      	str	r2, [r3, #8]
 80045c6:	60da      	str	r2, [r3, #12]
 80045c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	4b99      	ldr	r3, [pc, #612]	; (8004834 <MX_GPIO_Init+0x280>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	4a98      	ldr	r2, [pc, #608]	; (8004834 <MX_GPIO_Init+0x280>)
 80045d4:	f043 0310 	orr.w	r3, r3, #16
 80045d8:	6313      	str	r3, [r2, #48]	; 0x30
 80045da:	4b96      	ldr	r3, [pc, #600]	; (8004834 <MX_GPIO_Init+0x280>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	4b92      	ldr	r3, [pc, #584]	; (8004834 <MX_GPIO_Init+0x280>)
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	4a91      	ldr	r2, [pc, #580]	; (8004834 <MX_GPIO_Init+0x280>)
 80045f0:	f043 0304 	orr.w	r3, r3, #4
 80045f4:	6313      	str	r3, [r2, #48]	; 0x30
 80045f6:	4b8f      	ldr	r3, [pc, #572]	; (8004834 <MX_GPIO_Init+0x280>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	4b8b      	ldr	r3, [pc, #556]	; (8004834 <MX_GPIO_Init+0x280>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	4a8a      	ldr	r2, [pc, #552]	; (8004834 <MX_GPIO_Init+0x280>)
 800460c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004610:	6313      	str	r3, [r2, #48]	; 0x30
 8004612:	4b88      	ldr	r3, [pc, #544]	; (8004834 <MX_GPIO_Init+0x280>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	4b84      	ldr	r3, [pc, #528]	; (8004834 <MX_GPIO_Init+0x280>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	4a83      	ldr	r2, [pc, #524]	; (8004834 <MX_GPIO_Init+0x280>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6313      	str	r3, [r2, #48]	; 0x30
 800462e:	4b81      	ldr	r3, [pc, #516]	; (8004834 <MX_GPIO_Init+0x280>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	4b7d      	ldr	r3, [pc, #500]	; (8004834 <MX_GPIO_Init+0x280>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	4a7c      	ldr	r2, [pc, #496]	; (8004834 <MX_GPIO_Init+0x280>)
 8004644:	f043 0302 	orr.w	r3, r3, #2
 8004648:	6313      	str	r3, [r2, #48]	; 0x30
 800464a:	4b7a      	ldr	r3, [pc, #488]	; (8004834 <MX_GPIO_Init+0x280>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	60bb      	str	r3, [r7, #8]
 8004654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	607b      	str	r3, [r7, #4]
 800465a:	4b76      	ldr	r3, [pc, #472]	; (8004834 <MX_GPIO_Init+0x280>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	4a75      	ldr	r2, [pc, #468]	; (8004834 <MX_GPIO_Init+0x280>)
 8004660:	f043 0308 	orr.w	r3, r3, #8
 8004664:	6313      	str	r3, [r2, #48]	; 0x30
 8004666:	4b73      	ldr	r3, [pc, #460]	; (8004834 <MX_GPIO_Init+0x280>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004672:	2200      	movs	r2, #0
 8004674:	2108      	movs	r1, #8
 8004676:	4870      	ldr	r0, [pc, #448]	; (8004838 <MX_GPIO_Init+0x284>)
 8004678:	f002 ffbc 	bl	80075f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800467c:	2201      	movs	r2, #1
 800467e:	2101      	movs	r1, #1
 8004680:	486e      	ldr	r0, [pc, #440]	; (800483c <MX_GPIO_Init+0x288>)
 8004682:	f002 ffb7 	bl	80075f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004686:	2200      	movs	r2, #0
 8004688:	f24f 0110 	movw	r1, #61456	; 0xf010
 800468c:	486c      	ldr	r0, [pc, #432]	; (8004840 <MX_GPIO_Init+0x28c>)
 800468e:	f002 ffb1 	bl	80075f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004692:	2308      	movs	r3, #8
 8004694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004696:	2301      	movs	r3, #1
 8004698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469a:	2300      	movs	r3, #0
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800469e:	2300      	movs	r3, #0
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80046a2:	f107 031c 	add.w	r3, r7, #28
 80046a6:	4619      	mov	r1, r3
 80046a8:	4863      	ldr	r0, [pc, #396]	; (8004838 <MX_GPIO_Init+0x284>)
 80046aa:	f002 fdef 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80046ae:	2301      	movs	r3, #1
 80046b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046b2:	2301      	movs	r3, #1
 80046b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ba:	2300      	movs	r3, #0
 80046bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80046be:	f107 031c 	add.w	r3, r7, #28
 80046c2:	4619      	mov	r1, r3
 80046c4:	485d      	ldr	r0, [pc, #372]	; (800483c <MX_GPIO_Init+0x288>)
 80046c6:	f002 fde1 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80046ca:	2308      	movs	r3, #8
 80046cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ce:	2302      	movs	r3, #2
 80046d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d6:	2300      	movs	r3, #0
 80046d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046da:	2305      	movs	r3, #5
 80046dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80046de:	f107 031c 	add.w	r3, r7, #28
 80046e2:	4619      	mov	r1, r3
 80046e4:	4855      	ldr	r0, [pc, #340]	; (800483c <MX_GPIO_Init+0x288>)
 80046e6:	f002 fdd1 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80046ea:	2301      	movs	r3, #1
 80046ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80046ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80046f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80046f8:	f107 031c 	add.w	r3, r7, #28
 80046fc:	4619      	mov	r1, r3
 80046fe:	4851      	ldr	r0, [pc, #324]	; (8004844 <MX_GPIO_Init+0x290>)
 8004700:	f002 fdc4 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8004704:	2310      	movs	r3, #16
 8004706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004708:	2302      	movs	r3, #2
 800470a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470c:	2300      	movs	r3, #0
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004710:	2300      	movs	r3, #0
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004714:	2306      	movs	r3, #6
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004718:	f107 031c 	add.w	r3, r7, #28
 800471c:	4619      	mov	r1, r3
 800471e:	4849      	ldr	r0, [pc, #292]	; (8004844 <MX_GPIO_Init+0x290>)
 8004720:	f002 fdb4 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004724:	23e0      	movs	r3, #224	; 0xe0
 8004726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004728:	2302      	movs	r3, #2
 800472a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472c:	2300      	movs	r3, #0
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004730:	2300      	movs	r3, #0
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004734:	2305      	movs	r3, #5
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004738:	f107 031c 	add.w	r3, r7, #28
 800473c:	4619      	mov	r1, r3
 800473e:	4841      	ldr	r0, [pc, #260]	; (8004844 <MX_GPIO_Init+0x290>)
 8004740:	f002 fda4 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004744:	2304      	movs	r3, #4
 8004746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004748:	2300      	movs	r3, #0
 800474a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474c:	2300      	movs	r3, #0
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004750:	f107 031c 	add.w	r3, r7, #28
 8004754:	4619      	mov	r1, r3
 8004756:	483c      	ldr	r0, [pc, #240]	; (8004848 <MX_GPIO_Init+0x294>)
 8004758:	f002 fd98 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_1_Pin Limit_Switch_2_Pin Limit_Switch_3_Pin Limit_Switch_4_Pin
                           Limit_Switch_5_Pin Limit_Switch_6_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_1_Pin|Limit_Switch_2_Pin|Limit_Switch_3_Pin|Limit_Switch_4_Pin
 800475c:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
 8004760:	61fb      	str	r3, [r7, #28]
                          |Limit_Switch_5_Pin|Limit_Switch_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004762:	2300      	movs	r3, #0
 8004764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004766:	2301      	movs	r3, #1
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800476a:	f107 031c 	add.w	r3, r7, #28
 800476e:	4619      	mov	r1, r3
 8004770:	4831      	ldr	r0, [pc, #196]	; (8004838 <MX_GPIO_Init+0x284>)
 8004772:	f002 fd8b 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8004776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800477a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477c:	2302      	movs	r3, #2
 800477e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004780:	2300      	movs	r3, #0
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004784:	2300      	movs	r3, #0
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004788:	2305      	movs	r3, #5
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800478c:	f107 031c 	add.w	r3, r7, #28
 8004790:	4619      	mov	r1, r3
 8004792:	482d      	ldr	r0, [pc, #180]	; (8004848 <MX_GPIO_Init+0x294>)
 8004794:	f002 fd7a 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004798:	f24f 0310 	movw	r3, #61456	; 0xf010
 800479c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800479e:	2301      	movs	r3, #1
 80047a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a6:	2300      	movs	r3, #0
 80047a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047aa:	f107 031c 	add.w	r3, r7, #28
 80047ae:	4619      	mov	r1, r3
 80047b0:	4823      	ldr	r0, [pc, #140]	; (8004840 <MX_GPIO_Init+0x28c>)
 80047b2:	f002 fd6b 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80047b6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80047ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047bc:	2302      	movs	r3, #2
 80047be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80047c8:	2306      	movs	r3, #6
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047cc:	f107 031c 	add.w	r3, r7, #28
 80047d0:	4619      	mov	r1, r3
 80047d2:	481a      	ldr	r0, [pc, #104]	; (800483c <MX_GPIO_Init+0x288>)
 80047d4:	f002 fd5a 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80047d8:	2320      	movs	r3, #32
 80047da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047dc:	2300      	movs	r3, #0
 80047de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80047e4:	f107 031c 	add.w	r3, r7, #28
 80047e8:	4619      	mov	r1, r3
 80047ea:	4815      	ldr	r0, [pc, #84]	; (8004840 <MX_GPIO_Init+0x28c>)
 80047ec:	f002 fd4e 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80047f0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80047f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047f6:	2312      	movs	r3, #18
 80047f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047fe:	2300      	movs	r3, #0
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004802:	2304      	movs	r3, #4
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004806:	f107 031c 	add.w	r3, r7, #28
 800480a:	4619      	mov	r1, r3
 800480c:	480e      	ldr	r0, [pc, #56]	; (8004848 <MX_GPIO_Init+0x294>)
 800480e:	f002 fd3d 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004812:	2302      	movs	r3, #2
 8004814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004816:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800481a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481c:	2300      	movs	r3, #0
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004820:	f107 031c 	add.w	r3, r7, #28
 8004824:	4619      	mov	r1, r3
 8004826:	4804      	ldr	r0, [pc, #16]	; (8004838 <MX_GPIO_Init+0x284>)
 8004828:	f002 fd30 	bl	800728c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800482c:	bf00      	nop
 800482e:	3730      	adds	r7, #48	; 0x30
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40023800 	.word	0x40023800
 8004838:	40021000 	.word	0x40021000
 800483c:	40020800 	.word	0x40020800
 8004840:	40020c00 	.word	0x40020c00
 8004844:	40020000 	.word	0x40020000
 8004848:	40020400 	.word	0x40020400

0800484c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
	Robot_Callback(hcan);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f9b1 	bl	8004bbc <Robot_Callback>
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <Start_Master_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Master_Task */
void Start_Master_Task(void const * argument)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800486c:	f009 fe06 	bl	800e47c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  Robot_Master(&hcan1, Data_Temp);
 8004870:	4902      	ldr	r1, [pc, #8]	; (800487c <Start_Master_Task+0x18>)
 8004872:	4803      	ldr	r0, [pc, #12]	; (8004880 <Start_Master_Task+0x1c>)
 8004874:	f000 faf0 	bl	8004e58 <Robot_Master>
 8004878:	e7fa      	b.n	8004870 <Start_Master_Task+0xc>
 800487a:	bf00      	nop
 800487c:	2000044c 	.word	0x2000044c
 8004880:	20000750 	.word	0x20000750

08004884 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004896:	f001 fd6b 	bl	8006370 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40010000 	.word	0x40010000

080048a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048ac:	b672      	cpsid	i
}
 80048ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 80048b0:	2201      	movs	r2, #1
 80048b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048b6:	4802      	ldr	r0, [pc, #8]	; (80048c0 <Error_Handler+0x18>)
 80048b8:	f002 fe9c 	bl	80075f4 <HAL_GPIO_WritePin>
 80048bc:	e7f8      	b.n	80048b0 <Error_Handler+0x8>
 80048be:	bf00      	nop
 80048c0:	40020c00 	.word	0x40020c00

080048c4 <Mat4x4_Init>:
 *      Author: kylem
 */
#include "matmul.h"

void Mat4x4_Init(float mat[4][4])
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	uint8_t n = 4;
 80048cc:	2304      	movs	r3, #4
 80048ce:	737b      	strb	r3, [r7, #13]
	for(uint8_t r = 0; r < n; r++)
 80048d0:	2300      	movs	r3, #0
 80048d2:	73fb      	strb	r3, [r7, #15]
 80048d4:	e016      	b.n	8004904 <Mat4x4_Init+0x40>
	{
		for(uint8_t c = 0; c < n; c++)
 80048d6:	2300      	movs	r3, #0
 80048d8:	73bb      	strb	r3, [r7, #14]
 80048da:	e00c      	b.n	80048f6 <Mat4x4_Init+0x32>
		{
			mat[r][c] = 0;
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	441a      	add	r2, r3
 80048e4:	7bbb      	ldrb	r3, [r7, #14]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
		for(uint8_t c = 0; c < n; c++)
 80048f0:	7bbb      	ldrb	r3, [r7, #14]
 80048f2:	3301      	adds	r3, #1
 80048f4:	73bb      	strb	r3, [r7, #14]
 80048f6:	7bba      	ldrb	r2, [r7, #14]
 80048f8:	7b7b      	ldrb	r3, [r7, #13]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d3ee      	bcc.n	80048dc <Mat4x4_Init+0x18>
	for(uint8_t r = 0; r < n; r++)
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	3301      	adds	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
 8004904:	7bfa      	ldrb	r2, [r7, #15]
 8004906:	7b7b      	ldrb	r3, [r7, #13]
 8004908:	429a      	cmp	r2, r3
 800490a:	d3e4      	bcc.n	80048d6 <Mat4x4_Init+0x12>
		}
	}
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <Vec_Init>:
		}
	}
}

void Vec_Init(float *vec, uint8_t row)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	460b      	mov	r3, r1
 8004924:	70fb      	strb	r3, [r7, #3]
	for(uint8_t r = 0; r < row; r++)
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	e009      	b.n	8004940 <Vec_Init+0x26>
	{
		vec[r] = 0;
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	4413      	add	r3, r2
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
	for(uint8_t r = 0; r < row; r++)
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	3301      	adds	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
 8004940:	7bfa      	ldrb	r2, [r7, #15]
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	429a      	cmp	r2, r3
 8004946:	d3f1      	bcc.n	800492c <Vec_Init+0x12>
	}
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <Vec3_Init>:
void Vec3_Init(float *vec)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
	Vec_Init(vec, 3);
 800495e:	2103      	movs	r1, #3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff ffda 	bl	800491a <Vec_Init>
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <Mat4x4_Mul>:

void Mat4x4_Mul(float a[4][4], float b[4][4], float ans[4][4])
{
 800496e:	b480      	push	{r7}
 8004970:	b089      	sub	sp, #36	; 0x24
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
	uint8_t n = 4;
 800497a:	2304      	movs	r3, #4
 800497c:	75bb      	strb	r3, [r7, #22]
	for(uint8_t r = 0; r < n; r++)
 800497e:	2300      	movs	r3, #0
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e03c      	b.n	80049fe <Mat4x4_Mul+0x90>
	{
		for(uint8_t c = 0; c < n; c++)
 8004984:	2300      	movs	r3, #0
 8004986:	77bb      	strb	r3, [r7, #30]
 8004988:	e032      	b.n	80049f0 <Mat4x4_Mul+0x82>
		{
			float mat_u = 0;
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	61bb      	str	r3, [r7, #24]
			for(uint8_t u = 0; u < n; u++)
 8004990:	2300      	movs	r3, #0
 8004992:	75fb      	strb	r3, [r7, #23]
 8004994:	e01c      	b.n	80049d0 <Mat4x4_Mul+0x62>
			{
				mat_u += a[r][u] * b[u][c];
 8004996:	7ffb      	ldrb	r3, [r7, #31]
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	441a      	add	r2, r3
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	ed93 7a00 	vldr	s14, [r3]
 80049a8:	7dfb      	ldrb	r3, [r7, #23]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	441a      	add	r2, r3
 80049b0:	7fbb      	ldrb	r3, [r7, #30]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	edd3 7a00 	vldr	s15, [r3]
 80049ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049be:	ed97 7a06 	vldr	s14, [r7, #24]
 80049c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049c6:	edc7 7a06 	vstr	s15, [r7, #24]
			for(uint8_t u = 0; u < n; u++)
 80049ca:	7dfb      	ldrb	r3, [r7, #23]
 80049cc:	3301      	adds	r3, #1
 80049ce:	75fb      	strb	r3, [r7, #23]
 80049d0:	7dfa      	ldrb	r2, [r7, #23]
 80049d2:	7dbb      	ldrb	r3, [r7, #22]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d3de      	bcc.n	8004996 <Mat4x4_Mul+0x28>
			}
			ans[r][c] = mat_u;
 80049d8:	7ffb      	ldrb	r3, [r7, #31]
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	441a      	add	r2, r3
 80049e0:	7fbb      	ldrb	r3, [r7, #30]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	601a      	str	r2, [r3, #0]
		for(uint8_t c = 0; c < n; c++)
 80049ea:	7fbb      	ldrb	r3, [r7, #30]
 80049ec:	3301      	adds	r3, #1
 80049ee:	77bb      	strb	r3, [r7, #30]
 80049f0:	7fba      	ldrb	r2, [r7, #30]
 80049f2:	7dbb      	ldrb	r3, [r7, #22]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d3c8      	bcc.n	800498a <Mat4x4_Mul+0x1c>
	for(uint8_t r = 0; r < n; r++)
 80049f8:	7ffb      	ldrb	r3, [r7, #31]
 80049fa:	3301      	adds	r3, #1
 80049fc:	77fb      	strb	r3, [r7, #31]
 80049fe:	7ffa      	ldrb	r2, [r7, #31]
 8004a00:	7dbb      	ldrb	r3, [r7, #22]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d3be      	bcc.n	8004984 <Mat4x4_Mul+0x16>
		}
	}
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	3724      	adds	r7, #36	; 0x24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <Mat3x3_Vec3_Mul>:
		}
	}
}

void Mat3x3_Vec3_Mul(float mat[3][3], float vec[3], float ans[3])
{
 8004a14:	b480      	push	{r7}
 8004a16:	b089      	sub	sp, #36	; 0x24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
	uint8_t n = 3;
 8004a20:	2303      	movs	r3, #3
 8004a22:	75bb      	strb	r3, [r7, #22]
	for(uint8_t r = 0; r < n; r++)
 8004a24:	2300      	movs	r3, #0
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e030      	b.n	8004a8c <Mat3x3_Vec3_Mul+0x78>
	{
		float mat_u = 0;
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	61bb      	str	r3, [r7, #24]
		for(uint8_t u = 0; u < n; u++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	75fb      	strb	r3, [r7, #23]
 8004a34:	e01d      	b.n	8004a72 <Mat3x3_Vec3_Mul+0x5e>
		{
			mat_u += mat[r][u] * vec[u];
 8004a36:	7ffa      	ldrb	r2, [r7, #31]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	461a      	mov	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	441a      	add	r2, r3
 8004a46:	7dfb      	ldrb	r3, [r7, #23]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	ed93 7a00 	vldr	s14, [r3]
 8004a50:	7dfb      	ldrb	r3, [r7, #23]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	4413      	add	r3, r2
 8004a58:	edd3 7a00 	vldr	s15, [r3]
 8004a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a60:	ed97 7a06 	vldr	s14, [r7, #24]
 8004a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a68:	edc7 7a06 	vstr	s15, [r7, #24]
		for(uint8_t u = 0; u < n; u++)
 8004a6c:	7dfb      	ldrb	r3, [r7, #23]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
 8004a72:	7dfa      	ldrb	r2, [r7, #23]
 8004a74:	7dbb      	ldrb	r3, [r7, #22]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d3dd      	bcc.n	8004a36 <Mat3x3_Vec3_Mul+0x22>
		}
		ans[r] = mat_u;
 8004a7a:	7ffb      	ldrb	r3, [r7, #31]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	601a      	str	r2, [r3, #0]
	for(uint8_t r = 0; r < n; r++)
 8004a86:	7ffb      	ldrb	r3, [r7, #31]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	77fb      	strb	r3, [r7, #31]
 8004a8c:	7ffa      	ldrb	r2, [r7, #31]
 8004a8e:	7dbb      	ldrb	r3, [r7, #22]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d3ca      	bcc.n	8004a2a <Mat3x3_Vec3_Mul+0x16>
	}
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	3724      	adds	r7, #36	; 0x24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <Mat4x4_I>:
		ans[r] = mat_u;
	}
}

void Mat4x4_I(float mat[4][4])
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
	Mat4x4_Init(mat);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff ff0a 	bl	80048c4 <Mat4x4_Init>
	uint8_t n = 4;
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	73bb      	strb	r3, [r7, #14]
	for(uint8_t u = 0; u < n; u++)
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	73fb      	strb	r3, [r7, #15]
 8004ab8:	e00c      	b.n	8004ad4 <Mat4x4_I+0x32>
	{
		mat[u][u] = 1;
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	441a      	add	r2, r3
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004acc:	601a      	str	r2, [r3, #0]
	for(uint8_t u = 0; u < n; u++)
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	73fb      	strb	r3, [r7, #15]
 8004ad4:	7bfa      	ldrb	r2, [r7, #15]
 8004ad6:	7bbb      	ldrb	r3, [r7, #14]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d3ee      	bcc.n	8004aba <Mat4x4_I+0x18>
	}
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <Mat4x4_Copy>:
		mat[u][u] = 1;
	}
}

void Mat4x4_Copy(float a[4][4], float b[4][4])
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b085      	sub	sp, #20
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
	uint8_t n = 4;
 8004af0:	2304      	movs	r3, #4
 8004af2:	737b      	strb	r3, [r7, #13]
	for(uint8_t r = 0; r < n; r++)
 8004af4:	2300      	movs	r3, #0
 8004af6:	73fb      	strb	r3, [r7, #15]
 8004af8:	e01c      	b.n	8004b34 <Mat4x4_Copy+0x4e>
	{
		for(uint8_t c = 0; c < n; c++)
 8004afa:	2300      	movs	r3, #0
 8004afc:	73bb      	strb	r3, [r7, #14]
 8004afe:	e012      	b.n	8004b26 <Mat4x4_Copy+0x40>
		{
			b[r][c] = a[r][c];
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	18d0      	adds	r0, r2, r3
 8004b08:	7bba      	ldrb	r2, [r7, #14]
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	6839      	ldr	r1, [r7, #0]
 8004b10:	4419      	add	r1, r3
 8004b12:	7bbb      	ldrb	r3, [r7, #14]
 8004b14:	0092      	lsls	r2, r2, #2
 8004b16:	4402      	add	r2, r0
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	601a      	str	r2, [r3, #0]
		for(uint8_t c = 0; c < n; c++)
 8004b20:	7bbb      	ldrb	r3, [r7, #14]
 8004b22:	3301      	adds	r3, #1
 8004b24:	73bb      	strb	r3, [r7, #14]
 8004b26:	7bba      	ldrb	r2, [r7, #14]
 8004b28:	7b7b      	ldrb	r3, [r7, #13]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d3e8      	bcc.n	8004b00 <Mat4x4_Copy+0x1a>
	for(uint8_t r = 0; r < n; r++)
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
 8004b30:	3301      	adds	r3, #1
 8004b32:	73fb      	strb	r3, [r7, #15]
 8004b34:	7bfa      	ldrb	r2, [r7, #15]
 8004b36:	7b7b      	ldrb	r3, [r7, #13]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d3de      	bcc.n	8004afa <Mat4x4_Copy+0x14>
		}
	}
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <Mat3x3_T>:
		}
	}
}

void Mat3x3_T(float a[3][3], float a_T[3][3])
{
 8004b4a:	b490      	push	{r4, r7}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	6039      	str	r1, [r7, #0]
	uint8_t n = 3;
 8004b54:	2303      	movs	r3, #3
 8004b56:	737b      	strb	r3, [r7, #13]
	for(uint8_t r = 0; r < n; r++)
 8004b58:	2300      	movs	r3, #0
 8004b5a:	73fb      	strb	r3, [r7, #15]
 8004b5c:	e024      	b.n	8004ba8 <Mat3x3_T+0x5e>
	{
		for(uint8_t c = 0; c < n; c++)
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73bb      	strb	r3, [r7, #14]
 8004b62:	e01a      	b.n	8004b9a <Mat3x3_T+0x50>
		{
			a_T[c][r] = a[r][c];
 8004b64:	7bfa      	ldrb	r2, [r7, #15]
 8004b66:	4613      	mov	r3, r2
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	461a      	mov	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	1898      	adds	r0, r3, r2
 8004b74:	7bbc      	ldrb	r4, [r7, #14]
 8004b76:	7bba      	ldrb	r2, [r7, #14]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	461a      	mov	r2, r3
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	1899      	adds	r1, r3, r2
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	00a2      	lsls	r2, r4, #2
 8004b8a:	4402      	add	r2, r0
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	601a      	str	r2, [r3, #0]
		for(uint8_t c = 0; c < n; c++)
 8004b94:	7bbb      	ldrb	r3, [r7, #14]
 8004b96:	3301      	adds	r3, #1
 8004b98:	73bb      	strb	r3, [r7, #14]
 8004b9a:	7bba      	ldrb	r2, [r7, #14]
 8004b9c:	7b7b      	ldrb	r3, [r7, #13]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d3e0      	bcc.n	8004b64 <Mat3x3_T+0x1a>
	for(uint8_t r = 0; r < n; r++)
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
 8004ba8:	7bfa      	ldrb	r2, [r7, #15]
 8004baa:	7b7b      	ldrb	r3, [r7, #13]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d3d6      	bcc.n	8004b5e <Mat3x3_T+0x14>
		}
	}
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc90      	pop	{r4, r7}
 8004bba:	4770      	bx	lr

08004bbc <Robot_Callback>:
#include "main.h"
#include "FK.h"
#include "IK.h"

void Robot_Callback(CAN_HandleTypeDef *hcan)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef msg = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CAN_RXData);
 8004bc4:	4b9e      	ldr	r3, [pc, #632]	; (8004e40 <Robot_Callback+0x284>)
 8004bc6:	4a9f      	ldr	r2, [pc, #636]	; (8004e44 <Robot_Callback+0x288>)
 8004bc8:	2100      	movs	r1, #0
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f001 ff04 	bl	80069d8 <HAL_CAN_GetRxMessage>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	74fb      	strb	r3, [r7, #19]
	if(msg != HAL_OK)
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <Robot_Callback+0x22>
		Error_Handler();
 8004bda:	f7ff fe65 	bl	80048a8 <Error_Handler>

	uint8_t index = Emm_Request_Handle.REQUEST_ID - 1;
 8004bde:	4b9a      	ldr	r3, [pc, #616]	; (8004e48 <Robot_Callback+0x28c>)
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	74bb      	strb	r3, [r7, #18]
	uint8_t cmd = CAN_RXData[0];
 8004be6:	4b96      	ldr	r3, [pc, #600]	; (8004e40 <Robot_Callback+0x284>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	747b      	strb	r3, [r7, #17]

	if(Emm_Request_Handle.REQUEST_FLAG == GET_STEP_REQUEST_FLAG && cmd == 0x32)
 8004bec:	4b96      	ldr	r3, [pc, #600]	; (8004e48 <Robot_Callback+0x28c>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d155      	bne.n	8004ca0 <Robot_Callback+0xe4>
 8004bf4:	7c7b      	ldrb	r3, [r7, #17]
 8004bf6:	2b32      	cmp	r3, #50	; 0x32
 8004bf8:	d152      	bne.n	8004ca0 <Robot_Callback+0xe4>
	{
		int32_t clk =
				(int32_t)(((int32_t)CAN_RXData[2] << 24) |
 8004bfa:	4b91      	ldr	r3, [pc, #580]	; (8004e40 <Robot_Callback+0x284>)
 8004bfc:	789b      	ldrb	r3, [r3, #2]
 8004bfe:	061a      	lsls	r2, r3, #24
						  ((int32_t)CAN_RXData[3] << 16) |
 8004c00:	4b8f      	ldr	r3, [pc, #572]	; (8004e40 <Robot_Callback+0x284>)
 8004c02:	78db      	ldrb	r3, [r3, #3]
 8004c04:	041b      	lsls	r3, r3, #16
				(int32_t)(((int32_t)CAN_RXData[2] << 24) |
 8004c06:	431a      	orrs	r2, r3
						  ((int32_t)CAN_RXData[4] << 8) |
 8004c08:	4b8d      	ldr	r3, [pc, #564]	; (8004e40 <Robot_Callback+0x284>)
 8004c0a:	791b      	ldrb	r3, [r3, #4]
 8004c0c:	021b      	lsls	r3, r3, #8
						  ((int32_t)CAN_RXData[3] << 16) |
 8004c0e:	4313      	orrs	r3, r2
						  ((int32_t)CAN_RXData[5] << 0));
 8004c10:	4a8b      	ldr	r2, [pc, #556]	; (8004e40 <Robot_Callback+0x284>)
 8004c12:	7952      	ldrb	r2, [r2, #5]
		int32_t clk =
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61fb      	str	r3, [r7, #28]
		if ((bool)CAN_RXData[1])
 8004c18:	4b89      	ldr	r3, [pc, #548]	; (8004e40 <Robot_Callback+0x284>)
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <Robot_Callback+0x6a>
			clk = -clk;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	425b      	negs	r3, r3
 8004c24:	61fb      	str	r3, [r7, #28]
		int32_t old_clk = Alto.Steppers[index].Clk;
 8004c26:	7cbb      	ldrb	r3, [r7, #18]
 8004c28:	4a88      	ldr	r2, [pc, #544]	; (8004e4c <Robot_Callback+0x290>)
 8004c2a:	214c      	movs	r1, #76	; 0x4c
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	4413      	add	r3, r2
 8004c32:	3308      	adds	r3, #8
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]
		PushBack(Alto.Steppers[index]._Clk_Delta, CLK_DELTA_SAMPLE_LENGTH, (int32_t)(clk - old_clk));
 8004c38:	7cbb      	ldrb	r3, [r7, #18]
 8004c3a:	224c      	movs	r2, #76	; 0x4c
 8004c3c:	fb02 f303 	mul.w	r3, r2, r3
 8004c40:	3318      	adds	r3, #24
 8004c42:	4a82      	ldr	r2, [pc, #520]	; (8004e4c <Robot_Callback+0x290>)
 8004c44:	1898      	adds	r0, r3, r2
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	b21b      	sxth	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	210a      	movs	r1, #10
 8004c58:	f7fd fb28 	bl	80022ac <PushBack>
		Alto.Steppers[index].Clk_Delta = CLK_Delta_Total(Alto.Steppers[index]._Clk_Delta, CLK_DELTA_SAMPLE_LENGTH);
 8004c5c:	7cbb      	ldrb	r3, [r7, #18]
 8004c5e:	224c      	movs	r2, #76	; 0x4c
 8004c60:	fb02 f303 	mul.w	r3, r2, r3
 8004c64:	3318      	adds	r3, #24
 8004c66:	4a79      	ldr	r2, [pc, #484]	; (8004e4c <Robot_Callback+0x290>)
 8004c68:	4413      	add	r3, r2
 8004c6a:	210a      	movs	r1, #10
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fd fb4c 	bl	800230a <CLK_Delta_Total>
 8004c72:	4603      	mov	r3, r0
 8004c74:	461a      	mov	r2, r3
 8004c76:	7cbb      	ldrb	r3, [r7, #18]
 8004c78:	4610      	mov	r0, r2
 8004c7a:	4a74      	ldr	r2, [pc, #464]	; (8004e4c <Robot_Callback+0x290>)
 8004c7c:	214c      	movs	r1, #76	; 0x4c
 8004c7e:	fb01 f303 	mul.w	r3, r1, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	3340      	adds	r3, #64	; 0x40
 8004c86:	6018      	str	r0, [r3, #0]
		Alto.Steppers[index].Clk = clk;
 8004c88:	7cbb      	ldrb	r3, [r7, #18]
 8004c8a:	4a70      	ldr	r2, [pc, #448]	; (8004e4c <Robot_Callback+0x290>)
 8004c8c:	214c      	movs	r1, #76	; 0x4c
 8004c8e:	fb01 f303 	mul.w	r3, r1, r3
 8004c92:	4413      	add	r3, r2
 8004c94:	3308      	adds	r3, #8
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	601a      	str	r2, [r3, #0]

		Emm_Request_Handle.REQUEST_FLAG = GET_ANGLE_REQUEST_FLAG;
 8004c9a:	4b6b      	ldr	r3, [pc, #428]	; (8004e48 <Robot_Callback+0x28c>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
	}
	if(Emm_Request_Handle.REQUEST_FLAG == GET_ANGLE_REQUEST_FLAG && cmd == 0x36)
 8004ca0:	4b69      	ldr	r3, [pc, #420]	; (8004e48 <Robot_Callback+0x28c>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d162      	bne.n	8004d6e <Robot_Callback+0x1b2>
 8004ca8:	7c7b      	ldrb	r3, [r7, #17]
 8004caa:	2b36      	cmp	r3, #54	; 0x36
 8004cac:	d15f      	bne.n	8004d6e <Robot_Callback+0x1b2>
	{
		int32_t ang_raw =
				(int32_t)(((int32_t)CAN_RXData[2] << 24) |
 8004cae:	4b64      	ldr	r3, [pc, #400]	; (8004e40 <Robot_Callback+0x284>)
 8004cb0:	789b      	ldrb	r3, [r3, #2]
 8004cb2:	061a      	lsls	r2, r3, #24
						  ((int32_t)CAN_RXData[3] << 16) |
 8004cb4:	4b62      	ldr	r3, [pc, #392]	; (8004e40 <Robot_Callback+0x284>)
 8004cb6:	78db      	ldrb	r3, [r3, #3]
 8004cb8:	041b      	lsls	r3, r3, #16
				(int32_t)(((int32_t)CAN_RXData[2] << 24) |
 8004cba:	431a      	orrs	r2, r3
						  ((int32_t)CAN_RXData[4] << 8) |
 8004cbc:	4b60      	ldr	r3, [pc, #384]	; (8004e40 <Robot_Callback+0x284>)
 8004cbe:	791b      	ldrb	r3, [r3, #4]
 8004cc0:	021b      	lsls	r3, r3, #8
						  ((int32_t)CAN_RXData[3] << 16) |
 8004cc2:	4313      	orrs	r3, r2
						  ((int32_t)CAN_RXData[5] << 0));
 8004cc4:	4a5e      	ldr	r2, [pc, #376]	; (8004e40 <Robot_Callback+0x284>)
 8004cc6:	7952      	ldrb	r2, [r2, #5]
		int32_t ang_raw =
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
		if ((bool)CAN_RXData[1])
 8004ccc:	4b5c      	ldr	r3, [pc, #368]	; (8004e40 <Robot_Callback+0x284>)
 8004cce:	785b      	ldrb	r3, [r3, #1]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <Robot_Callback+0x11e>
			ang_raw = -ang_raw;
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	425b      	negs	r3, r3
 8004cd8:	61bb      	str	r3, [r7, #24]
		Alto.Steppers[index].Angle = (float)ang_raw / 65536 * 360;
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	ee07 3a90 	vmov	s15, r3
 8004ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ce4:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8004e50 <Robot_Callback+0x294>
 8004ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cec:	7cbb      	ldrb	r3, [r7, #18]
 8004cee:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004e54 <Robot_Callback+0x298>
 8004cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cf6:	4a55      	ldr	r2, [pc, #340]	; (8004e4c <Robot_Callback+0x290>)
 8004cf8:	214c      	movs	r1, #76	; 0x4c
 8004cfa:	fb01 f303 	mul.w	r3, r1, r3
 8004cfe:	4413      	add	r3, r2
 8004d00:	330c      	adds	r3, #12
 8004d02:	edc3 7a00 	vstr	s15, [r3]
		Alto.Current_JointAngle[index] =
				Alto.Steppers[index].Angle / Alto.DH.Joints[index].reduction_ratio * Alto.DH.Joints[index].orientation;
 8004d06:	7cbb      	ldrb	r3, [r7, #18]
 8004d08:	4a50      	ldr	r2, [pc, #320]	; (8004e4c <Robot_Callback+0x290>)
 8004d0a:	214c      	movs	r1, #76	; 0x4c
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	4413      	add	r3, r2
 8004d12:	330c      	adds	r3, #12
 8004d14:	edd3 6a00 	vldr	s13, [r3]
 8004d18:	7cba      	ldrb	r2, [r7, #18]
 8004d1a:	494c      	ldr	r1, [pc, #304]	; (8004e4c <Robot_Callback+0x290>)
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	f203 13d9 	addw	r3, r3, #473	; 0x1d9
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d38:	7cba      	ldrb	r2, [r7, #18]
 8004d3a:	4944      	ldr	r1, [pc, #272]	; (8004e4c <Robot_Callback+0x290>)
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004d4a:	f993 3000 	ldrsb.w	r3, [r3]
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		Alto.Current_JointAngle[index] =
 8004d56:	7cbb      	ldrb	r3, [r7, #18]
				Alto.Steppers[index].Angle / Alto.DH.Joints[index].reduction_ratio * Alto.DH.Joints[index].orientation;
 8004d58:	ee67 7a27 	vmul.f32	s15, s14, s15
		Alto.Current_JointAngle[index] =
 8004d5c:	4a3b      	ldr	r2, [pc, #236]	; (8004e4c <Robot_Callback+0x290>)
 8004d5e:	339c      	adds	r3, #156	; 0x9c
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	edc3 7a00 	vstr	s15, [r3]

		Emm_Request_Handle.REQUEST_FLAG = GET_ERROR_REQUEST_FLAG;
 8004d68:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <Robot_Callback+0x28c>)
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	701a      	strb	r2, [r3, #0]
	}
	if(Emm_Request_Handle.REQUEST_FLAG == GET_ERROR_REQUEST_FLAG && cmd == 0x37)
 8004d6e:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <Robot_Callback+0x28c>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d131      	bne.n	8004dda <Robot_Callback+0x21e>
 8004d76:	7c7b      	ldrb	r3, [r7, #17]
 8004d78:	2b37      	cmp	r3, #55	; 0x37
 8004d7a:	d12e      	bne.n	8004dda <Robot_Callback+0x21e>
	{
		int32_t error =
				(int32_t)(((int32_t)CAN_RXData[2] << 24) |
 8004d7c:	4b30      	ldr	r3, [pc, #192]	; (8004e40 <Robot_Callback+0x284>)
 8004d7e:	789b      	ldrb	r3, [r3, #2]
 8004d80:	061a      	lsls	r2, r3, #24
						  ((int32_t)CAN_RXData[3] << 16) |
 8004d82:	4b2f      	ldr	r3, [pc, #188]	; (8004e40 <Robot_Callback+0x284>)
 8004d84:	78db      	ldrb	r3, [r3, #3]
 8004d86:	041b      	lsls	r3, r3, #16
				(int32_t)(((int32_t)CAN_RXData[2] << 24) |
 8004d88:	431a      	orrs	r2, r3
						  ((int32_t)CAN_RXData[4] << 8) |
 8004d8a:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <Robot_Callback+0x284>)
 8004d8c:	791b      	ldrb	r3, [r3, #4]
 8004d8e:	021b      	lsls	r3, r3, #8
						  ((int32_t)CAN_RXData[3] << 16) |
 8004d90:	4313      	orrs	r3, r2
						  ((int32_t)CAN_RXData[5] << 0));
 8004d92:	4a2b      	ldr	r2, [pc, #172]	; (8004e40 <Robot_Callback+0x284>)
 8004d94:	7952      	ldrb	r2, [r2, #5]
		int32_t error =
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
		if ((bool)CAN_RXData[1])
 8004d9a:	4b29      	ldr	r3, [pc, #164]	; (8004e40 <Robot_Callback+0x284>)
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <Robot_Callback+0x1ec>
			error = -error;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	425b      	negs	r3, r3
 8004da6:	617b      	str	r3, [r7, #20]
		Alto.Steppers[index].Error = (float)error / 65536 * 360;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004db2:	eddf 6a27 	vldr	s13, [pc, #156]	; 8004e50 <Robot_Callback+0x294>
 8004db6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dba:	7cbb      	ldrb	r3, [r7, #18]
 8004dbc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004e54 <Robot_Callback+0x298>
 8004dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dc4:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <Robot_Callback+0x290>)
 8004dc6:	214c      	movs	r1, #76	; 0x4c
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	4413      	add	r3, r2
 8004dce:	3310      	adds	r3, #16
 8004dd0:	edc3 7a00 	vstr	s15, [r3]

		Emm_Request_Handle.REQUEST_FLAG = GET_FLAG_REQUEST_FLAG;
 8004dd4:	4b1c      	ldr	r3, [pc, #112]	; (8004e48 <Robot_Callback+0x28c>)
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	701a      	strb	r2, [r3, #0]
	}
	if(Emm_Request_Handle.REQUEST_FLAG == GET_FLAG_REQUEST_FLAG && cmd == 0x3A)
 8004dda:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <Robot_Callback+0x28c>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d12a      	bne.n	8004e38 <Robot_Callback+0x27c>
 8004de2:	7c7b      	ldrb	r3, [r7, #17]
 8004de4:	2b3a      	cmp	r3, #58	; 0x3a
 8004de6:	d127      	bne.n	8004e38 <Robot_Callback+0x27c>
	{
		uint8_t flag = CAN_RXData[1];
 8004de8:	4b15      	ldr	r3, [pc, #84]	; (8004e40 <Robot_Callback+0x284>)
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	72fb      	strb	r3, [r7, #11]
		Alto.Steppers[index].En = (bool)(flag & 0x01);
 8004dee:	7afb      	ldrb	r3, [r7, #11]
 8004df0:	f003 0201 	and.w	r2, r3, #1
 8004df4:	7cbb      	ldrb	r3, [r7, #18]
 8004df6:	2a00      	cmp	r2, #0
 8004df8:	bf14      	ite	ne
 8004dfa:	2201      	movne	r2, #1
 8004dfc:	2200      	moveq	r2, #0
 8004dfe:	b2d0      	uxtb	r0, r2
 8004e00:	4a12      	ldr	r2, [pc, #72]	; (8004e4c <Robot_Callback+0x290>)
 8004e02:	214c      	movs	r1, #76	; 0x4c
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	4413      	add	r3, r2
 8004e0a:	3314      	adds	r3, #20
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	701a      	strb	r2, [r3, #0]
		Alto.Steppers[index].Block = (bool)(flag & 0x04);
 8004e10:	7afb      	ldrb	r3, [r7, #11]
 8004e12:	f003 0204 	and.w	r2, r3, #4
 8004e16:	7cbb      	ldrb	r3, [r7, #18]
 8004e18:	2a00      	cmp	r2, #0
 8004e1a:	bf14      	ite	ne
 8004e1c:	2201      	movne	r2, #1
 8004e1e:	2200      	moveq	r2, #0
 8004e20:	b2d0      	uxtb	r0, r2
 8004e22:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <Robot_Callback+0x290>)
 8004e24:	214c      	movs	r1, #76	; 0x4c
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3315      	adds	r3, #21
 8004e2e:	4602      	mov	r2, r0
 8004e30:	701a      	strb	r2, [r3, #0]

		Emm_Request_Handle.REQUEST_FLAG = GET_STEP_REQUEST_FLAG;
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <Robot_Callback+0x28c>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	701a      	strb	r2, [r3, #0]
	}
}
 8004e38:	bf00      	nop
 8004e3a:	3720      	adds	r7, #32
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000468 	.word	0x20000468
 8004e44:	20000490 	.word	0x20000490
 8004e48:	20000448 	.word	0x20000448
 8004e4c:	2000016c 	.word	0x2000016c
 8004e50:	47800000 	.word	0x47800000
 8004e54:	43b40000 	.word	0x43b40000

08004e58 <Robot_Master>:

void Robot_Master(CAN_HandleTypeDef *hcan, uint8_t *cmd)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
	System_Base(hcan, cmd);
 8004e62:	6839      	ldr	r1, [r7, #0]
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f989 	bl	800517c <System_Base>
	switch(Alto.Mode)
 8004e6a:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <Robot_Master+0x44>)
 8004e6c:	f893 32d5 	ldrb.w	r3, [r3, #725]	; 0x2d5
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d00c      	beq.n	8004e8e <Robot_Master+0x36>
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	dc0d      	bgt.n	8004e94 <Robot_Master+0x3c>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <Robot_Master+0x2a>
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d003      	beq.n	8004e88 <Robot_Master+0x30>
			break;
		case DISABLE_MODE:
			Disable_Mode();
			break;
	}
}
 8004e80:	e008      	b.n	8004e94 <Robot_Master+0x3c>
			Operating_Mode();
 8004e82:	f000 f82d 	bl	8004ee0 <Operating_Mode>
			break;
 8004e86:	e005      	b.n	8004e94 <Robot_Master+0x3c>
			Homing_Mode();
 8004e88:	f000 f848 	bl	8004f1c <Homing_Mode>
			break;
 8004e8c:	e002      	b.n	8004e94 <Robot_Master+0x3c>
			Disable_Mode();
 8004e8e:	f000 f90f 	bl	80050b0 <Disable_Mode>
			break;
 8004e92:	bf00      	nop
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	2000016c 	.word	0x2000016c

08004ea0 <Joint_Activation>:

void Joint_Activation(bool en)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	71fb      	strb	r3, [r7, #7]
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 8004eaa:	2300      	movs	r3, #0
 8004eac:	73fb      	strb	r3, [r7, #15]
 8004eae:	e00b      	b.n	8004ec8 <Joint_Activation+0x28>
		Alto.Steppers[index].Target_En = en;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <Joint_Activation+0x3c>)
 8004eb4:	214c      	movs	r1, #76	; 0x4c
 8004eb6:	fb01 f303 	mul.w	r3, r1, r3
 8004eba:	4413      	add	r3, r2
 8004ebc:	3348      	adds	r3, #72	; 0x48
 8004ebe:	79fa      	ldrb	r2, [r7, #7]
 8004ec0:	701a      	strb	r2, [r3, #0]
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	73fb      	strb	r3, [r7, #15]
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	2b05      	cmp	r3, #5
 8004ecc:	d9f0      	bls.n	8004eb0 <Joint_Activation+0x10>
}
 8004ece:	bf00      	nop
 8004ed0:	bf00      	nop
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	2000016c 	.word	0x2000016c

08004ee0 <Operating_Mode>:

void Operating_Mode()
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
	Joint_Activation(true);
 8004ee4:	2001      	movs	r0, #1
 8004ee6:	f7ff ffdb 	bl	8004ea0 <Joint_Activation>
	FK();
 8004eea:	f7fc f981 	bl	80011f0 <FK>
	if(Alto.Start_Flag)
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <Operating_Mode+0x38>)
 8004ef0:	f893 32d6 	ldrb.w	r3, [r3, #726]	; 0x2d6
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00d      	beq.n	8004f14 <Operating_Mode+0x34>
	{
		switch(Alto.Mov)
 8004ef8:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <Operating_Mode+0x38>)
 8004efa:	f893 32d1 	ldrb.w	r3, [r3, #721]	; 0x2d1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <Operating_Mode+0x28>
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d003      	beq.n	8004f0e <Operating_Mode+0x2e>
			case JOINT:
				Joint_Manager();
				break;
		}
	}
}
 8004f06:	e005      	b.n	8004f14 <Operating_Mode+0x34>
				MovP_Manager();
 8004f08:	f000 fbd2 	bl	80056b0 <MovP_Manager>
				break;
 8004f0c:	e002      	b.n	8004f14 <Operating_Mode+0x34>
				Joint_Manager();
 8004f0e:	f000 fc73 	bl	80057f8 <Joint_Manager>
				break;
 8004f12:	bf00      	nop
}
 8004f14:	bf00      	nop
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	2000016c 	.word	0x2000016c

08004f1c <Homing_Mode>:

void Homing_Mode()
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
	Joint_Activation(true);
 8004f22:	2001      	movs	r0, #1
 8004f24:	f7ff ffbc 	bl	8004ea0 <Joint_Activation>
	uint8_t id;
	uint8_t index;
	id = Alto.Homing_Joint;
 8004f28:	4b57      	ldr	r3, [pc, #348]	; (8005088 <Homing_Mode+0x16c>)
 8004f2a:	f893 32db 	ldrb.w	r3, [r3, #731]	; 0x2db
 8004f2e:	71fb      	strb	r3, [r7, #7]
	index = id - 1;
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	71bb      	strb	r3, [r7, #6]
	switch(Alto.Homing_Joint)
 8004f36:	4b54      	ldr	r3, [pc, #336]	; (8005088 <Homing_Mode+0x16c>)
 8004f38:	f893 32db 	ldrb.w	r3, [r3, #731]	; 0x2db
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	2b05      	cmp	r3, #5
 8004f40:	f200 809d 	bhi.w	800507e <Homing_Mode+0x162>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <Homing_Mode+0x30>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	0800503b 	.word	0x0800503b
 8004f50:	08004f91 	.word	0x08004f91
 8004f54:	08004f65 	.word	0x08004f65
 8004f58:	08005011 	.word	0x08005011
 8004f5c:	08004fbb 	.word	0x08004fbb
 8004f60:	08004fe7 	.word	0x08004fe7
	{
		case 3:
			Home_Manager(Limit_Switch_3_Pin, index,
 8004f64:	79b9      	ldrb	r1, [r7, #6]
 8004f66:	4b49      	ldr	r3, [pc, #292]	; (800508c <Homing_Mode+0x170>)
 8004f68:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004f6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004f70:	f000 f924 	bl	80051bc <Home_Manager>
					JOINT3_HITTING_LIMIT_DIST,
					JOINT3_BACK_TO_ZERO_DIST + JOINT3_BACK_TO_ZERO_DIST_OFFSET);
			if(Alto.Homing_State == SET_JOINT_ZERO)
 8004f74:	4b44      	ldr	r3, [pc, #272]	; (8005088 <Homing_Mode+0x16c>)
 8004f76:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
 8004f7a:	2b09      	cmp	r3, #9
 8004f7c:	d174      	bne.n	8005068 <Homing_Mode+0x14c>
			{
				Alto.Homing_Joint = 2;
 8004f7e:	4b42      	ldr	r3, [pc, #264]	; (8005088 <Homing_Mode+0x16c>)
 8004f80:	2202      	movs	r2, #2
 8004f82:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
				Alto.Homing_State = HITTING_LIMIT_ENTEY;
 8004f86:	4b40      	ldr	r3, [pc, #256]	; (8005088 <Homing_Mode+0x16c>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
			}

			break;
 8004f8e:	e06b      	b.n	8005068 <Homing_Mode+0x14c>
		case 2:
			Home_Manager(Limit_Switch_2_Pin, index,
 8004f90:	79b9      	ldrb	r1, [r7, #6]
 8004f92:	4b3f      	ldr	r3, [pc, #252]	; (8005090 <Homing_Mode+0x174>)
 8004f94:	4a3f      	ldr	r2, [pc, #252]	; (8005094 <Homing_Mode+0x178>)
 8004f96:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004f9a:	f000 f90f 	bl	80051bc <Home_Manager>
					JOINT2_HITTING_LIMIT_DIST,
					JOINT2_BACK_TO_ZERO_DIST + JOINT2_BACK_TO_ZERO_DIST_OFFSET);
			if(Alto.Homing_State == SET_JOINT_ZERO)
 8004f9e:	4b3a      	ldr	r3, [pc, #232]	; (8005088 <Homing_Mode+0x16c>)
 8004fa0:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
 8004fa4:	2b09      	cmp	r3, #9
 8004fa6:	d161      	bne.n	800506c <Homing_Mode+0x150>
			{
				Alto.Homing_Joint = 5;
 8004fa8:	4b37      	ldr	r3, [pc, #220]	; (8005088 <Homing_Mode+0x16c>)
 8004faa:	2205      	movs	r2, #5
 8004fac:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
				Alto.Homing_State = HITTING_LIMIT_ENTEY;
 8004fb0:	4b35      	ldr	r3, [pc, #212]	; (8005088 <Homing_Mode+0x16c>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
			}
			break;
 8004fb8:	e058      	b.n	800506c <Homing_Mode+0x150>
		case 5:
			Home_Manager(Limit_Switch_5_Pin, index,
 8004fba:	79b9      	ldrb	r1, [r7, #6]
 8004fbc:	4b36      	ldr	r3, [pc, #216]	; (8005098 <Homing_Mode+0x17c>)
 8004fbe:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8004fc2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004fc6:	f000 f8f9 	bl	80051bc <Home_Manager>
					JOINT5_HITTING_LIMIT_DIST,
					JOINT5_BACK_TO_ZERO_DIST + JOINT5_BACK_TO_ZERO_DIST_OFFSET);
			if(Alto.Homing_State == SET_JOINT_ZERO)
 8004fca:	4b2f      	ldr	r3, [pc, #188]	; (8005088 <Homing_Mode+0x16c>)
 8004fcc:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
 8004fd0:	2b09      	cmp	r3, #9
 8004fd2:	d14d      	bne.n	8005070 <Homing_Mode+0x154>
			{
				Alto.Homing_Joint = 6;
 8004fd4:	4b2c      	ldr	r3, [pc, #176]	; (8005088 <Homing_Mode+0x16c>)
 8004fd6:	2206      	movs	r2, #6
 8004fd8:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
				Alto.Homing_State = HITTING_LIMIT_ENTEY;
 8004fdc:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <Homing_Mode+0x16c>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
			}
			break;
 8004fe4:	e044      	b.n	8005070 <Homing_Mode+0x154>
		case 6:
			Home_Manager(Limit_Switch_6_Pin, index,
 8004fe6:	79b9      	ldrb	r1, [r7, #6]
 8004fe8:	4b2c      	ldr	r3, [pc, #176]	; (800509c <Homing_Mode+0x180>)
 8004fea:	4a2d      	ldr	r2, [pc, #180]	; (80050a0 <Homing_Mode+0x184>)
 8004fec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004ff0:	f000 f8e4 	bl	80051bc <Home_Manager>
					JOINT6_HITTING_LIMIT_DIST,
					JOINT6_BACK_TO_ZERO_DIST + JOINT6_BACK_TO_ZERO_DIST_OFFSET);
			if(Alto.Homing_State == SET_JOINT_ZERO)
 8004ff4:	4b24      	ldr	r3, [pc, #144]	; (8005088 <Homing_Mode+0x16c>)
 8004ff6:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
 8004ffa:	2b09      	cmp	r3, #9
 8004ffc:	d13a      	bne.n	8005074 <Homing_Mode+0x158>
			{
				Alto.Homing_Joint = 4;
 8004ffe:	4b22      	ldr	r3, [pc, #136]	; (8005088 <Homing_Mode+0x16c>)
 8005000:	2204      	movs	r2, #4
 8005002:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
				Alto.Homing_State = HITTING_LIMIT_ENTEY;
 8005006:	4b20      	ldr	r3, [pc, #128]	; (8005088 <Homing_Mode+0x16c>)
 8005008:	2200      	movs	r2, #0
 800500a:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
			}
			break;
 800500e:	e031      	b.n	8005074 <Homing_Mode+0x158>
		case 4:
			Home_Manager(Limit_Switch_4_Pin, index,
 8005010:	79b9      	ldrb	r1, [r7, #6]
 8005012:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <Homing_Mode+0x188>)
 8005014:	4a22      	ldr	r2, [pc, #136]	; (80050a0 <Homing_Mode+0x184>)
 8005016:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800501a:	f000 f8cf 	bl	80051bc <Home_Manager>
					JOINT4_HITTING_LIMIT_DIST,
					JOINT4_BACK_TO_ZERO_DIST + JOINT4_BACK_TO_ZERO_DIST_OFFSET);
			if(Alto.Homing_State == SET_JOINT_ZERO)
 800501e:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <Homing_Mode+0x16c>)
 8005020:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
 8005024:	2b09      	cmp	r3, #9
 8005026:	d127      	bne.n	8005078 <Homing_Mode+0x15c>
			{
				Alto.Homing_Joint = 1;
 8005028:	4b17      	ldr	r3, [pc, #92]	; (8005088 <Homing_Mode+0x16c>)
 800502a:	2201      	movs	r2, #1
 800502c:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
				Alto.Homing_State = HITTING_LIMIT_ENTEY;
 8005030:	4b15      	ldr	r3, [pc, #84]	; (8005088 <Homing_Mode+0x16c>)
 8005032:	2200      	movs	r2, #0
 8005034:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
			}
			break;
 8005038:	e01e      	b.n	8005078 <Homing_Mode+0x15c>
		case 1:
			Home_Manager(Limit_Switch_1_Pin, index,
 800503a:	79b9      	ldrb	r1, [r7, #6]
 800503c:	4b1a      	ldr	r3, [pc, #104]	; (80050a8 <Homing_Mode+0x18c>)
 800503e:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <Homing_Mode+0x190>)
 8005040:	2080      	movs	r0, #128	; 0x80
 8005042:	f000 f8bb 	bl	80051bc <Home_Manager>
					JOINT1_HITTING_LIMIT_DIST,
					JOINT1_BACK_TO_ZERO_DIST + JOINT1_BACK_TO_ZERO_DIST_OFFSET);
			if(Alto.Homing_State == SET_JOINT_ZERO)
 8005046:	4b10      	ldr	r3, [pc, #64]	; (8005088 <Homing_Mode+0x16c>)
 8005048:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
 800504c:	2b09      	cmp	r3, #9
 800504e:	d115      	bne.n	800507c <Homing_Mode+0x160>
			{
				Robot_Config_Init(&Alto);
 8005050:	480d      	ldr	r0, [pc, #52]	; (8005088 <Homing_Mode+0x16c>)
 8005052:	f7fc ff1f 	bl	8001e94 <Robot_Config_Init>
				Alto.Mode = OPERATING_MODE;
 8005056:	4b0c      	ldr	r3, [pc, #48]	; (8005088 <Homing_Mode+0x16c>)
 8005058:	2200      	movs	r2, #0
 800505a:	f883 22d5 	strb.w	r2, [r3, #725]	; 0x2d5
				Alto.Home_Flag = true;
 800505e:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <Homing_Mode+0x16c>)
 8005060:	2201      	movs	r2, #1
 8005062:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
			}
			break;
 8005066:	e009      	b.n	800507c <Homing_Mode+0x160>
			break;
 8005068:	bf00      	nop
 800506a:	e008      	b.n	800507e <Homing_Mode+0x162>
			break;
 800506c:	bf00      	nop
 800506e:	e006      	b.n	800507e <Homing_Mode+0x162>
			break;
 8005070:	bf00      	nop
 8005072:	e004      	b.n	800507e <Homing_Mode+0x162>
			break;
 8005074:	bf00      	nop
 8005076:	e002      	b.n	800507e <Homing_Mode+0x162>
			break;
 8005078:	bf00      	nop
 800507a:	e000      	b.n	800507e <Homing_Mode+0x162>
			break;
 800507c:	bf00      	nop
	}
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	2000016c 	.word	0x2000016c
 800508c:	ffffa4da 	.word	0xffffa4da
 8005090:	ffff6e2a 	.word	0xffff6e2a
 8005094:	00013880 	.word	0x00013880
 8005098:	ffff86a5 	.word	0xffff86a5
 800509c:	ffff4de0 	.word	0xffff4de0
 80050a0:	00017700 	.word	0x00017700
 80050a4:	ffff49b5 	.word	0xffff49b5
 80050a8:	fffeccb6 	.word	0xfffeccb6
 80050ac:	00027100 	.word	0x00027100

080050b0 <Disable_Mode>:

void Disable_Mode()
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
	Joint_Activation(false);
 80050b6:	2000      	movs	r0, #0
 80050b8:	f7ff fef2 	bl	8004ea0 <Joint_Activation>
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 80050bc:	2300      	movs	r3, #0
 80050be:	71fb      	strb	r3, [r7, #7]
 80050c0:	e04b      	b.n	800515a <Disable_Mode+0xaa>
	{
		Alto.Target_JointAngle[index] = Alto.Current_JointAngle[index];
 80050c2:	79fa      	ldrb	r2, [r7, #7]
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	492c      	ldr	r1, [pc, #176]	; (8005178 <Disable_Mode+0xc8>)
 80050c8:	329c      	adds	r2, #156	; 0x9c
 80050ca:	0092      	lsls	r2, r2, #2
 80050cc:	440a      	add	r2, r1
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	4929      	ldr	r1, [pc, #164]	; (8005178 <Disable_Mode+0xc8>)
 80050d2:	33a8      	adds	r3, #168	; 0xa8
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	601a      	str	r2, [r3, #0]
		Alto.Steppers[index].Target_Clk =
						(int32_t)(Alto.Target_JointAngle[index] * Alto.DH.Joints[index].reduction_ratio / 0.1125) * Alto.DH.Joints[index].orientation;
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	4a26      	ldr	r2, [pc, #152]	; (8005178 <Disable_Mode+0xc8>)
 80050de:	33a8      	adds	r3, #168	; 0xa8
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	ed93 7a00 	vldr	s14, [r3]
 80050e8:	79fa      	ldrb	r2, [r7, #7]
 80050ea:	4923      	ldr	r1, [pc, #140]	; (8005178 <Disable_Mode+0xc8>)
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	f203 13d9 	addw	r3, r3, #473	; 0x1d9
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	ee07 3a90 	vmov	s15, r3
 8005100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005108:	ee17 0a90 	vmov	r0, s15
 800510c:	f7fb f9c4 	bl	8000498 <__aeabi_f2d>
 8005110:	a317      	add	r3, pc, #92	; (adr r3, 8005170 <Disable_Mode+0xc0>)
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	f7fb fb41 	bl	800079c <__aeabi_ddiv>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4610      	mov	r0, r2
 8005120:	4619      	mov	r1, r3
 8005122:	f7fb fcab 	bl	8000a7c <__aeabi_d2iz>
 8005126:	4601      	mov	r1, r0
 8005128:	79fa      	ldrb	r2, [r7, #7]
 800512a:	4813      	ldr	r0, [pc, #76]	; (8005178 <Disable_Mode+0xc8>)
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4403      	add	r3, r0
 8005136:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800513a:	f993 3000 	ldrsb.w	r3, [r3]
 800513e:	461a      	mov	r2, r3
		Alto.Steppers[index].Target_Clk =
 8005140:	79fb      	ldrb	r3, [r7, #7]
						(int32_t)(Alto.Target_JointAngle[index] * Alto.DH.Joints[index].reduction_ratio / 0.1125) * Alto.DH.Joints[index].orientation;
 8005142:	fb01 f202 	mul.w	r2, r1, r2
		Alto.Steppers[index].Target_Clk =
 8005146:	490c      	ldr	r1, [pc, #48]	; (8005178 <Disable_Mode+0xc8>)
 8005148:	204c      	movs	r0, #76	; 0x4c
 800514a:	fb00 f303 	mul.w	r3, r0, r3
 800514e:	440b      	add	r3, r1
 8005150:	3344      	adds	r3, #68	; 0x44
 8005152:	601a      	str	r2, [r3, #0]
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	3301      	adds	r3, #1
 8005158:	71fb      	strb	r3, [r7, #7]
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	2b05      	cmp	r3, #5
 800515e:	d9b0      	bls.n	80050c2 <Disable_Mode+0x12>
	}
	FK();
 8005160:	f7fc f846 	bl	80011f0 <FK>
}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	f3af 8000 	nop.w
 8005170:	cccccccd 	.word	0xcccccccd
 8005174:	3fbccccc 	.word	0x3fbccccc
 8005178:	2000016c 	.word	0x2000016c

0800517c <System_Base>:

void System_Base(CAN_HandleTypeDef *hcan, uint8_t *cmd)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 8005186:	2300      	movs	r3, #0
 8005188:	73fb      	strb	r3, [r7, #15]
 800518a:	e00e      	b.n	80051aa <System_Base+0x2e>
	{
		Info_Manager(hcan, cmd, index);
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	461a      	mov	r2, r3
 8005190:	6839      	ldr	r1, [r7, #0]
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f99c 	bl	80054d0 <Info_Manager>
		Motion_Manager(hcan, cmd, index);
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	461a      	mov	r2, r3
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fc02 	bl	80059a8 <Motion_Manager>
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	3301      	adds	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	2b05      	cmp	r3, #5
 80051ae:	d9ed      	bls.n	800518c <System_Base+0x10>
	}
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <Home_Manager>:

void Home_Manager(uint16_t limit_sw, uint8_t index, int32_t hitting_limit_clk, int32_t back_to_zero_clk)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60ba      	str	r2, [r7, #8]
 80051c4:	607b      	str	r3, [r7, #4]
 80051c6:	4603      	mov	r3, r0
 80051c8:	81fb      	strh	r3, [r7, #14]
 80051ca:	460b      	mov	r3, r1
 80051cc:	737b      	strb	r3, [r7, #13]
	switch(Alto.Homing_State)
 80051ce:	4b8b      	ldr	r3, [pc, #556]	; (80053fc <Home_Manager+0x240>)
 80051d0:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	f200 810c 	bhi.w	80053f2 <Home_Manager+0x236>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <Home_Manager+0x24>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	08005205 	.word	0x08005205
 80051e4:	08005245 	.word	0x08005245
 80051e8:	08005273 	.word	0x08005273
 80051ec:	080052b3 	.word	0x080052b3
 80051f0:	080052e1 	.word	0x080052e1
 80051f4:	08005311 	.word	0x08005311
 80051f8:	0800533d 	.word	0x0800533d
 80051fc:	0800537d 	.word	0x0800537d
 8005200:	080053bd 	.word	0x080053bd
	{
		case HITTING_LIMIT_ENTEY:
			Alto.Steppers[index].Speed = DEFAULT_FAST_SPEED;
 8005204:	7b7b      	ldrb	r3, [r7, #13]
 8005206:	4a7d      	ldr	r2, [pc, #500]	; (80053fc <Home_Manager+0x240>)
 8005208:	214c      	movs	r1, #76	; 0x4c
 800520a:	fb01 f303 	mul.w	r3, r1, r3
 800520e:	4413      	add	r3, r2
 8005210:	3302      	adds	r3, #2
 8005212:	2250      	movs	r2, #80	; 0x50
 8005214:	801a      	strh	r2, [r3, #0]
			Alto.Steppers[index].Target_Clk += hitting_limit_clk;
 8005216:	7b7b      	ldrb	r3, [r7, #13]
 8005218:	4a78      	ldr	r2, [pc, #480]	; (80053fc <Home_Manager+0x240>)
 800521a:	214c      	movs	r1, #76	; 0x4c
 800521c:	fb01 f303 	mul.w	r3, r1, r3
 8005220:	4413      	add	r3, r2
 8005222:	3344      	adds	r3, #68	; 0x44
 8005224:	6819      	ldr	r1, [r3, #0]
 8005226:	7b7b      	ldrb	r3, [r7, #13]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	440a      	add	r2, r1
 800522c:	4973      	ldr	r1, [pc, #460]	; (80053fc <Home_Manager+0x240>)
 800522e:	204c      	movs	r0, #76	; 0x4c
 8005230:	fb00 f303 	mul.w	r3, r0, r3
 8005234:	440b      	add	r3, r1
 8005236:	3344      	adds	r3, #68	; 0x44
 8005238:	601a      	str	r2, [r3, #0]
			Alto.Homing_State = HITTING_LIMIT;
 800523a:	4b70      	ldr	r3, [pc, #448]	; (80053fc <Home_Manager+0x240>)
 800523c:	2201      	movs	r2, #1
 800523e:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
			break;
 8005242:	e0d6      	b.n	80053f2 <Home_Manager+0x236>
		case HITTING_LIMIT:
			if(HAL_GPIO_ReadPin(GPIOE, limit_sw) == 0)
 8005244:	89fb      	ldrh	r3, [r7, #14]
 8005246:	4619      	mov	r1, r3
 8005248:	486d      	ldr	r0, [pc, #436]	; (8005400 <Home_Manager+0x244>)
 800524a:	f002 f9bb 	bl	80075c4 <HAL_GPIO_ReadPin>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	f040 80c5 	bne.w	80053e0 <Home_Manager+0x224>
			{
				Alto.Steppers[index].isStop = true;
 8005256:	7b7b      	ldrb	r3, [r7, #13]
 8005258:	4a68      	ldr	r2, [pc, #416]	; (80053fc <Home_Manager+0x240>)
 800525a:	214c      	movs	r1, #76	; 0x4c
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	4413      	add	r3, r2
 8005262:	3349      	adds	r3, #73	; 0x49
 8005264:	2201      	movs	r2, #1
 8005266:	701a      	strb	r2, [r3, #0]
				Alto.Homing_State = CORRECTING_1_LIMIT_ENTEY;
 8005268:	4b64      	ldr	r3, [pc, #400]	; (80053fc <Home_Manager+0x240>)
 800526a:	2202      	movs	r2, #2
 800526c:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
			}
			break;
 8005270:	e0b6      	b.n	80053e0 <Home_Manager+0x224>
		case CORRECTING_1_LIMIT_ENTEY:
			Alto.Steppers[index].Speed = DEFAULT_SLOW_SPEED;
 8005272:	7b7b      	ldrb	r3, [r7, #13]
 8005274:	4a61      	ldr	r2, [pc, #388]	; (80053fc <Home_Manager+0x240>)
 8005276:	214c      	movs	r1, #76	; 0x4c
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	4413      	add	r3, r2
 800527e:	3302      	adds	r3, #2
 8005280:	221e      	movs	r2, #30
 8005282:	801a      	strh	r2, [r3, #0]
			Alto.Steppers[index].Target_Clk -= hitting_limit_clk * 2;
 8005284:	7b7b      	ldrb	r3, [r7, #13]
 8005286:	4a5d      	ldr	r2, [pc, #372]	; (80053fc <Home_Manager+0x240>)
 8005288:	214c      	movs	r1, #76	; 0x4c
 800528a:	fb01 f303 	mul.w	r3, r1, r3
 800528e:	4413      	add	r3, r2
 8005290:	3344      	adds	r3, #68	; 0x44
 8005292:	6819      	ldr	r1, [r3, #0]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	005a      	lsls	r2, r3, #1
 8005298:	7b7b      	ldrb	r3, [r7, #13]
 800529a:	1a8a      	subs	r2, r1, r2
 800529c:	4957      	ldr	r1, [pc, #348]	; (80053fc <Home_Manager+0x240>)
 800529e:	204c      	movs	r0, #76	; 0x4c
 80052a0:	fb00 f303 	mul.w	r3, r0, r3
 80052a4:	440b      	add	r3, r1
 80052a6:	3344      	adds	r3, #68	; 0x44
 80052a8:	601a      	str	r2, [r3, #0]
			Alto.Homing_State = CORRECTING_1_LIMIT;
 80052aa:	4b54      	ldr	r3, [pc, #336]	; (80053fc <Home_Manager+0x240>)
 80052ac:	2203      	movs	r2, #3
 80052ae:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
		case CORRECTING_1_LIMIT:
			if(HAL_GPIO_ReadPin(GPIOE, limit_sw) == 1)
 80052b2:	89fb      	ldrh	r3, [r7, #14]
 80052b4:	4619      	mov	r1, r3
 80052b6:	4852      	ldr	r0, [pc, #328]	; (8005400 <Home_Manager+0x244>)
 80052b8:	f002 f984 	bl	80075c4 <HAL_GPIO_ReadPin>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b01      	cmp	r3, #1
 80052c0:	f040 8090 	bne.w	80053e4 <Home_Manager+0x228>
			{
				Alto.Steppers[index].isStop = true;
 80052c4:	7b7b      	ldrb	r3, [r7, #13]
 80052c6:	4a4d      	ldr	r2, [pc, #308]	; (80053fc <Home_Manager+0x240>)
 80052c8:	214c      	movs	r1, #76	; 0x4c
 80052ca:	fb01 f303 	mul.w	r3, r1, r3
 80052ce:	4413      	add	r3, r2
 80052d0:	3349      	adds	r3, #73	; 0x49
 80052d2:	2201      	movs	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]
				Alto.Homing_State = CORRECTING_2_LIMIT_ENTEY;
 80052d6:	4b49      	ldr	r3, [pc, #292]	; (80053fc <Home_Manager+0x240>)
 80052d8:	2204      	movs	r2, #4
 80052da:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
			}
			break;
 80052de:	e081      	b.n	80053e4 <Home_Manager+0x228>
		case CORRECTING_2_LIMIT_ENTEY:
			Alto.Steppers[index].Target_Clk += hitting_limit_clk * 2;
 80052e0:	7b7b      	ldrb	r3, [r7, #13]
 80052e2:	4a46      	ldr	r2, [pc, #280]	; (80053fc <Home_Manager+0x240>)
 80052e4:	214c      	movs	r1, #76	; 0x4c
 80052e6:	fb01 f303 	mul.w	r3, r1, r3
 80052ea:	4413      	add	r3, r2
 80052ec:	3344      	adds	r3, #68	; 0x44
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	005a      	lsls	r2, r3, #1
 80052f4:	7b7b      	ldrb	r3, [r7, #13]
 80052f6:	440a      	add	r2, r1
 80052f8:	4940      	ldr	r1, [pc, #256]	; (80053fc <Home_Manager+0x240>)
 80052fa:	204c      	movs	r0, #76	; 0x4c
 80052fc:	fb00 f303 	mul.w	r3, r0, r3
 8005300:	440b      	add	r3, r1
 8005302:	3344      	adds	r3, #68	; 0x44
 8005304:	601a      	str	r2, [r3, #0]
			Alto.Homing_State = CORRECTING_2_LIMIT;
 8005306:	4b3d      	ldr	r3, [pc, #244]	; (80053fc <Home_Manager+0x240>)
 8005308:	2205      	movs	r2, #5
 800530a:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
			break;
 800530e:	e070      	b.n	80053f2 <Home_Manager+0x236>
		case CORRECTING_2_LIMIT:
			if(HAL_GPIO_ReadPin(GPIOE, limit_sw) == 0)
 8005310:	89fb      	ldrh	r3, [r7, #14]
 8005312:	4619      	mov	r1, r3
 8005314:	483a      	ldr	r0, [pc, #232]	; (8005400 <Home_Manager+0x244>)
 8005316:	f002 f955 	bl	80075c4 <HAL_GPIO_ReadPin>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d163      	bne.n	80053e8 <Home_Manager+0x22c>
			{
				Alto.Steppers[index].isStop = true;
 8005320:	7b7b      	ldrb	r3, [r7, #13]
 8005322:	4a36      	ldr	r2, [pc, #216]	; (80053fc <Home_Manager+0x240>)
 8005324:	214c      	movs	r1, #76	; 0x4c
 8005326:	fb01 f303 	mul.w	r3, r1, r3
 800532a:	4413      	add	r3, r2
 800532c:	3349      	adds	r3, #73	; 0x49
 800532e:	2201      	movs	r2, #1
 8005330:	701a      	strb	r2, [r3, #0]
				Alto.Homing_State = BACK_TO_ZERO_ENTEY;
 8005332:	4b32      	ldr	r3, [pc, #200]	; (80053fc <Home_Manager+0x240>)
 8005334:	2206      	movs	r2, #6
 8005336:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
			}
			break;
 800533a:	e055      	b.n	80053e8 <Home_Manager+0x22c>
		case BACK_TO_ZERO_ENTEY:
			Alto.Steppers[index].Speed = DEFAULT_FAST_SPEED;
 800533c:	7b7b      	ldrb	r3, [r7, #13]
 800533e:	4a2f      	ldr	r2, [pc, #188]	; (80053fc <Home_Manager+0x240>)
 8005340:	214c      	movs	r1, #76	; 0x4c
 8005342:	fb01 f303 	mul.w	r3, r1, r3
 8005346:	4413      	add	r3, r2
 8005348:	3302      	adds	r3, #2
 800534a:	2250      	movs	r2, #80	; 0x50
 800534c:	801a      	strh	r2, [r3, #0]
			Alto.Steppers[index].Target_Clk += back_to_zero_clk;
 800534e:	7b7b      	ldrb	r3, [r7, #13]
 8005350:	4a2a      	ldr	r2, [pc, #168]	; (80053fc <Home_Manager+0x240>)
 8005352:	214c      	movs	r1, #76	; 0x4c
 8005354:	fb01 f303 	mul.w	r3, r1, r3
 8005358:	4413      	add	r3, r2
 800535a:	3344      	adds	r3, #68	; 0x44
 800535c:	6819      	ldr	r1, [r3, #0]
 800535e:	7b7b      	ldrb	r3, [r7, #13]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	440a      	add	r2, r1
 8005364:	4925      	ldr	r1, [pc, #148]	; (80053fc <Home_Manager+0x240>)
 8005366:	204c      	movs	r0, #76	; 0x4c
 8005368:	fb00 f303 	mul.w	r3, r0, r3
 800536c:	440b      	add	r3, r1
 800536e:	3344      	adds	r3, #68	; 0x44
 8005370:	601a      	str	r2, [r3, #0]
			Alto.Homing_State = BACK_TO_ZERO;
 8005372:	4b22      	ldr	r3, [pc, #136]	; (80053fc <Home_Manager+0x240>)
 8005374:	2207      	movs	r2, #7
 8005376:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
			break;
 800537a:	e03a      	b.n	80053f2 <Home_Manager+0x236>
		case BACK_TO_ZERO:
			if(Alto.Steppers[index].Target_Clk == Alto.Steppers[index].Clk)
 800537c:	7b7b      	ldrb	r3, [r7, #13]
 800537e:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <Home_Manager+0x240>)
 8005380:	214c      	movs	r1, #76	; 0x4c
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	4413      	add	r3, r2
 8005388:	3344      	adds	r3, #68	; 0x44
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	7b7b      	ldrb	r3, [r7, #13]
 800538e:	491b      	ldr	r1, [pc, #108]	; (80053fc <Home_Manager+0x240>)
 8005390:	204c      	movs	r0, #76	; 0x4c
 8005392:	fb00 f303 	mul.w	r3, r0, r3
 8005396:	440b      	add	r3, r1
 8005398:	3308      	adds	r3, #8
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d125      	bne.n	80053ec <Home_Manager+0x230>
			{
				Alto.Homing_State = SET_JOINT_ZERO_ENTEY;
 80053a0:	4b16      	ldr	r3, [pc, #88]	; (80053fc <Home_Manager+0x240>)
 80053a2:	2208      	movs	r2, #8
 80053a4:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
				Alto.Steppers[index].Set_Zero_Requset = true;
 80053a8:	7b7b      	ldrb	r3, [r7, #13]
 80053aa:	4a14      	ldr	r2, [pc, #80]	; (80053fc <Home_Manager+0x240>)
 80053ac:	214c      	movs	r1, #76	; 0x4c
 80053ae:	fb01 f303 	mul.w	r3, r1, r3
 80053b2:	4413      	add	r3, r2
 80053b4:	334a      	adds	r3, #74	; 0x4a
 80053b6:	2201      	movs	r2, #1
 80053b8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80053ba:	e017      	b.n	80053ec <Home_Manager+0x230>
		case SET_JOINT_ZERO_ENTEY:
			if(Alto.Steppers[index].Set_Zero_Requset == false)
 80053bc:	7b7b      	ldrb	r3, [r7, #13]
 80053be:	4a0f      	ldr	r2, [pc, #60]	; (80053fc <Home_Manager+0x240>)
 80053c0:	214c      	movs	r1, #76	; 0x4c
 80053c2:	fb01 f303 	mul.w	r3, r1, r3
 80053c6:	4413      	add	r3, r2
 80053c8:	334a      	adds	r3, #74	; 0x4a
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	f083 0301 	eor.w	r3, r3, #1
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00c      	beq.n	80053f0 <Home_Manager+0x234>
				Alto.Homing_State = SET_JOINT_ZERO;
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <Home_Manager+0x240>)
 80053d8:	2209      	movs	r2, #9
 80053da:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
			break;
 80053de:	e007      	b.n	80053f0 <Home_Manager+0x234>
			break;
 80053e0:	bf00      	nop
 80053e2:	e006      	b.n	80053f2 <Home_Manager+0x236>
			break;
 80053e4:	bf00      	nop
 80053e6:	e004      	b.n	80053f2 <Home_Manager+0x236>
			break;
 80053e8:	bf00      	nop
 80053ea:	e002      	b.n	80053f2 <Home_Manager+0x236>
			break;
 80053ec:	bf00      	nop
 80053ee:	e000      	b.n	80053f2 <Home_Manager+0x236>
			break;
 80053f0:	bf00      	nop
	}
}
 80053f2:	bf00      	nop
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	2000016c 	.word	0x2000016c
 8005400:	40021000 	.word	0x40021000

08005404 <Set_Zero_Manager>:

void Set_Zero_Manager(CAN_HandleTypeDef *hcan, uint8_t *cmd, uint8_t index)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	4613      	mov	r3, r2
 8005410:	71fb      	strb	r3, [r7, #7]
	uint8_t id = index + 1;
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	3301      	adds	r3, #1
 8005416:	75bb      	strb	r3, [r7, #22]
	Alto.Steppers[index].Clk = 0;
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	4a2c      	ldr	r2, [pc, #176]	; (80054cc <Set_Zero_Manager+0xc8>)
 800541c:	214c      	movs	r1, #76	; 0x4c
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	4413      	add	r3, r2
 8005424:	3308      	adds	r3, #8
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
	Alto.Steppers[index].Angle = 0;
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	4a27      	ldr	r2, [pc, #156]	; (80054cc <Set_Zero_Manager+0xc8>)
 800542e:	214c      	movs	r1, #76	; 0x4c
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	4413      	add	r3, r2
 8005436:	330c      	adds	r3, #12
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
	Alto.Steppers[index].Block = 0;
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	4a22      	ldr	r2, [pc, #136]	; (80054cc <Set_Zero_Manager+0xc8>)
 8005442:	214c      	movs	r1, #76	; 0x4c
 8005444:	fb01 f303 	mul.w	r3, r1, r3
 8005448:	4413      	add	r3, r2
 800544a:	3315      	adds	r3, #21
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < CLK_DELTA_SAMPLE_LENGTH; i++)
 8005450:	2300      	movs	r3, #0
 8005452:	75fb      	strb	r3, [r7, #23]
 8005454:	e00f      	b.n	8005476 <Set_Zero_Manager+0x72>
		Alto.Steppers[i]._Clk_Delta[i] = 0;
 8005456:	7dfa      	ldrb	r2, [r7, #23]
 8005458:	7df9      	ldrb	r1, [r7, #23]
 800545a:	481c      	ldr	r0, [pc, #112]	; (80054cc <Set_Zero_Manager+0xc8>)
 800545c:	4613      	mov	r3, r2
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	4413      	add	r3, r2
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4413      	add	r3, r2
 8005466:	440b      	add	r3, r1
 8005468:	3306      	adds	r3, #6
 800546a:	2200      	movs	r2, #0
 800546c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for(uint8_t i = 0; i < CLK_DELTA_SAMPLE_LENGTH; i++)
 8005470:	7dfb      	ldrb	r3, [r7, #23]
 8005472:	3301      	adds	r3, #1
 8005474:	75fb      	strb	r3, [r7, #23]
 8005476:	7dfb      	ldrb	r3, [r7, #23]
 8005478:	2b09      	cmp	r3, #9
 800547a:	d9ec      	bls.n	8005456 <Set_Zero_Manager+0x52>
	Alto.Steppers[index].Clk_Delta = 0;
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	4a13      	ldr	r2, [pc, #76]	; (80054cc <Set_Zero_Manager+0xc8>)
 8005480:	214c      	movs	r1, #76	; 0x4c
 8005482:	fb01 f303 	mul.w	r3, r1, r3
 8005486:	4413      	add	r3, r2
 8005488:	3340      	adds	r3, #64	; 0x40
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
	Alto.Steppers[index].Target_Clk = 0;
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	4a0e      	ldr	r2, [pc, #56]	; (80054cc <Set_Zero_Manager+0xc8>)
 8005492:	214c      	movs	r1, #76	; 0x4c
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	4413      	add	r3, r2
 800549a:	3344      	adds	r3, #68	; 0x44
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
	Alto.Steppers[index].Set_Zero_Requset = false;
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	4a0a      	ldr	r2, [pc, #40]	; (80054cc <Set_Zero_Manager+0xc8>)
 80054a4:	214c      	movs	r1, #76	; 0x4c
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	4413      	add	r3, r2
 80054ac:	334a      	adds	r3, #74	; 0x4a
 80054ae:	2200      	movs	r2, #0
 80054b0:	701a      	strb	r2, [r3, #0]
	Stepper_Set_Zero(hcan, cmd, id);
 80054b2:	7dbb      	ldrb	r3, [r7, #22]
 80054b4:	461a      	mov	r2, r3
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f7fb fdc7 	bl	800104c <Stepper_Set_Zero>
	osDelay(DELAY_MS);
 80054be:	2001      	movs	r0, #1
 80054c0:	f007 fdcf 	bl	800d062 <osDelay>
}
 80054c4:	bf00      	nop
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	2000016c 	.word	0x2000016c

080054d0 <Info_Manager>:

void Info_Manager(CAN_HandleTypeDef *hcan, uint8_t *cmd, uint8_t index)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	4613      	mov	r3, r2
 80054dc:	71fb      	strb	r3, [r7, #7]
	uint8_t id = index + 1;
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	3301      	adds	r3, #1
 80054e2:	75fb      	strb	r3, [r7, #23]
	Emm_Request_Handle.REQUEST_ID = id;
 80054e4:	4a1f      	ldr	r2, [pc, #124]	; (8005564 <Info_Manager+0x94>)
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
 80054e8:	7053      	strb	r3, [r2, #1]

	while(Emm_Request_Handle.REQUEST_FLAG == GET_STEP_REQUEST_FLAG)
 80054ea:	e008      	b.n	80054fe <Info_Manager+0x2e>
	{
		Get_Step_Request(hcan, cmd, id);
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
 80054ee:	461a      	mov	r2, r3
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f7fb fd59 	bl	8000faa <Get_Step_Request>
		osDelay(DELAY_MS);
 80054f8:	2001      	movs	r0, #1
 80054fa:	f007 fdb2 	bl	800d062 <osDelay>
	while(Emm_Request_Handle.REQUEST_FLAG == GET_STEP_REQUEST_FLAG)
 80054fe:	4b19      	ldr	r3, [pc, #100]	; (8005564 <Info_Manager+0x94>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d0f2      	beq.n	80054ec <Info_Manager+0x1c>
	}

	while(Emm_Request_Handle.REQUEST_FLAG == GET_ANGLE_REQUEST_FLAG)
 8005506:	e008      	b.n	800551a <Info_Manager+0x4a>
	{
		Get_Angle_Request(hcan, cmd, id);
 8005508:	7dfb      	ldrb	r3, [r7, #23]
 800550a:	461a      	mov	r2, r3
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f7fb fd30 	bl	8000f74 <Get_Angle_Request>
		osDelay(DELAY_MS);
 8005514:	2001      	movs	r0, #1
 8005516:	f007 fda4 	bl	800d062 <osDelay>
	while(Emm_Request_Handle.REQUEST_FLAG == GET_ANGLE_REQUEST_FLAG)
 800551a:	4b12      	ldr	r3, [pc, #72]	; (8005564 <Info_Manager+0x94>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f2      	beq.n	8005508 <Info_Manager+0x38>
	}

	while(Emm_Request_Handle.REQUEST_FLAG == GET_ERROR_REQUEST_FLAG)
 8005522:	e008      	b.n	8005536 <Info_Manager+0x66>
	{
		Get_Error_Request(hcan, cmd, id);
 8005524:	7dfb      	ldrb	r3, [r7, #23]
 8005526:	461a      	mov	r2, r3
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f7fb fd58 	bl	8000fe0 <Get_Error_Request>
		osDelay(DELAY_MS);;
 8005530:	2001      	movs	r0, #1
 8005532:	f007 fd96 	bl	800d062 <osDelay>
	while(Emm_Request_Handle.REQUEST_FLAG == GET_ERROR_REQUEST_FLAG)
 8005536:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <Info_Manager+0x94>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d0f2      	beq.n	8005524 <Info_Manager+0x54>
	}

	while(Emm_Request_Handle.REQUEST_FLAG == GET_FLAG_REQUEST_FLAG)
 800553e:	e008      	b.n	8005552 <Info_Manager+0x82>
	{
		Get_Flag_Request(hcan, cmd, id);
 8005540:	7dfb      	ldrb	r3, [r7, #23]
 8005542:	461a      	mov	r2, r3
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7fb fd65 	bl	8001016 <Get_Flag_Request>
		osDelay(DELAY_MS);
 800554c:	2001      	movs	r0, #1
 800554e:	f007 fd88 	bl	800d062 <osDelay>
	while(Emm_Request_Handle.REQUEST_FLAG == GET_FLAG_REQUEST_FLAG)
 8005552:	4b04      	ldr	r3, [pc, #16]	; (8005564 <Info_Manager+0x94>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b03      	cmp	r3, #3
 8005558:	d0f2      	beq.n	8005540 <Info_Manager+0x70>
	}
}
 800555a:	bf00      	nop
 800555c:	bf00      	nop
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000448 	.word	0x20000448

08005568 <Speed_Average_Manager>:

void Speed_Average_Manager()
{
 8005568:	b480      	push	{r7}
 800556a:	b08b      	sub	sp, #44	; 0x2c
 800556c:	af00      	add	r7, sp, #0
	int32_t dist[AXIS_NUM] = {0};
 800556e:	f107 0308 	add.w	r3, r7, #8
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	605a      	str	r2, [r3, #4]
 8005578:	609a      	str	r2, [r3, #8]
 800557a:	60da      	str	r2, [r3, #12]
 800557c:	611a      	str	r2, [r3, #16]
 800557e:	615a      	str	r2, [r3, #20]
	int32_t max_dist = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint8_t index = 0; index < AXIS_NUM; index++)
 8005584:	2300      	movs	r3, #0
 8005586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800558a:	e039      	b.n	8005600 <Speed_Average_Manager+0x98>
	{
		dist[index] = abs(Alto.Steppers[index].Target_Clk - Alto.Steppers[index].Clk);
 800558c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005590:	4a45      	ldr	r2, [pc, #276]	; (80056a8 <Speed_Average_Manager+0x140>)
 8005592:	214c      	movs	r1, #76	; 0x4c
 8005594:	fb01 f303 	mul.w	r3, r1, r3
 8005598:	4413      	add	r3, r2
 800559a:	3344      	adds	r3, #68	; 0x44
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055a2:	4941      	ldr	r1, [pc, #260]	; (80056a8 <Speed_Average_Manager+0x140>)
 80055a4:	204c      	movs	r0, #76	; 0x4c
 80055a6:	fb00 f303 	mul.w	r3, r0, r3
 80055aa:	440b      	add	r3, r1
 80055ac:	3308      	adds	r3, #8
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	1ad2      	subs	r2, r2, r3
 80055b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055b6:	2a00      	cmp	r2, #0
 80055b8:	bfb8      	it	lt
 80055ba:	4252      	neglt	r2, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	3320      	adds	r3, #32
 80055c0:	f107 0108 	add.w	r1, r7, #8
 80055c4:	440b      	add	r3, r1
 80055c6:	f843 2c20 	str.w	r2, [r3, #-32]
		if (dist[index] > max_dist)
 80055ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	3320      	adds	r3, #32
 80055d2:	f107 0208 	add.w	r2, r7, #8
 80055d6:	4413      	add	r3, r2
 80055d8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80055dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055de:	429a      	cmp	r2, r3
 80055e0:	da09      	bge.n	80055f6 <Speed_Average_Manager+0x8e>
		{
			max_dist = dist[index];
 80055e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	3320      	adds	r3, #32
 80055ea:	f107 0208 	add.w	r2, r7, #8
 80055ee:	4413      	add	r3, r2
 80055f0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint8_t index = 0; index < AXIS_NUM; index++)
 80055f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055fa:	3301      	adds	r3, #1
 80055fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005600:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005604:	2b05      	cmp	r3, #5
 8005606:	d9c1      	bls.n	800558c <Speed_Average_Manager+0x24>
		}
	}

	for (uint8_t index = 0; index < AXIS_NUM; index++)
 8005608:	2300      	movs	r3, #0
 800560a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800560e:	e03f      	b.n	8005690 <Speed_Average_Manager+0x128>
	{
		Alto.Steppers[index].Acc = Alto.Acc;
 8005610:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005614:	4a24      	ldr	r2, [pc, #144]	; (80056a8 <Speed_Average_Manager+0x140>)
 8005616:	f892 02d4 	ldrb.w	r0, [r2, #724]	; 0x2d4
 800561a:	4a23      	ldr	r2, [pc, #140]	; (80056a8 <Speed_Average_Manager+0x140>)
 800561c:	214c      	movs	r1, #76	; 0x4c
 800561e:	fb01 f303 	mul.w	r3, r1, r3
 8005622:	4413      	add	r3, r2
 8005624:	3304      	adds	r3, #4
 8005626:	4602      	mov	r2, r0
 8005628:	701a      	strb	r2, [r3, #0]
		Alto.Steppers[index].Speed = (uint8_t)((float)dist[index] / max_dist * Alto.Speed);
 800562a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	3320      	adds	r3, #32
 8005632:	f107 0208 	add.w	r2, r7, #8
 8005636:	4413      	add	r3, r2
 8005638:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800564e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005652:	4b15      	ldr	r3, [pc, #84]	; (80056a8 <Speed_Average_Manager+0x140>)
 8005654:	f893 32d3 	ldrb.w	r3, [r3, #723]	; 0x2d3
 8005658:	ee07 3a90 	vmov	s15, r3
 800565c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005668:	edc7 7a01 	vstr	s15, [r7, #4]
 800566c:	793b      	ldrb	r3, [r7, #4]
 800566e:	b2da      	uxtb	r2, r3
 8005670:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005674:	b290      	uxth	r0, r2
 8005676:	4a0c      	ldr	r2, [pc, #48]	; (80056a8 <Speed_Average_Manager+0x140>)
 8005678:	214c      	movs	r1, #76	; 0x4c
 800567a:	fb01 f303 	mul.w	r3, r1, r3
 800567e:	4413      	add	r3, r2
 8005680:	3302      	adds	r3, #2
 8005682:	4602      	mov	r2, r0
 8005684:	801a      	strh	r2, [r3, #0]
	for (uint8_t index = 0; index < AXIS_NUM; index++)
 8005686:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800568a:	3301      	adds	r3, #1
 800568c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005690:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005694:	2b05      	cmp	r3, #5
 8005696:	d9bb      	bls.n	8005610 <Speed_Average_Manager+0xa8>
	}
}
 8005698:	bf00      	nop
 800569a:	bf00      	nop
 800569c:	372c      	adds	r7, #44	; 0x2c
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	2000016c 	.word	0x2000016c
 80056ac:	00000000 	.word	0x00000000

080056b0 <MovP_Manager>:

void MovP_Manager()
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
	if(Alto.Start_Entry_Flag)
 80056b6:	4b4c      	ldr	r3, [pc, #304]	; (80057e8 <MovP_Manager+0x138>)
 80056b8:	f893 32d7 	ldrb.w	r3, [r3, #727]	; 0x2d7
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d054      	beq.n	800576a <MovP_Manager+0xba>
	{
		bool ret = IK(Alto.Target_TCP_Position, Alto.Target_TCP_Rotation);
 80056c0:	494a      	ldr	r1, [pc, #296]	; (80057ec <MovP_Manager+0x13c>)
 80056c2:	484b      	ldr	r0, [pc, #300]	; (80057f0 <MovP_Manager+0x140>)
 80056c4:	f7fc f9e2 	bl	8001a8c <IK>
 80056c8:	4603      	mov	r3, r0
 80056ca:	713b      	strb	r3, [r7, #4]
		if(ret)
 80056cc:	793b      	ldrb	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d047      	beq.n	8005762 <MovP_Manager+0xb2>
		{
			for(uint8_t index = 0; index < AXIS_NUM; index++)
 80056d2:	2300      	movs	r3, #0
 80056d4:	71fb      	strb	r3, [r7, #7]
 80056d6:	e03f      	b.n	8005758 <MovP_Manager+0xa8>
			{
				Alto.Steppers[index].Target_Clk =
								(int32_t)(Alto.Target_JointAngle[index] * Alto.DH.Joints[index].reduction_ratio / 0.1125) * Alto.DH.Joints[index].orientation;
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	4a43      	ldr	r2, [pc, #268]	; (80057e8 <MovP_Manager+0x138>)
 80056dc:	33a8      	adds	r3, #168	; 0xa8
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	ed93 7a00 	vldr	s14, [r3]
 80056e6:	79fa      	ldrb	r2, [r7, #7]
 80056e8:	493f      	ldr	r1, [pc, #252]	; (80057e8 <MovP_Manager+0x138>)
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	440b      	add	r3, r1
 80056f4:	f203 13d9 	addw	r3, r3, #473	; 0x1d9
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005706:	ee17 0a90 	vmov	r0, s15
 800570a:	f7fa fec5 	bl	8000498 <__aeabi_f2d>
 800570e:	a332      	add	r3, pc, #200	; (adr r3, 80057d8 <MovP_Manager+0x128>)
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	f7fb f842 	bl	800079c <__aeabi_ddiv>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4610      	mov	r0, r2
 800571e:	4619      	mov	r1, r3
 8005720:	f7fb f9ac 	bl	8000a7c <__aeabi_d2iz>
 8005724:	4601      	mov	r1, r0
 8005726:	79fa      	ldrb	r2, [r7, #7]
 8005728:	482f      	ldr	r0, [pc, #188]	; (80057e8 <MovP_Manager+0x138>)
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4403      	add	r3, r0
 8005734:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8005738:	f993 3000 	ldrsb.w	r3, [r3]
 800573c:	461a      	mov	r2, r3
				Alto.Steppers[index].Target_Clk =
 800573e:	79fb      	ldrb	r3, [r7, #7]
								(int32_t)(Alto.Target_JointAngle[index] * Alto.DH.Joints[index].reduction_ratio / 0.1125) * Alto.DH.Joints[index].orientation;
 8005740:	fb01 f202 	mul.w	r2, r1, r2
				Alto.Steppers[index].Target_Clk =
 8005744:	4928      	ldr	r1, [pc, #160]	; (80057e8 <MovP_Manager+0x138>)
 8005746:	204c      	movs	r0, #76	; 0x4c
 8005748:	fb00 f303 	mul.w	r3, r0, r3
 800574c:	440b      	add	r3, r1
 800574e:	3344      	adds	r3, #68	; 0x44
 8005750:	601a      	str	r2, [r3, #0]
			for(uint8_t index = 0; index < AXIS_NUM; index++)
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	3301      	adds	r3, #1
 8005756:	71fb      	strb	r3, [r7, #7]
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	2b05      	cmp	r3, #5
 800575c:	d9bc      	bls.n	80056d8 <MovP_Manager+0x28>
			}
			Speed_Average_Manager();
 800575e:	f7ff ff03 	bl	8005568 <Speed_Average_Manager>
		}
		Alto.Start_Entry_Flag = false;
 8005762:	4b21      	ldr	r3, [pc, #132]	; (80057e8 <MovP_Manager+0x138>)
 8005764:	2200      	movs	r2, #0
 8005766:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
	}

	bool Position_Flag = true;//1 : In target position, 0 : NOt in target position.
 800576a:	2301      	movs	r3, #1
 800576c:	71bb      	strb	r3, [r7, #6]
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 800576e:	2300      	movs	r3, #0
 8005770:	717b      	strb	r3, [r7, #5]
 8005772:	e023      	b.n	80057bc <MovP_Manager+0x10c>
	{
		if (fabsf(Alto.Target_JointAngle[index] - Alto.Current_JointAngle[index]) > CLK_DISTANCE_TOL)
 8005774:	797b      	ldrb	r3, [r7, #5]
 8005776:	4a1c      	ldr	r2, [pc, #112]	; (80057e8 <MovP_Manager+0x138>)
 8005778:	33a8      	adds	r3, #168	; 0xa8
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	ed93 7a00 	vldr	s14, [r3]
 8005782:	797b      	ldrb	r3, [r7, #5]
 8005784:	4a18      	ldr	r2, [pc, #96]	; (80057e8 <MovP_Manager+0x138>)
 8005786:	339c      	adds	r3, #156	; 0x9c
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	edd3 7a00 	vldr	s15, [r3]
 8005790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005794:	eef0 7ae7 	vabs.f32	s15, s15
 8005798:	ee17 0a90 	vmov	r0, s15
 800579c:	f7fa fe7c 	bl	8000498 <__aeabi_f2d>
 80057a0:	a30f      	add	r3, pc, #60	; (adr r3, 80057e0 <MovP_Manager+0x130>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f7fb f95f 	bl	8000a68 <__aeabi_dcmpgt>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <MovP_Manager+0x106>
		{
			Position_Flag = false;
 80057b0:	2300      	movs	r3, #0
 80057b2:	71bb      	strb	r3, [r7, #6]
			break;
 80057b4:	e005      	b.n	80057c2 <MovP_Manager+0x112>
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 80057b6:	797b      	ldrb	r3, [r7, #5]
 80057b8:	3301      	adds	r3, #1
 80057ba:	717b      	strb	r3, [r7, #5]
 80057bc:	797b      	ldrb	r3, [r7, #5]
 80057be:	2b05      	cmp	r3, #5
 80057c0:	d9d8      	bls.n	8005774 <MovP_Manager+0xc4>
		}
	}
	if(Position_Flag)
 80057c2:	79bb      	ldrb	r3, [r7, #6]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <MovP_Manager+0x120>
		Alto.Start_Flag = false;
 80057c8:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <MovP_Manager+0x138>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	cccccccd 	.word	0xcccccccd
 80057dc:	3fbccccc 	.word	0x3fbccccc
 80057e0:	9999999a 	.word	0x9999999a
 80057e4:	3fb99999 	.word	0x3fb99999
 80057e8:	2000016c 	.word	0x2000016c
 80057ec:	20000430 	.word	0x20000430
 80057f0:	20000424 	.word	0x20000424
 80057f4:	00000000 	.word	0x00000000

080057f8 <Joint_Manager>:
//{
//
//}

void Joint_Manager()
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
	if(Alto.Start_Entry_Flag)
 80057fe:	4b68      	ldr	r3, [pc, #416]	; (80059a0 <Joint_Manager+0x1a8>)
 8005800:	f893 32d7 	ldrb.w	r3, [r3, #727]	; 0x2d7
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 808b 	beq.w	8005920 <Joint_Manager+0x128>
	{
		for(uint8_t index = 0; index < AXIS_NUM; index++)
 800580a:	2300      	movs	r3, #0
 800580c:	71fb      	strb	r3, [r7, #7]
 800580e:	e07d      	b.n	800590c <Joint_Manager+0x114>
		{
			//Target_JointAngle limitation check
			if(Alto.Target_JointAngle[index] > Alto.Upper_JointAngle_Limit[index])
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	4a63      	ldr	r2, [pc, #396]	; (80059a0 <Joint_Manager+0x1a8>)
 8005814:	33a8      	adds	r3, #168	; 0xa8
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	ed93 7a00 	vldr	s14, [r3]
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	4a5f      	ldr	r2, [pc, #380]	; (80059a0 <Joint_Manager+0x1a8>)
 8005822:	3390      	adds	r3, #144	; 0x90
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	edd3 7a00 	vldr	s15, [r3]
 800582c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005834:	dd0b      	ble.n	800584e <Joint_Manager+0x56>
				Alto.Target_JointAngle[index] = Alto.Upper_JointAngle_Limit[index];
 8005836:	79fa      	ldrb	r2, [r7, #7]
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	4959      	ldr	r1, [pc, #356]	; (80059a0 <Joint_Manager+0x1a8>)
 800583c:	3290      	adds	r2, #144	; 0x90
 800583e:	0092      	lsls	r2, r2, #2
 8005840:	440a      	add	r2, r1
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	4956      	ldr	r1, [pc, #344]	; (80059a0 <Joint_Manager+0x1a8>)
 8005846:	33a8      	adds	r3, #168	; 0xa8
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	601a      	str	r2, [r3, #0]
			if(Alto.Target_JointAngle[index] < Alto.Lower_JointAngle_Limit[index])
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	4a53      	ldr	r2, [pc, #332]	; (80059a0 <Joint_Manager+0x1a8>)
 8005852:	33a8      	adds	r3, #168	; 0xa8
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	ed93 7a00 	vldr	s14, [r3]
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	4a50      	ldr	r2, [pc, #320]	; (80059a0 <Joint_Manager+0x1a8>)
 8005860:	3396      	adds	r3, #150	; 0x96
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	edd3 7a00 	vldr	s15, [r3]
 800586a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800586e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005872:	d50b      	bpl.n	800588c <Joint_Manager+0x94>
				Alto.Target_JointAngle[index] = Alto.Lower_JointAngle_Limit[index];
 8005874:	79fa      	ldrb	r2, [r7, #7]
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	4949      	ldr	r1, [pc, #292]	; (80059a0 <Joint_Manager+0x1a8>)
 800587a:	3296      	adds	r2, #150	; 0x96
 800587c:	0092      	lsls	r2, r2, #2
 800587e:	440a      	add	r2, r1
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	4947      	ldr	r1, [pc, #284]	; (80059a0 <Joint_Manager+0x1a8>)
 8005884:	33a8      	adds	r3, #168	; 0xa8
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	440b      	add	r3, r1
 800588a:	601a      	str	r2, [r3, #0]

			Alto.Steppers[index].Target_Clk =
					(int32_t)(Alto.Target_JointAngle[index] * Alto.DH.Joints[index].reduction_ratio / 0.1125) * Alto.DH.Joints[index].orientation;
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	4a44      	ldr	r2, [pc, #272]	; (80059a0 <Joint_Manager+0x1a8>)
 8005890:	33a8      	adds	r3, #168	; 0xa8
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	ed93 7a00 	vldr	s14, [r3]
 800589a:	79fa      	ldrb	r2, [r7, #7]
 800589c:	4940      	ldr	r1, [pc, #256]	; (80059a0 <Joint_Manager+0x1a8>)
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	f203 13d9 	addw	r3, r3, #473	; 0x1d9
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ba:	ee17 0a90 	vmov	r0, s15
 80058be:	f7fa fdeb 	bl	8000498 <__aeabi_f2d>
 80058c2:	a333      	add	r3, pc, #204	; (adr r3, 8005990 <Joint_Manager+0x198>)
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f7fa ff68 	bl	800079c <__aeabi_ddiv>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4610      	mov	r0, r2
 80058d2:	4619      	mov	r1, r3
 80058d4:	f7fb f8d2 	bl	8000a7c <__aeabi_d2iz>
 80058d8:	4601      	mov	r1, r0
 80058da:	79fa      	ldrb	r2, [r7, #7]
 80058dc:	4830      	ldr	r0, [pc, #192]	; (80059a0 <Joint_Manager+0x1a8>)
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4403      	add	r3, r0
 80058e8:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80058ec:	f993 3000 	ldrsb.w	r3, [r3]
 80058f0:	461a      	mov	r2, r3
			Alto.Steppers[index].Target_Clk =
 80058f2:	79fb      	ldrb	r3, [r7, #7]
					(int32_t)(Alto.Target_JointAngle[index] * Alto.DH.Joints[index].reduction_ratio / 0.1125) * Alto.DH.Joints[index].orientation;
 80058f4:	fb01 f202 	mul.w	r2, r1, r2
			Alto.Steppers[index].Target_Clk =
 80058f8:	4929      	ldr	r1, [pc, #164]	; (80059a0 <Joint_Manager+0x1a8>)
 80058fa:	204c      	movs	r0, #76	; 0x4c
 80058fc:	fb00 f303 	mul.w	r3, r0, r3
 8005900:	440b      	add	r3, r1
 8005902:	3344      	adds	r3, #68	; 0x44
 8005904:	601a      	str	r2, [r3, #0]
		for(uint8_t index = 0; index < AXIS_NUM; index++)
 8005906:	79fb      	ldrb	r3, [r7, #7]
 8005908:	3301      	adds	r3, #1
 800590a:	71fb      	strb	r3, [r7, #7]
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	2b05      	cmp	r3, #5
 8005910:	f67f af7e 	bls.w	8005810 <Joint_Manager+0x18>
		}
		Speed_Average_Manager();
 8005914:	f7ff fe28 	bl	8005568 <Speed_Average_Manager>
		Alto.Start_Entry_Flag = false;
 8005918:	4b21      	ldr	r3, [pc, #132]	; (80059a0 <Joint_Manager+0x1a8>)
 800591a:	2200      	movs	r2, #0
 800591c:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
	}

	bool Position_Flag = true;//1 : In target position, 0 : NOt in target position.
 8005920:	2301      	movs	r3, #1
 8005922:	71bb      	strb	r3, [r7, #6]
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 8005924:	2300      	movs	r3, #0
 8005926:	717b      	strb	r3, [r7, #5]
 8005928:	e023      	b.n	8005972 <Joint_Manager+0x17a>
	{
		if (fabsf(Alto.Target_JointAngle[index] - Alto.Current_JointAngle[index]) > CLK_DISTANCE_TOL)
 800592a:	797b      	ldrb	r3, [r7, #5]
 800592c:	4a1c      	ldr	r2, [pc, #112]	; (80059a0 <Joint_Manager+0x1a8>)
 800592e:	33a8      	adds	r3, #168	; 0xa8
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	ed93 7a00 	vldr	s14, [r3]
 8005938:	797b      	ldrb	r3, [r7, #5]
 800593a:	4a19      	ldr	r2, [pc, #100]	; (80059a0 <Joint_Manager+0x1a8>)
 800593c:	339c      	adds	r3, #156	; 0x9c
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	edd3 7a00 	vldr	s15, [r3]
 8005946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800594a:	eef0 7ae7 	vabs.f32	s15, s15
 800594e:	ee17 0a90 	vmov	r0, s15
 8005952:	f7fa fda1 	bl	8000498 <__aeabi_f2d>
 8005956:	a310      	add	r3, pc, #64	; (adr r3, 8005998 <Joint_Manager+0x1a0>)
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f7fb f884 	bl	8000a68 <__aeabi_dcmpgt>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <Joint_Manager+0x174>
		{
			Position_Flag = false;
 8005966:	2300      	movs	r3, #0
 8005968:	71bb      	strb	r3, [r7, #6]
			break;
 800596a:	e005      	b.n	8005978 <Joint_Manager+0x180>
	for(uint8_t index = 0; index < AXIS_NUM; index++)
 800596c:	797b      	ldrb	r3, [r7, #5]
 800596e:	3301      	adds	r3, #1
 8005970:	717b      	strb	r3, [r7, #5]
 8005972:	797b      	ldrb	r3, [r7, #5]
 8005974:	2b05      	cmp	r3, #5
 8005976:	d9d8      	bls.n	800592a <Joint_Manager+0x132>
		}
	}
	if(Position_Flag)
 8005978:	79bb      	ldrb	r3, [r7, #6]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <Joint_Manager+0x18e>
		Alto.Start_Flag = false;
 800597e:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <Joint_Manager+0x1a8>)
 8005980:	2200      	movs	r2, #0
 8005982:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
}
 8005986:	bf00      	nop
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	cccccccd 	.word	0xcccccccd
 8005994:	3fbccccc 	.word	0x3fbccccc
 8005998:	9999999a 	.word	0x9999999a
 800599c:	3fb99999 	.word	0x3fb99999
 80059a0:	2000016c 	.word	0x2000016c
 80059a4:	00000000 	.word	0x00000000

080059a8 <Motion_Manager>:

void Motion_Manager(CAN_HandleTypeDef *hcan, uint8_t *cmd, uint8_t index)
{
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b091      	sub	sp, #68	; 0x44
 80059ac:	af06      	add	r7, sp, #24
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	4613      	mov	r3, r2
 80059b4:	71fb      	strb	r3, [r7, #7]
	uint8_t id = index + 1;
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	3301      	adds	r3, #1
 80059ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	//stop
	if(Alto.Steppers[index].isStop)
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	4a83      	ldr	r2, [pc, #524]	; (8005bd0 <Motion_Manager+0x228>)
 80059c2:	214c      	movs	r1, #76	; 0x4c
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	4413      	add	r3, r2
 80059ca:	3349      	adds	r3, #73	; 0x49
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d032      	beq.n	8005a38 <Motion_Manager+0x90>
	{
		Stepper_Stop(hcan, cmd, id, false);
 80059d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80059d6:	2300      	movs	r3, #0
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f7fb fbe0 	bl	80011a0 <Stepper_Stop>
		osDelay(DELAY_MS);
 80059e0:	2001      	movs	r0, #1
 80059e2:	f007 fb3e 	bl	800d062 <osDelay>
		Alto.Steppers[index].Target_Clk = (int32_t)(Alto.Steppers[index].Angle / 0.1125);
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	4a79      	ldr	r2, [pc, #484]	; (8005bd0 <Motion_Manager+0x228>)
 80059ea:	214c      	movs	r1, #76	; 0x4c
 80059ec:	fb01 f303 	mul.w	r3, r1, r3
 80059f0:	4413      	add	r3, r2
 80059f2:	330c      	adds	r3, #12
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fa fd4e 	bl	8000498 <__aeabi_f2d>
 80059fc:	a372      	add	r3, pc, #456	; (adr r3, 8005bc8 <Motion_Manager+0x220>)
 80059fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a02:	f7fa fecb 	bl	800079c <__aeabi_ddiv>
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	79fc      	ldrb	r4, [r7, #7]
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4619      	mov	r1, r3
 8005a10:	f7fb f834 	bl	8000a7c <__aeabi_d2iz>
 8005a14:	4602      	mov	r2, r0
 8005a16:	496e      	ldr	r1, [pc, #440]	; (8005bd0 <Motion_Manager+0x228>)
 8005a18:	234c      	movs	r3, #76	; 0x4c
 8005a1a:	fb04 f303 	mul.w	r3, r4, r3
 8005a1e:	440b      	add	r3, r1
 8005a20:	3344      	adds	r3, #68	; 0x44
 8005a22:	601a      	str	r2, [r3, #0]
		Alto.Steppers[index].isStop = false;
 8005a24:	79fb      	ldrb	r3, [r7, #7]
 8005a26:	4a6a      	ldr	r2, [pc, #424]	; (8005bd0 <Motion_Manager+0x228>)
 8005a28:	214c      	movs	r1, #76	; 0x4c
 8005a2a:	fb01 f303 	mul.w	r3, r1, r3
 8005a2e:	4413      	add	r3, r2
 8005a30:	3349      	adds	r3, #73	; 0x49
 8005a32:	2200      	movs	r2, #0
 8005a34:	701a      	strb	r2, [r3, #0]
		return;
 8005a36:	e0c2      	b.n	8005bbe <Motion_Manager+0x216>
	}

	//busy
	if(Alto.Steppers[index].Clk_Delta != 0)
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	4a65      	ldr	r2, [pc, #404]	; (8005bd0 <Motion_Manager+0x228>)
 8005a3c:	214c      	movs	r1, #76	; 0x4c
 8005a3e:	fb01 f303 	mul.w	r3, r1, r3
 8005a42:	4413      	add	r3, r2
 8005a44:	3340      	adds	r3, #64	; 0x40
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f040 80b7 	bne.w	8005bbc <Motion_Manager+0x214>
		return;

	//set zero
	if(Alto.Steppers[index].Set_Zero_Requset)
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	4a5f      	ldr	r2, [pc, #380]	; (8005bd0 <Motion_Manager+0x228>)
 8005a52:	214c      	movs	r1, #76	; 0x4c
 8005a54:	fb01 f303 	mul.w	r3, r1, r3
 8005a58:	4413      	add	r3, r2
 8005a5a:	334a      	adds	r3, #74	; 0x4a
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d006      	beq.n	8005a70 <Motion_Manager+0xc8>
	{
		Set_Zero_Manager(hcan, cmd, index);
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	461a      	mov	r2, r3
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f7ff fccb 	bl	8005404 <Set_Zero_Manager>
		return;
 8005a6e:	e0a6      	b.n	8005bbe <Motion_Manager+0x216>
	}

	//enable
	if(Alto.Steppers[index].En != Alto.Steppers[index].Target_En)
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	4a57      	ldr	r2, [pc, #348]	; (8005bd0 <Motion_Manager+0x228>)
 8005a74:	214c      	movs	r1, #76	; 0x4c
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3314      	adds	r3, #20
 8005a7e:	781a      	ldrb	r2, [r3, #0]
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	4953      	ldr	r1, [pc, #332]	; (8005bd0 <Motion_Manager+0x228>)
 8005a84:	204c      	movs	r0, #76	; 0x4c
 8005a86:	fb00 f303 	mul.w	r3, r0, r3
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3348      	adds	r3, #72	; 0x48
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d013      	beq.n	8005abc <Motion_Manager+0x114>
	{
		Stepper_Enable_Control(hcan, cmd, id, Alto.Steppers[index].Target_En, false);
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	4a4e      	ldr	r2, [pc, #312]	; (8005bd0 <Motion_Manager+0x228>)
 8005a98:	214c      	movs	r1, #76	; 0x4c
 8005a9a:	fb01 f303 	mul.w	r3, r1, r3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3348      	adds	r3, #72	; 0x48
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	9100      	str	r1, [sp, #0]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7fb faeb 	bl	800108a <Stepper_Enable_Control>
		osDelay(DELAY_MS);
 8005ab4:	2001      	movs	r0, #1
 8005ab6:	f007 fad4 	bl	800d062 <osDelay>
 8005aba:	e02c      	b.n	8005b16 <Motion_Manager+0x16e>
	}
	else
	{
		if(Alto.Steppers[index].En == false)
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	4a44      	ldr	r2, [pc, #272]	; (8005bd0 <Motion_Manager+0x228>)
 8005ac0:	214c      	movs	r1, #76	; 0x4c
 8005ac2:	fb01 f303 	mul.w	r3, r1, r3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3314      	adds	r3, #20
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	f083 0301 	eor.w	r3, r3, #1
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d01f      	beq.n	8005b16 <Motion_Manager+0x16e>
		{
			Alto.Steppers[index].Target_Clk = (int32_t)(Alto.Steppers[index].Angle / 0.1125);
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	4a3d      	ldr	r2, [pc, #244]	; (8005bd0 <Motion_Manager+0x228>)
 8005ada:	214c      	movs	r1, #76	; 0x4c
 8005adc:	fb01 f303 	mul.w	r3, r1, r3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	330c      	adds	r3, #12
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fa fcd6 	bl	8000498 <__aeabi_f2d>
 8005aec:	a336      	add	r3, pc, #216	; (adr r3, 8005bc8 <Motion_Manager+0x220>)
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	f7fa fe53 	bl	800079c <__aeabi_ddiv>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	79fc      	ldrb	r4, [r7, #7]
 8005afc:	4610      	mov	r0, r2
 8005afe:	4619      	mov	r1, r3
 8005b00:	f7fa ffbc 	bl	8000a7c <__aeabi_d2iz>
 8005b04:	4602      	mov	r2, r0
 8005b06:	4932      	ldr	r1, [pc, #200]	; (8005bd0 <Motion_Manager+0x228>)
 8005b08:	234c      	movs	r3, #76	; 0x4c
 8005b0a:	fb04 f303 	mul.w	r3, r4, r3
 8005b0e:	440b      	add	r3, r1
 8005b10:	3344      	adds	r3, #68	; 0x44
 8005b12:	601a      	str	r2, [r3, #0]
			return;
 8005b14:	e053      	b.n	8005bbe <Motion_Manager+0x216>
		}
	}

	//move
	uint16_t spd = Alto.Steppers[index].Speed;
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	4a2d      	ldr	r2, [pc, #180]	; (8005bd0 <Motion_Manager+0x228>)
 8005b1a:	214c      	movs	r1, #76	; 0x4c
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	4413      	add	r3, r2
 8005b22:	3302      	adds	r3, #2
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t acc = Alto.Steppers[index].Acc;
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	4a29      	ldr	r2, [pc, #164]	; (8005bd0 <Motion_Manager+0x228>)
 8005b2c:	214c      	movs	r1, #76	; 0x4c
 8005b2e:	fb01 f303 	mul.w	r3, r1, r3
 8005b32:	4413      	add	r3, r2
 8005b34:	3304      	adds	r3, #4
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int32_t clk_mov = Alto.Steppers[index].Target_Clk;
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	4a24      	ldr	r2, [pc, #144]	; (8005bd0 <Motion_Manager+0x228>)
 8005b40:	214c      	movs	r1, #76	; 0x4c
 8005b42:	fb01 f303 	mul.w	r3, r1, r3
 8005b46:	4413      	add	r3, r2
 8005b48:	3344      	adds	r3, #68	; 0x44
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	61fb      	str	r3, [r7, #28]
	uint8_t dir = (uint8_t)(clk_mov < 0);
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	0fdb      	lsrs	r3, r3, #31
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	76fb      	strb	r3, [r7, #27]
	uint32_t clk_mov_abs = (uint32_t)abs(clk_mov);
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	bfb8      	it	lt
 8005b5c:	425b      	neglt	r3, r3
 8005b5e:	617b      	str	r3, [r7, #20]
	if(Alto.Steppers[index].Target_Clk != Alto.Steppers[index].Clk)
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	4a1b      	ldr	r2, [pc, #108]	; (8005bd0 <Motion_Manager+0x228>)
 8005b64:	214c      	movs	r1, #76	; 0x4c
 8005b66:	fb01 f303 	mul.w	r3, r1, r3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	3344      	adds	r3, #68	; 0x44
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	4917      	ldr	r1, [pc, #92]	; (8005bd0 <Motion_Manager+0x228>)
 8005b74:	204c      	movs	r0, #76	; 0x4c
 8005b76:	fb00 f303 	mul.w	r3, r0, r3
 8005b7a:	440b      	add	r3, r1
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d01c      	beq.n	8005bbe <Motion_Manager+0x216>
	{
		Stepper_Position_Control(hcan, cmd, id, dir, spd, acc, clk_mov_abs, true, false);
 8005b84:	7efb      	ldrb	r3, [r7, #27]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bf14      	ite	ne
 8005b8a:	2301      	movne	r3, #1
 8005b8c:	2300      	moveq	r3, #0
 8005b8e:	b2d9      	uxtb	r1, r3
 8005b90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b94:	2300      	movs	r3, #0
 8005b96:	9304      	str	r3, [sp, #16]
 8005b98:	2301      	movs	r3, #1
 8005b9a:	9303      	str	r3, [sp, #12]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	9302      	str	r3, [sp, #8]
 8005ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ba4:	9301      	str	r3, [sp, #4]
 8005ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	460b      	mov	r3, r1
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7fb fa96 	bl	80010e0 <Stepper_Position_Control>
		osDelay(DELAY_MS);
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	f007 fa54 	bl	800d062 <osDelay>
		return;
 8005bba:	e000      	b.n	8005bbe <Motion_Manager+0x216>
		return;
 8005bbc:	bf00      	nop
	}
}
 8005bbe:	372c      	adds	r7, #44	; 0x2c
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd90      	pop	{r4, r7, pc}
 8005bc4:	f3af 8000 	nop.w
 8005bc8:	cccccccd 	.word	0xcccccccd
 8005bcc:	3fbccccc 	.word	0x3fbccccc
 8005bd0:	2000016c 	.word	0x2000016c

08005bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bda:	2300      	movs	r3, #0
 8005bdc:	607b      	str	r3, [r7, #4]
 8005bde:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <HAL_MspInit+0x54>)
 8005be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be2:	4a11      	ldr	r2, [pc, #68]	; (8005c28 <HAL_MspInit+0x54>)
 8005be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005be8:	6453      	str	r3, [r2, #68]	; 0x44
 8005bea:	4b0f      	ldr	r3, [pc, #60]	; (8005c28 <HAL_MspInit+0x54>)
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf2:	607b      	str	r3, [r7, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	603b      	str	r3, [r7, #0]
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <HAL_MspInit+0x54>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	4a0a      	ldr	r2, [pc, #40]	; (8005c28 <HAL_MspInit+0x54>)
 8005c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c04:	6413      	str	r3, [r2, #64]	; 0x40
 8005c06:	4b08      	ldr	r3, [pc, #32]	; (8005c28 <HAL_MspInit+0x54>)
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c0e:	603b      	str	r3, [r7, #0]
 8005c10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005c12:	2200      	movs	r2, #0
 8005c14:	210f      	movs	r1, #15
 8005c16:	f06f 0001 	mvn.w	r0, #1
 8005c1a:	f001 fb0d 	bl	8007238 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40023800 	.word	0x40023800

08005c2c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08a      	sub	sp, #40	; 0x28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c34:	f107 0314 	add.w	r3, r7, #20
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	605a      	str	r2, [r3, #4]
 8005c3e:	609a      	str	r2, [r3, #8]
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1d      	ldr	r2, [pc, #116]	; (8005cc0 <HAL_CAN_MspInit+0x94>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d133      	bne.n	8005cb6 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005c4e:	2300      	movs	r3, #0
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <HAL_CAN_MspInit+0x98>)
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	4a1b      	ldr	r2, [pc, #108]	; (8005cc4 <HAL_CAN_MspInit+0x98>)
 8005c58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c5e:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <HAL_CAN_MspInit+0x98>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c66:	613b      	str	r3, [r7, #16]
 8005c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	4b15      	ldr	r3, [pc, #84]	; (8005cc4 <HAL_CAN_MspInit+0x98>)
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	4a14      	ldr	r2, [pc, #80]	; (8005cc4 <HAL_CAN_MspInit+0x98>)
 8005c74:	f043 0308 	orr.w	r3, r3, #8
 8005c78:	6313      	str	r3, [r2, #48]	; 0x30
 8005c7a:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <HAL_CAN_MspInit+0x98>)
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005c86:	2303      	movs	r3, #3
 8005c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c92:	2303      	movs	r3, #3
 8005c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005c96:	2309      	movs	r3, #9
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c9a:	f107 0314 	add.w	r3, r7, #20
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4809      	ldr	r0, [pc, #36]	; (8005cc8 <HAL_CAN_MspInit+0x9c>)
 8005ca2:	f001 faf3 	bl	800728c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2105      	movs	r1, #5
 8005caa:	2014      	movs	r0, #20
 8005cac:	f001 fac4 	bl	8007238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005cb0:	2014      	movs	r0, #20
 8005cb2:	f001 fadd 	bl	8007270 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005cb6:	bf00      	nop
 8005cb8:	3728      	adds	r7, #40	; 0x28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40006400 	.word	0x40006400
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	40020c00 	.word	0x40020c00

08005ccc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08c      	sub	sp, #48	; 0x30
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60bb      	str	r3, [r7, #8]
 8005ce0:	4b2f      	ldr	r3, [pc, #188]	; (8005da0 <HAL_InitTick+0xd4>)
 8005ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce4:	4a2e      	ldr	r2, [pc, #184]	; (8005da0 <HAL_InitTick+0xd4>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	6453      	str	r3, [r2, #68]	; 0x44
 8005cec:	4b2c      	ldr	r3, [pc, #176]	; (8005da0 <HAL_InitTick+0xd4>)
 8005cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	60bb      	str	r3, [r7, #8]
 8005cf6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005cf8:	f107 020c 	add.w	r2, r7, #12
 8005cfc:	f107 0310 	add.w	r3, r7, #16
 8005d00:	4611      	mov	r1, r2
 8005d02:	4618      	mov	r0, r3
 8005d04:	f003 fb64 	bl	80093d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005d08:	f003 fb4e 	bl	80093a8 <HAL_RCC_GetPCLK2Freq>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	4a23      	ldr	r2, [pc, #140]	; (8005da4 <HAL_InitTick+0xd8>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	0c9b      	lsrs	r3, r3, #18
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005d20:	4b21      	ldr	r3, [pc, #132]	; (8005da8 <HAL_InitTick+0xdc>)
 8005d22:	4a22      	ldr	r2, [pc, #136]	; (8005dac <HAL_InitTick+0xe0>)
 8005d24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005d26:	4b20      	ldr	r3, [pc, #128]	; (8005da8 <HAL_InitTick+0xdc>)
 8005d28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005d2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005d2e:	4a1e      	ldr	r2, [pc, #120]	; (8005da8 <HAL_InitTick+0xdc>)
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005d34:	4b1c      	ldr	r3, [pc, #112]	; (8005da8 <HAL_InitTick+0xdc>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d3a:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <HAL_InitTick+0xdc>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d40:	4b19      	ldr	r3, [pc, #100]	; (8005da8 <HAL_InitTick+0xdc>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005d46:	4818      	ldr	r0, [pc, #96]	; (8005da8 <HAL_InitTick+0xdc>)
 8005d48:	f003 fb74 	bl	8009434 <HAL_TIM_Base_Init>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d11b      	bne.n	8005d92 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005d5a:	4813      	ldr	r0, [pc, #76]	; (8005da8 <HAL_InitTick+0xdc>)
 8005d5c:	f003 fbc4 	bl	80094e8 <HAL_TIM_Base_Start_IT>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d111      	bne.n	8005d92 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005d6e:	2019      	movs	r0, #25
 8005d70:	f001 fa7e 	bl	8007270 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b0f      	cmp	r3, #15
 8005d78:	d808      	bhi.n	8005d8c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	2019      	movs	r0, #25
 8005d80:	f001 fa5a 	bl	8007238 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d84:	4a0a      	ldr	r2, [pc, #40]	; (8005db0 <HAL_InitTick+0xe4>)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	e002      	b.n	8005d92 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3730      	adds	r7, #48	; 0x30
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	40023800 	.word	0x40023800
 8005da4:	431bde83 	.word	0x431bde83
 8005da8:	2000077c 	.word	0x2000077c
 8005dac:	40010000 	.word	0x40010000
 8005db0:	20000004 	.word	0x20000004

08005db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005db8:	e7fe      	b.n	8005db8 <NMI_Handler+0x4>

08005dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dbe:	e7fe      	b.n	8005dbe <HardFault_Handler+0x4>

08005dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005dc4:	e7fe      	b.n	8005dc4 <MemManage_Handler+0x4>

08005dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005dca:	e7fe      	b.n	8005dca <BusFault_Handler+0x4>

08005dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005dd0:	e7fe      	b.n	8005dd0 <UsageFault_Handler+0x4>

08005dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005dd6:	bf00      	nop
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005de4:	4802      	ldr	r0, [pc, #8]	; (8005df0 <CAN1_RX0_IRQHandler+0x10>)
 8005de6:	f000 ff3f 	bl	8006c68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005dea:	bf00      	nop
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	20000750 	.word	0x20000750

08005df4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005df8:	4802      	ldr	r0, [pc, #8]	; (8005e04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005dfa:	f003 fbe5 	bl	80095c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005dfe:	bf00      	nop
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	2000077c 	.word	0x2000077c

08005e08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005e0c:	4802      	ldr	r0, [pc, #8]	; (8005e18 <OTG_FS_IRQHandler+0x10>)
 8005e0e:	f001 fd4e 	bl	80078ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005e12:	bf00      	nop
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	200059fc 	.word	0x200059fc

08005e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <SystemInit+0x20>)
 8005e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e26:	4a05      	ldr	r2, [pc, #20]	; (8005e3c <SystemInit+0x20>)
 8005e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e30:	bf00      	nop
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	e000ed00 	.word	0xe000ed00

08005e40 <degree_to_radian>:
 *      Author: kylem
 */
#include "transform.h"

float degree_to_radian(float degree)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	ed87 0a01 	vstr	s0, [r7, #4]
	return degree * (M_PI / 180);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fa fb24 	bl	8000498 <__aeabi_f2d>
 8005e50:	a309      	add	r3, pc, #36	; (adr r3, 8005e78 <degree_to_radian+0x38>)
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	f7fa fb77 	bl	8000548 <__aeabi_dmul>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4610      	mov	r0, r2
 8005e60:	4619      	mov	r1, r3
 8005e62:	f7fa fe33 	bl	8000acc <__aeabi_d2f>
 8005e66:	4603      	mov	r3, r0
 8005e68:	ee07 3a90 	vmov	s15, r3
}
 8005e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	a2529d39 	.word	0xa2529d39
 8005e7c:	3f91df46 	.word	0x3f91df46

08005e80 <radian_to_degree>:
float radian_to_degree(float radian)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	ed87 0a01 	vstr	s0, [r7, #4]
	return radian / (M_PI / 180);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fa fb04 	bl	8000498 <__aeabi_f2d>
 8005e90:	a309      	add	r3, pc, #36	; (adr r3, 8005eb8 <radian_to_degree+0x38>)
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	f7fa fc81 	bl	800079c <__aeabi_ddiv>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	f7fa fe13 	bl	8000acc <__aeabi_d2f>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	ee07 3a90 	vmov	s15, r3
}
 8005eac:	eeb0 0a67 	vmov.f32	s0, s15
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	a2529d39 	.word	0xa2529d39
 8005ebc:	3f91df46 	.word	0x3f91df46

08005ec0 <T_init>:

void T_init(float T[4][4])
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
	Mat4x4_I(T);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7fe fdea 	bl	8004aa2 <Mat4x4_I>
}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <T_to_R_and_t>:
	T[0][3] = t[0];
	T[1][3] = t[1];
	T[2][3] = t[2];
}
void T_to_R_and_t(float T[4][4], float R[3][3], float t[3])
{
 8005ed6:	b490      	push	{r4, r7}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
	uint8_t row = 3;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	757b      	strb	r3, [r7, #21]
	uint8_t col = 3;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	753b      	strb	r3, [r7, #20]
	for(uint8_t r = 0; r < row; r++)
 8005eea:	2300      	movs	r3, #0
 8005eec:	75fb      	strb	r3, [r7, #23]
 8005eee:	e020      	b.n	8005f32 <T_to_R_and_t+0x5c>
	{
		for(uint8_t c = 0; c < col; c++)
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	75bb      	strb	r3, [r7, #22]
 8005ef4:	e016      	b.n	8005f24 <T_to_R_and_t+0x4e>
		{
			R[r][c] = T[r][c];
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	18d0      	adds	r0, r2, r3
 8005efe:	7dbc      	ldrb	r4, [r7, #22]
 8005f00:	7dfa      	ldrb	r2, [r7, #23]
 8005f02:	4613      	mov	r3, r2
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	1899      	adds	r1, r3, r2
 8005f10:	7dbb      	ldrb	r3, [r7, #22]
 8005f12:	00a2      	lsls	r2, r4, #2
 8005f14:	4402      	add	r2, r0
 8005f16:	6812      	ldr	r2, [r2, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	601a      	str	r2, [r3, #0]
		for(uint8_t c = 0; c < col; c++)
 8005f1e:	7dbb      	ldrb	r3, [r7, #22]
 8005f20:	3301      	adds	r3, #1
 8005f22:	75bb      	strb	r3, [r7, #22]
 8005f24:	7dba      	ldrb	r2, [r7, #22]
 8005f26:	7d3b      	ldrb	r3, [r7, #20]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d3e4      	bcc.n	8005ef6 <T_to_R_and_t+0x20>
	for(uint8_t r = 0; r < row; r++)
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	75fb      	strb	r3, [r7, #23]
 8005f32:	7dfa      	ldrb	r2, [r7, #23]
 8005f34:	7d7b      	ldrb	r3, [r7, #21]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d3da      	bcc.n	8005ef0 <T_to_R_and_t+0x1a>
		}
	}
	t[0] = T[0][3];
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	601a      	str	r2, [r3, #0]
	t[1] = T[1][3];
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f103 0210 	add.w	r2, r3, #16
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	68d2      	ldr	r2, [r2, #12]
 8005f4e:	601a      	str	r2, [r3, #0]
	t[2] = T[2][3];
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f103 0220 	add.w	r2, r3, #32
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3308      	adds	r3, #8
 8005f5a:	68d2      	ldr	r2, [r2, #12]
 8005f5c:	601a      	str	r2, [r3, #0]
}
 8005f5e:	bf00      	nop
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc90      	pop	{r4, r7}
 8005f66:	4770      	bx	lr

08005f68 <rotate_x>:

void rotate_x(float T[4][4], float degree)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b0a4      	sub	sp, #144	; 0x90
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	ed87 0a00 	vstr	s0, [r7]
	float ans[4][4];
	float T_rx[4][4];
	float radian = degree_to_radian(degree);
 8005f74:	ed97 0a00 	vldr	s0, [r7]
 8005f78:	f7ff ff62 	bl	8005e40 <degree_to_radian>
 8005f7c:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
	T_init(T_rx);
 8005f80:	f107 030c 	add.w	r3, r7, #12
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff ff9b 	bl	8005ec0 <T_init>

	T_rx[1][1] = cosf(radian);
 8005f8a:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8005f8e:	f009 f8fd 	bl	800f18c <cosf>
 8005f92:	eef0 7a40 	vmov.f32	s15, s0
 8005f96:	edc7 7a08 	vstr	s15, [r7, #32]
	T_rx[1][2] = -sinf(radian);
 8005f9a:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8005f9e:	f009 f941 	bl	800f224 <sinf>
 8005fa2:	eef0 7a40 	vmov.f32	s15, s0
 8005fa6:	eef1 7a67 	vneg.f32	s15, s15
 8005faa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	T_rx[2][1] = sinf(radian);
 8005fae:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8005fb2:	f009 f937 	bl	800f224 <sinf>
 8005fb6:	eef0 7a40 	vmov.f32	s15, s0
 8005fba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	T_rx[2][2] = cosf(radian);
 8005fbe:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8005fc2:	f009 f8e3 	bl	800f18c <cosf>
 8005fc6:	eef0 7a40 	vmov.f32	s15, s0
 8005fca:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	Mat4x4_Mul(T_rx, T, ans);
 8005fce:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005fd2:	f107 030c 	add.w	r3, r7, #12
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fe fcc8 	bl	800496e <Mat4x4_Mul>
	Mat4x4_Copy(ans, T);
 8005fde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fe fd7e 	bl	8004ae6 <Mat4x4_Copy>
}
 8005fea:	bf00      	nop
 8005fec:	3790      	adds	r7, #144	; 0x90
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <rotate_y>:
void rotate_y(float T[4][4], float degree)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b0a4      	sub	sp, #144	; 0x90
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	ed87 0a00 	vstr	s0, [r7]
	float ans[4][4];
	float T_ry[4][4];
	float radian = degree_to_radian(degree);
 8005ffe:	ed97 0a00 	vldr	s0, [r7]
 8006002:	f7ff ff1d 	bl	8005e40 <degree_to_radian>
 8006006:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
	T_init(T_ry);
 800600a:	f107 030c 	add.w	r3, r7, #12
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff ff56 	bl	8005ec0 <T_init>

	T_ry[0][0] = cosf(radian);
 8006014:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8006018:	f009 f8b8 	bl	800f18c <cosf>
 800601c:	eef0 7a40 	vmov.f32	s15, s0
 8006020:	edc7 7a03 	vstr	s15, [r7, #12]
	T_ry[0][2] = sinf(radian);
 8006024:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8006028:	f009 f8fc 	bl	800f224 <sinf>
 800602c:	eef0 7a40 	vmov.f32	s15, s0
 8006030:	edc7 7a05 	vstr	s15, [r7, #20]
	T_ry[2][0] = -sinf(radian);
 8006034:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8006038:	f009 f8f4 	bl	800f224 <sinf>
 800603c:	eef0 7a40 	vmov.f32	s15, s0
 8006040:	eef1 7a67 	vneg.f32	s15, s15
 8006044:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	T_ry[2][2] = cosf(radian);
 8006048:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 800604c:	f009 f89e 	bl	800f18c <cosf>
 8006050:	eef0 7a40 	vmov.f32	s15, s0
 8006054:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	Mat4x4_Mul(T_ry, T, ans);
 8006058:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800605c:	f107 030c 	add.w	r3, r7, #12
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fc83 	bl	800496e <Mat4x4_Mul>
	Mat4x4_Copy(ans, T);
 8006068:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe fd39 	bl	8004ae6 <Mat4x4_Copy>
}
 8006074:	bf00      	nop
 8006076:	3790      	adds	r7, #144	; 0x90
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <rotate_z>:
void rotate_z(float T[4][4], float degree)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b0a4      	sub	sp, #144	; 0x90
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	ed87 0a00 	vstr	s0, [r7]
	float ans[4][4];
	float T_rz[4][4];
	float radian = degree_to_radian(degree);
 8006088:	ed97 0a00 	vldr	s0, [r7]
 800608c:	f7ff fed8 	bl	8005e40 <degree_to_radian>
 8006090:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
	T_init(T_rz);
 8006094:	f107 030c 	add.w	r3, r7, #12
 8006098:	4618      	mov	r0, r3
 800609a:	f7ff ff11 	bl	8005ec0 <T_init>

	T_rz[0][0] = cosf(radian);
 800609e:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 80060a2:	f009 f873 	bl	800f18c <cosf>
 80060a6:	eef0 7a40 	vmov.f32	s15, s0
 80060aa:	edc7 7a03 	vstr	s15, [r7, #12]
	T_rz[0][1] = -sinf(radian);
 80060ae:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 80060b2:	f009 f8b7 	bl	800f224 <sinf>
 80060b6:	eef0 7a40 	vmov.f32	s15, s0
 80060ba:	eef1 7a67 	vneg.f32	s15, s15
 80060be:	edc7 7a04 	vstr	s15, [r7, #16]
	T_rz[1][0] = sinf(radian);
 80060c2:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 80060c6:	f009 f8ad 	bl	800f224 <sinf>
 80060ca:	eef0 7a40 	vmov.f32	s15, s0
 80060ce:	edc7 7a07 	vstr	s15, [r7, #28]
	T_rz[1][1] = cosf(radian);
 80060d2:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 80060d6:	f009 f859 	bl	800f18c <cosf>
 80060da:	eef0 7a40 	vmov.f32	s15, s0
 80060de:	edc7 7a08 	vstr	s15, [r7, #32]

	Mat4x4_Mul(T_rz, T, ans);
 80060e2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80060e6:	f107 030c 	add.w	r3, r7, #12
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fe fc3e 	bl	800496e <Mat4x4_Mul>
	Mat4x4_Copy(ans, T);
 80060f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe fcf4 	bl	8004ae6 <Mat4x4_Copy>
}
 80060fe:	bf00      	nop
 8006100:	3790      	adds	r7, #144	; 0x90
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <translate>:
void translate(float T[4][4], float x, float y, float z)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b0a4      	sub	sp, #144	; 0x90
 800610a:	af00      	add	r7, sp, #0
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	ed87 0a02 	vstr	s0, [r7, #8]
 8006112:	edc7 0a01 	vstr	s1, [r7, #4]
 8006116:	ed87 1a00 	vstr	s2, [r7]
	float ans[4][4];
	float T_t[4][4];
	T_init(T_t);
 800611a:	f107 0310 	add.w	r3, r7, #16
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff fece 	bl	8005ec0 <T_init>

	T_t[0][3] = x;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	61fb      	str	r3, [r7, #28]
	T_t[1][3] = y;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
	T_t[2][3] = z;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	63fb      	str	r3, [r7, #60]	; 0x3c

	Mat4x4_Mul(T_t, T, ans);
 8006130:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006134:	f107 0310 	add.w	r3, r7, #16
 8006138:	68f9      	ldr	r1, [r7, #12]
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe fc17 	bl	800496e <Mat4x4_Mul>
	Mat4x4_Copy(ans, T);
 8006140:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006144:	68f9      	ldr	r1, [r7, #12]
 8006146:	4618      	mov	r0, r3
 8006148:	f7fe fccd 	bl	8004ae6 <Mat4x4_Copy>
}
 800614c:	bf00      	nop
 800614e:	3790      	adds	r7, #144	; 0x90
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <pose_to_translation_matrix>:
void pose_to_translation_matrix(float pos[3], float rot[3], float T[4][4])
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
	T_init(T);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff fead 	bl	8005ec0 <T_init>
	rotate_x(T, rot[0]);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	edd3 7a00 	vldr	s15, [r3]
 800616c:	eeb0 0a67 	vmov.f32	s0, s15
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff fef9 	bl	8005f68 <rotate_x>
	rotate_y(T, rot[1]);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	3304      	adds	r3, #4
 800617a:	edd3 7a00 	vldr	s15, [r3]
 800617e:	eeb0 0a67 	vmov.f32	s0, s15
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff ff35 	bl	8005ff2 <rotate_y>
	rotate_z(T, rot[2]);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	3308      	adds	r3, #8
 800618c:	edd3 7a00 	vldr	s15, [r3]
 8006190:	eeb0 0a67 	vmov.f32	s0, s15
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff ff71 	bl	800607c <rotate_z>
	T[0][3] = pos[0];
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60da      	str	r2, [r3, #12]
	T[1][3] = pos[1];
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3310      	adds	r3, #16
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	6852      	ldr	r2, [r2, #4]
 80061aa:	60da      	str	r2, [r3, #12]
	T[2][3] = pos[2];
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3320      	adds	r3, #32
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	6892      	ldr	r2, [r2, #8]
 80061b4:	60da      	str	r2, [r3, #12]
}
 80061b6:	bf00      	nop
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <translation_matrix_to_pose>:
void translation_matrix_to_pose(float T[4][4], float pos[3], float rot[3])
{
 80061be:	b590      	push	{r4, r7, lr}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	607a      	str	r2, [r7, #4]
	pos[0] = T[0][3];
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	601a      	str	r2, [r3, #0]
	pos[1] = T[1][3];
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f103 0210 	add.w	r2, r3, #16
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	3304      	adds	r3, #4
 80061dc:	68d2      	ldr	r2, [r2, #12]
 80061de:	601a      	str	r2, [r3, #0]
	pos[2] = T[2][3];
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f103 0220 	add.w	r2, r3, #32
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	3308      	adds	r3, #8
 80061ea:	68d2      	ldr	r2, [r2, #12]
 80061ec:	601a      	str	r2, [r3, #0]
	rot[0] = radian_to_degree(atan2f(T[2][1], T[2][2]));
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3320      	adds	r3, #32
 80061f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3320      	adds	r3, #32
 80061fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80061fe:	eef0 0a47 	vmov.f32	s1, s14
 8006202:	eeb0 0a67 	vmov.f32	s0, s15
 8006206:	f008 ffa1 	bl	800f14c <atan2f>
 800620a:	eef0 7a40 	vmov.f32	s15, s0
 800620e:	eeb0 0a67 	vmov.f32	s0, s15
 8006212:	f7ff fe35 	bl	8005e80 <radian_to_degree>
 8006216:	eef0 7a40 	vmov.f32	s15, s0
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	edc3 7a00 	vstr	s15, [r3]
	rot[1] = radian_to_degree(asinf(-T[2][0]));
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3320      	adds	r3, #32
 8006224:	edd3 7a00 	vldr	s15, [r3]
 8006228:	eef1 7a67 	vneg.f32	s15, s15
 800622c:	eeb0 0a67 	vmov.f32	s0, s15
 8006230:	f008 ff60 	bl	800f0f4 <asinf>
 8006234:	eef0 7a40 	vmov.f32	s15, s0
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	1d1c      	adds	r4, r3, #4
 800623c:	eeb0 0a67 	vmov.f32	s0, s15
 8006240:	f7ff fe1e 	bl	8005e80 <radian_to_degree>
 8006244:	eef0 7a40 	vmov.f32	s15, s0
 8006248:	edc4 7a00 	vstr	s15, [r4]
	rot[2] = radian_to_degree(atan2f(T[1][0], T[0][0]));
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3310      	adds	r3, #16
 8006250:	edd3 7a00 	vldr	s15, [r3]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	ed93 7a00 	vldr	s14, [r3]
 800625a:	eef0 0a47 	vmov.f32	s1, s14
 800625e:	eeb0 0a67 	vmov.f32	s0, s15
 8006262:	f008 ff73 	bl	800f14c <atan2f>
 8006266:	eef0 7a40 	vmov.f32	s15, s0
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f103 0408 	add.w	r4, r3, #8
 8006270:	eeb0 0a67 	vmov.f32	s0, s15
 8006274:	f7ff fe04 	bl	8005e80 <radian_to_degree>
 8006278:	eef0 7a40 	vmov.f32	s15, s0
 800627c:	edc4 7a00 	vstr	s15, [r4]
}
 8006280:	bf00      	nop
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	bd90      	pop	{r4, r7, pc}

08006288 <DH_Parser>:

void DH_Parser(float d, float theta, float r, float alpha, float T[4][4])
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	ed87 0a05 	vstr	s0, [r7, #20]
 8006292:	edc7 0a04 	vstr	s1, [r7, #16]
 8006296:	ed87 1a03 	vstr	s2, [r7, #12]
 800629a:	edc7 1a02 	vstr	s3, [r7, #8]
 800629e:	6078      	str	r0, [r7, #4]
	T_init(T);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff fe0d 	bl	8005ec0 <T_init>
	rotate_x(T, alpha);
 80062a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff fe5c 	bl	8005f68 <rotate_x>
	translate(T, r, 0, d);
 80062b0:	ed97 1a05 	vldr	s2, [r7, #20]
 80062b4:	eddf 0a07 	vldr	s1, [pc, #28]	; 80062d4 <DH_Parser+0x4c>
 80062b8:	ed97 0a03 	vldr	s0, [r7, #12]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff ff22 	bl	8006106 <translate>
	rotate_z(T, theta);
 80062c2:	ed97 0a04 	vldr	s0, [r7, #16]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff fed8 	bl	800607c <rotate_z>
}
 80062cc:	bf00      	nop
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	00000000 	.word	0x00000000

080062d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80062d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006310 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80062dc:	f7ff fd9e 	bl	8005e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80062e0:	480c      	ldr	r0, [pc, #48]	; (8006314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80062e2:	490d      	ldr	r1, [pc, #52]	; (8006318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80062e4:	4a0d      	ldr	r2, [pc, #52]	; (800631c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80062e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062e8:	e002      	b.n	80062f0 <LoopCopyDataInit>

080062ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062ee:	3304      	adds	r3, #4

080062f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062f4:	d3f9      	bcc.n	80062ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062f6:	4a0a      	ldr	r2, [pc, #40]	; (8006320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80062f8:	4c0a      	ldr	r4, [pc, #40]	; (8006324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80062fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062fc:	e001      	b.n	8006302 <LoopFillZerobss>

080062fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006300:	3204      	adds	r2, #4

08006302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006304:	d3fb      	bcc.n	80062fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006306:	f008 fe4b 	bl	800efa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800630a:	f7fe f851 	bl	80043b0 <main>
  bx  lr    
 800630e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006318:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 800631c:	08010804 	.word	0x08010804
  ldr r2, =_sbss
 8006320:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8006324:	20006240 	.word	0x20006240

08006328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006328:	e7fe      	b.n	8006328 <ADC_IRQHandler>
	...

0800632c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006330:	4b0e      	ldr	r3, [pc, #56]	; (800636c <HAL_Init+0x40>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a0d      	ldr	r2, [pc, #52]	; (800636c <HAL_Init+0x40>)
 8006336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800633a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <HAL_Init+0x40>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a0a      	ldr	r2, [pc, #40]	; (800636c <HAL_Init+0x40>)
 8006342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006346:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006348:	4b08      	ldr	r3, [pc, #32]	; (800636c <HAL_Init+0x40>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a07      	ldr	r2, [pc, #28]	; (800636c <HAL_Init+0x40>)
 800634e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006354:	2003      	movs	r0, #3
 8006356:	f000 ff64 	bl	8007222 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800635a:	200f      	movs	r0, #15
 800635c:	f7ff fcb6 	bl	8005ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006360:	f7ff fc38 	bl	8005bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	40023c00 	.word	0x40023c00

08006370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006374:	4b06      	ldr	r3, [pc, #24]	; (8006390 <HAL_IncTick+0x20>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	4b06      	ldr	r3, [pc, #24]	; (8006394 <HAL_IncTick+0x24>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4413      	add	r3, r2
 8006380:	4a04      	ldr	r2, [pc, #16]	; (8006394 <HAL_IncTick+0x24>)
 8006382:	6013      	str	r3, [r2, #0]
}
 8006384:	bf00      	nop
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	20000008 	.word	0x20000008
 8006394:	200007c4 	.word	0x200007c4

08006398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
  return uwTick;
 800639c:	4b03      	ldr	r3, [pc, #12]	; (80063ac <HAL_GetTick+0x14>)
 800639e:	681b      	ldr	r3, [r3, #0]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	200007c4 	.word	0x200007c4

080063b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80063b8:	f7ff ffee 	bl	8006398 <HAL_GetTick>
 80063bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c8:	d005      	beq.n	80063d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80063ca:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <HAL_Delay+0x44>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80063d6:	bf00      	nop
 80063d8:	f7ff ffde 	bl	8006398 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d8f7      	bhi.n	80063d8 <HAL_Delay+0x28>
  {
  }
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20000008 	.word	0x20000008

080063f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e0ed      	b.n	80065e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d102      	bne.n	800641c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff fc08 	bl	8005c2c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800642c:	f7ff ffb4 	bl	8006398 <HAL_GetTick>
 8006430:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006432:	e012      	b.n	800645a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006434:	f7ff ffb0 	bl	8006398 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b0a      	cmp	r3, #10
 8006440:	d90b      	bls.n	800645a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2205      	movs	r2, #5
 8006452:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e0c5      	b.n	80065e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0e5      	beq.n	8006434 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0202 	bic.w	r2, r2, #2
 8006476:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006478:	f7ff ff8e 	bl	8006398 <HAL_GetTick>
 800647c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800647e:	e012      	b.n	80064a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006480:	f7ff ff8a 	bl	8006398 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b0a      	cmp	r3, #10
 800648c:	d90b      	bls.n	80064a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2205      	movs	r2, #5
 800649e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e09f      	b.n	80065e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e5      	bne.n	8006480 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	7e1b      	ldrb	r3, [r3, #24]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d108      	bne.n	80064ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	e007      	b.n	80064de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	7e5b      	ldrb	r3, [r3, #25]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d108      	bne.n	80064f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	e007      	b.n	8006508 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006506:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	7e9b      	ldrb	r3, [r3, #26]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d108      	bne.n	8006522 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0220 	orr.w	r2, r2, #32
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	e007      	b.n	8006532 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0220 	bic.w	r2, r2, #32
 8006530:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	7edb      	ldrb	r3, [r3, #27]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d108      	bne.n	800654c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0210 	bic.w	r2, r2, #16
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e007      	b.n	800655c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0210 	orr.w	r2, r2, #16
 800655a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	7f1b      	ldrb	r3, [r3, #28]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d108      	bne.n	8006576 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0208 	orr.w	r2, r2, #8
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e007      	b.n	8006586 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0208 	bic.w	r2, r2, #8
 8006584:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	7f5b      	ldrb	r3, [r3, #29]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d108      	bne.n	80065a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0204 	orr.w	r2, r2, #4
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	e007      	b.n	80065b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0204 	bic.w	r2, r2, #4
 80065ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	431a      	orrs	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	ea42 0103 	orr.w	r1, r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	1e5a      	subs	r2, r3, #1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006606:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006608:	7cfb      	ldrb	r3, [r7, #19]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d003      	beq.n	8006616 <HAL_CAN_ConfigFilter+0x26>
 800660e:	7cfb      	ldrb	r3, [r7, #19]
 8006610:	2b02      	cmp	r3, #2
 8006612:	f040 80be 	bne.w	8006792 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006616:	4b65      	ldr	r3, [pc, #404]	; (80067ac <HAL_CAN_ConfigFilter+0x1bc>)
 8006618:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006620:	f043 0201 	orr.w	r2, r3, #1
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006630:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	431a      	orrs	r2, r3
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	2201      	movs	r2, #1
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	43db      	mvns	r3, r3
 8006668:	401a      	ands	r2, r3
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d123      	bne.n	80066c0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	43db      	mvns	r3, r3
 8006682:	401a      	ands	r2, r3
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800669a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	3248      	adds	r2, #72	; 0x48
 80066a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80066b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80066b6:	6979      	ldr	r1, [r7, #20]
 80066b8:	3348      	adds	r3, #72	; 0x48
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	440b      	add	r3, r1
 80066be:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d122      	bne.n	800670e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	431a      	orrs	r2, r3
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80066e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	3248      	adds	r2, #72	; 0x48
 80066ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006702:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006704:	6979      	ldr	r1, [r7, #20]
 8006706:	3348      	adds	r3, #72	; 0x48
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	440b      	add	r3, r1
 800670c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	43db      	mvns	r3, r3
 8006720:	401a      	ands	r2, r3
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006728:	e007      	b.n	800673a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	431a      	orrs	r2, r3
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d109      	bne.n	8006756 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	43db      	mvns	r3, r3
 800674c:	401a      	ands	r2, r3
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006754:	e007      	b.n	8006766 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	431a      	orrs	r2, r3
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d107      	bne.n	800677e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	431a      	orrs	r2, r3
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006784:	f023 0201 	bic.w	r2, r3, #1
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	e006      	b.n	80067a0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
  }
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	40006400 	.word	0x40006400

080067b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d12e      	bne.n	8006822 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0201 	bic.w	r2, r2, #1
 80067da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067dc:	f7ff fddc 	bl	8006398 <HAL_GetTick>
 80067e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80067e2:	e012      	b.n	800680a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80067e4:	f7ff fdd8 	bl	8006398 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b0a      	cmp	r3, #10
 80067f0:	d90b      	bls.n	800680a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2205      	movs	r2, #5
 8006802:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e012      	b.n	8006830 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1e5      	bne.n	80067e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	e006      	b.n	8006830 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
  }
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006838:	b480      	push	{r7}
 800683a:	b089      	sub	sp, #36	; 0x24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800684c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006856:	7ffb      	ldrb	r3, [r7, #31]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d003      	beq.n	8006864 <HAL_CAN_AddTxMessage+0x2c>
 800685c:	7ffb      	ldrb	r3, [r7, #31]
 800685e:	2b02      	cmp	r3, #2
 8006860:	f040 80ad 	bne.w	80069be <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10a      	bne.n	8006884 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006874:	2b00      	cmp	r3, #0
 8006876:	d105      	bne.n	8006884 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 8095 	beq.w	80069ae <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	0e1b      	lsrs	r3, r3, #24
 8006888:	f003 0303 	and.w	r3, r3, #3
 800688c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800688e:	2201      	movs	r2, #1
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	409a      	lsls	r2, r3
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10d      	bne.n	80068bc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	6809      	ldr	r1, [r1, #0]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	3318      	adds	r3, #24
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	440b      	add	r3, r1
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	e00f      	b.n	80068dc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80068c6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80068cc:	68f9      	ldr	r1, [r7, #12]
 80068ce:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80068d0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	3318      	adds	r3, #24
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	440b      	add	r3, r1
 80068da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6819      	ldr	r1, [r3, #0]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	3318      	adds	r3, #24
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	440b      	add	r3, r1
 80068ec:	3304      	adds	r3, #4
 80068ee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	7d1b      	ldrb	r3, [r3, #20]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d111      	bne.n	800691c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	3318      	adds	r3, #24
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	4413      	add	r3, r2
 8006904:	3304      	adds	r3, #4
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	6811      	ldr	r1, [r2, #0]
 800690c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	3318      	adds	r3, #24
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	440b      	add	r3, r1
 8006918:	3304      	adds	r3, #4
 800691a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3307      	adds	r3, #7
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	061a      	lsls	r2, r3, #24
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3306      	adds	r3, #6
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	041b      	lsls	r3, r3, #16
 800692c:	431a      	orrs	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	3305      	adds	r3, #5
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	4313      	orrs	r3, r2
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	3204      	adds	r2, #4
 800693c:	7812      	ldrb	r2, [r2, #0]
 800693e:	4610      	mov	r0, r2
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	6811      	ldr	r1, [r2, #0]
 8006944:	ea43 0200 	orr.w	r2, r3, r0
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	440b      	add	r3, r1
 800694e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006952:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3303      	adds	r3, #3
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	061a      	lsls	r2, r3, #24
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3302      	adds	r3, #2
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	041b      	lsls	r3, r3, #16
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	3301      	adds	r3, #1
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	021b      	lsls	r3, r3, #8
 800696e:	4313      	orrs	r3, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	7812      	ldrb	r2, [r2, #0]
 8006974:	4610      	mov	r0, r2
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	6811      	ldr	r1, [r2, #0]
 800697a:	ea43 0200 	orr.w	r2, r3, r0
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	440b      	add	r3, r1
 8006984:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006988:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	3318      	adds	r3, #24
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	4413      	add	r3, r2
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	6811      	ldr	r1, [r2, #0]
 800699c:	f043 0201 	orr.w	r2, r3, #1
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	3318      	adds	r3, #24
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	440b      	add	r3, r1
 80069a8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	e00e      	b.n	80069cc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e006      	b.n	80069cc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
  }
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3724      	adds	r7, #36	; 0x24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069ec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d003      	beq.n	80069fc <HAL_CAN_GetRxMessage+0x24>
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	f040 8103 	bne.w	8006c02 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10e      	bne.n	8006a20 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d116      	bne.n	8006a3e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0f7      	b.n	8006c10 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d107      	bne.n	8006a3e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e0e8      	b.n	8006c10 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	331b      	adds	r3, #27
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	4413      	add	r3, r2
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0204 	and.w	r2, r3, #4
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10c      	bne.n	8006a76 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	331b      	adds	r3, #27
 8006a64:	011b      	lsls	r3, r3, #4
 8006a66:	4413      	add	r3, r2
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	0d5b      	lsrs	r3, r3, #21
 8006a6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e00b      	b.n	8006a8e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	331b      	adds	r3, #27
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	4413      	add	r3, r2
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	08db      	lsrs	r3, r3, #3
 8006a86:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	331b      	adds	r3, #27
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	4413      	add	r3, r2
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0202 	and.w	r2, r3, #2
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	331b      	adds	r3, #27
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	4413      	add	r3, r2
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2208      	movs	r2, #8
 8006ac0:	611a      	str	r2, [r3, #16]
 8006ac2:	e00b      	b.n	8006adc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	331b      	adds	r3, #27
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	4413      	add	r3, r2
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 020f 	and.w	r2, r3, #15
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	331b      	adds	r3, #27
 8006ae4:	011b      	lsls	r3, r3, #4
 8006ae6:	4413      	add	r3, r2
 8006ae8:	3304      	adds	r3, #4
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	0a1b      	lsrs	r3, r3, #8
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	331b      	adds	r3, #27
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	4413      	add	r3, r2
 8006b00:	3304      	adds	r3, #4
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	0c1b      	lsrs	r3, r3, #16
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	011b      	lsls	r3, r3, #4
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	0a1a      	lsrs	r2, r3, #8
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	3301      	adds	r3, #1
 8006b38:	b2d2      	uxtb	r2, r2
 8006b3a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	0c1a      	lsrs	r2, r3, #16
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	3302      	adds	r3, #2
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	0e1a      	lsrs	r2, r3, #24
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	3303      	adds	r3, #3
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	3304      	adds	r3, #4
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	0a1a      	lsrs	r2, r3, #8
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	3305      	adds	r3, #5
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	0c1a      	lsrs	r2, r3, #16
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	3306      	adds	r3, #6
 8006bb8:	b2d2      	uxtb	r2, r2
 8006bba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	0e1a      	lsrs	r2, r3, #24
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	3307      	adds	r3, #7
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d108      	bne.n	8006bee <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0220 	orr.w	r2, r2, #32
 8006bea:	60da      	str	r2, [r3, #12]
 8006bec:	e007      	b.n	8006bfe <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0220 	orr.w	r2, r2, #32
 8006bfc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	e006      	b.n	8006c10 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
  }
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c2c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d002      	beq.n	8006c3a <HAL_CAN_ActivateNotification+0x1e>
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d109      	bne.n	8006c4e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6959      	ldr	r1, [r3, #20]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e006      	b.n	8006c5c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
  }
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08a      	sub	sp, #40	; 0x28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d07c      	beq.n	8006da8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d023      	beq.n	8006d00 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f983 	bl	8006fd6 <HAL_CAN_TxMailbox0CompleteCallback>
 8006cd0:	e016      	b.n	8006d00 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d004      	beq.n	8006ce6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce4:	e00c      	b.n	8006d00 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	f003 0308 	and.w	r3, r3, #8
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf8:	e002      	b.n	8006d00 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f989 	bl	8007012 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d024      	beq.n	8006d54 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f963 	bl	8006fea <HAL_CAN_TxMailbox1CompleteCallback>
 8006d24:	e016      	b.n	8006d54 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d004      	beq.n	8006d3a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
 8006d38:	e00c      	b.n	8006d54 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d004      	beq.n	8006d4e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d4c:	e002      	b.n	8006d54 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f969 	bl	8007026 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d024      	beq.n	8006da8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006d66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f943 	bl	8006ffe <HAL_CAN_TxMailbox2CompleteCallback>
 8006d78:	e016      	b.n	8006da8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d8c:	e00c      	b.n	8006da8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d004      	beq.n	8006da2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006da0:	e002      	b.n	8006da8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f949 	bl	800703a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00c      	beq.n	8006dcc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f003 0310 	and.w	r3, r3, #16
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d007      	beq.n	8006dcc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2210      	movs	r2, #16
 8006dca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00b      	beq.n	8006dee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f003 0308 	and.w	r3, r3, #8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d006      	beq.n	8006dee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2208      	movs	r2, #8
 8006de6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f930 	bl	800704e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d009      	beq.n	8006e0c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fd fd20 	bl	800484c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00c      	beq.n	8006e30 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f003 0310 	and.w	r3, r3, #16
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d007      	beq.n	8006e30 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2210      	movs	r2, #16
 8006e2e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d006      	beq.n	8006e52 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2208      	movs	r2, #8
 8006e4a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f912 	bl	8007076 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d009      	beq.n	8006e70 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f8f9 	bl	8007062 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00b      	beq.n	8006e92 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d006      	beq.n	8006e92 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2210      	movs	r2, #16
 8006e8a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f8fc 	bl	800708a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00b      	beq.n	8006eb4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d006      	beq.n	8006eb4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2208      	movs	r2, #8
 8006eac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f8f5 	bl	800709e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d07b      	beq.n	8006fb6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d072      	beq.n	8006fae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d008      	beq.n	8006ee4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	f043 0301 	orr.w	r3, r3, #1
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d008      	beq.n	8006f00 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	f043 0302 	orr.w	r3, r3, #2
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d008      	beq.n	8006f1c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	f043 0304 	orr.w	r3, r3, #4
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d043      	beq.n	8006fae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d03e      	beq.n	8006fae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f36:	2b60      	cmp	r3, #96	; 0x60
 8006f38:	d02b      	beq.n	8006f92 <HAL_CAN_IRQHandler+0x32a>
 8006f3a:	2b60      	cmp	r3, #96	; 0x60
 8006f3c:	d82e      	bhi.n	8006f9c <HAL_CAN_IRQHandler+0x334>
 8006f3e:	2b50      	cmp	r3, #80	; 0x50
 8006f40:	d022      	beq.n	8006f88 <HAL_CAN_IRQHandler+0x320>
 8006f42:	2b50      	cmp	r3, #80	; 0x50
 8006f44:	d82a      	bhi.n	8006f9c <HAL_CAN_IRQHandler+0x334>
 8006f46:	2b40      	cmp	r3, #64	; 0x40
 8006f48:	d019      	beq.n	8006f7e <HAL_CAN_IRQHandler+0x316>
 8006f4a:	2b40      	cmp	r3, #64	; 0x40
 8006f4c:	d826      	bhi.n	8006f9c <HAL_CAN_IRQHandler+0x334>
 8006f4e:	2b30      	cmp	r3, #48	; 0x30
 8006f50:	d010      	beq.n	8006f74 <HAL_CAN_IRQHandler+0x30c>
 8006f52:	2b30      	cmp	r3, #48	; 0x30
 8006f54:	d822      	bhi.n	8006f9c <HAL_CAN_IRQHandler+0x334>
 8006f56:	2b10      	cmp	r3, #16
 8006f58:	d002      	beq.n	8006f60 <HAL_CAN_IRQHandler+0x2f8>
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d005      	beq.n	8006f6a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006f5e:	e01d      	b.n	8006f9c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	f043 0308 	orr.w	r3, r3, #8
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f68:	e019      	b.n	8006f9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	f043 0310 	orr.w	r3, r3, #16
 8006f70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f72:	e014      	b.n	8006f9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	f043 0320 	orr.w	r3, r3, #32
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f7c:	e00f      	b.n	8006f9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f86:	e00a      	b.n	8006f9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f90:	e005      	b.n	8006f9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f9a:	e000      	b.n	8006f9e <HAL_CAN_IRQHandler+0x336>
            break;
 8006f9c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	699a      	ldr	r2, [r3, #24]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006fac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2204      	movs	r2, #4
 8006fb4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d008      	beq.n	8006fce <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f872 	bl	80070b2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006fce:	bf00      	nop
 8006fd0:	3728      	adds	r7, #40	; 0x28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006fde:	bf00      	nop
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b083      	sub	sp, #12
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006ff2:	bf00      	nop
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800702e:	bf00      	nop
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800706a:	bf00      	nop
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
	...

080070c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070d8:	4b0c      	ldr	r3, [pc, #48]	; (800710c <__NVIC_SetPriorityGrouping+0x44>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070e4:	4013      	ands	r3, r2
 80070e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80070f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070fa:	4a04      	ldr	r2, [pc, #16]	; (800710c <__NVIC_SetPriorityGrouping+0x44>)
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	60d3      	str	r3, [r2, #12]
}
 8007100:	bf00      	nop
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	e000ed00 	.word	0xe000ed00

08007110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007114:	4b04      	ldr	r3, [pc, #16]	; (8007128 <__NVIC_GetPriorityGrouping+0x18>)
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	0a1b      	lsrs	r3, r3, #8
 800711a:	f003 0307 	and.w	r3, r3, #7
}
 800711e:	4618      	mov	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	e000ed00 	.word	0xe000ed00

0800712c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800713a:	2b00      	cmp	r3, #0
 800713c:	db0b      	blt.n	8007156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800713e:	79fb      	ldrb	r3, [r7, #7]
 8007140:	f003 021f 	and.w	r2, r3, #31
 8007144:	4907      	ldr	r1, [pc, #28]	; (8007164 <__NVIC_EnableIRQ+0x38>)
 8007146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800714a:	095b      	lsrs	r3, r3, #5
 800714c:	2001      	movs	r0, #1
 800714e:	fa00 f202 	lsl.w	r2, r0, r2
 8007152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	e000e100 	.word	0xe000e100

08007168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	6039      	str	r1, [r7, #0]
 8007172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007178:	2b00      	cmp	r3, #0
 800717a:	db0a      	blt.n	8007192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	490c      	ldr	r1, [pc, #48]	; (80071b4 <__NVIC_SetPriority+0x4c>)
 8007182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007186:	0112      	lsls	r2, r2, #4
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	440b      	add	r3, r1
 800718c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007190:	e00a      	b.n	80071a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	b2da      	uxtb	r2, r3
 8007196:	4908      	ldr	r1, [pc, #32]	; (80071b8 <__NVIC_SetPriority+0x50>)
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	f003 030f 	and.w	r3, r3, #15
 800719e:	3b04      	subs	r3, #4
 80071a0:	0112      	lsls	r2, r2, #4
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	440b      	add	r3, r1
 80071a6:	761a      	strb	r2, [r3, #24]
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	e000e100 	.word	0xe000e100
 80071b8:	e000ed00 	.word	0xe000ed00

080071bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071bc:	b480      	push	{r7}
 80071be:	b089      	sub	sp, #36	; 0x24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	f1c3 0307 	rsb	r3, r3, #7
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	bf28      	it	cs
 80071da:	2304      	movcs	r3, #4
 80071dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	3304      	adds	r3, #4
 80071e2:	2b06      	cmp	r3, #6
 80071e4:	d902      	bls.n	80071ec <NVIC_EncodePriority+0x30>
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	3b03      	subs	r3, #3
 80071ea:	e000      	b.n	80071ee <NVIC_EncodePriority+0x32>
 80071ec:	2300      	movs	r3, #0
 80071ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071f0:	f04f 32ff 	mov.w	r2, #4294967295
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	fa02 f303 	lsl.w	r3, r2, r3
 80071fa:	43da      	mvns	r2, r3
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	401a      	ands	r2, r3
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007204:	f04f 31ff 	mov.w	r1, #4294967295
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	fa01 f303 	lsl.w	r3, r1, r3
 800720e:	43d9      	mvns	r1, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007214:	4313      	orrs	r3, r2
         );
}
 8007216:	4618      	mov	r0, r3
 8007218:	3724      	adds	r7, #36	; 0x24
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff ff4c 	bl	80070c8 <__NVIC_SetPriorityGrouping>
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007246:	2300      	movs	r3, #0
 8007248:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800724a:	f7ff ff61 	bl	8007110 <__NVIC_GetPriorityGrouping>
 800724e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	6978      	ldr	r0, [r7, #20]
 8007256:	f7ff ffb1 	bl	80071bc <NVIC_EncodePriority>
 800725a:	4602      	mov	r2, r0
 800725c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007260:	4611      	mov	r1, r2
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff ff80 	bl	8007168 <__NVIC_SetPriority>
}
 8007268:	bf00      	nop
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	4603      	mov	r3, r0
 8007278:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800727a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800727e:	4618      	mov	r0, r3
 8007280:	f7ff ff54 	bl	800712c <__NVIC_EnableIRQ>
}
 8007284:	bf00      	nop
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800728c:	b480      	push	{r7}
 800728e:	b089      	sub	sp, #36	; 0x24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800729a:	2300      	movs	r3, #0
 800729c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800729e:	2300      	movs	r3, #0
 80072a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072a2:	2300      	movs	r3, #0
 80072a4:	61fb      	str	r3, [r7, #28]
 80072a6:	e16b      	b.n	8007580 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80072a8:	2201      	movs	r2, #1
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4013      	ands	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	f040 815a 	bne.w	800757a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d005      	beq.n	80072de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d130      	bne.n	8007340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	2203      	movs	r2, #3
 80072ea:	fa02 f303 	lsl.w	r3, r2, r3
 80072ee:	43db      	mvns	r3, r3
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	4013      	ands	r3, r2
 80072f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	4313      	orrs	r3, r2
 8007306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007314:	2201      	movs	r2, #1
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	fa02 f303 	lsl.w	r3, r2, r3
 800731c:	43db      	mvns	r3, r3
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	4013      	ands	r3, r2
 8007322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	f003 0201 	and.w	r2, r3, #1
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	fa02 f303 	lsl.w	r3, r2, r3
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	4313      	orrs	r3, r2
 8007338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f003 0303 	and.w	r3, r3, #3
 8007348:	2b03      	cmp	r3, #3
 800734a:	d017      	beq.n	800737c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	2203      	movs	r2, #3
 8007358:	fa02 f303 	lsl.w	r3, r2, r3
 800735c:	43db      	mvns	r3, r3
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	4013      	ands	r3, r2
 8007362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	fa02 f303 	lsl.w	r3, r2, r3
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	4313      	orrs	r3, r2
 8007374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f003 0303 	and.w	r3, r3, #3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d123      	bne.n	80073d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	08da      	lsrs	r2, r3, #3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3208      	adds	r2, #8
 8007390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	220f      	movs	r2, #15
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	43db      	mvns	r3, r3
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	4013      	ands	r3, r2
 80073aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	4313      	orrs	r3, r2
 80073c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	08da      	lsrs	r2, r3, #3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3208      	adds	r2, #8
 80073ca:	69b9      	ldr	r1, [r7, #24]
 80073cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	005b      	lsls	r3, r3, #1
 80073da:	2203      	movs	r2, #3
 80073dc:	fa02 f303 	lsl.w	r3, r2, r3
 80073e0:	43db      	mvns	r3, r3
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	4013      	ands	r3, r2
 80073e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f003 0203 	and.w	r2, r3, #3
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 80b4 	beq.w	800757a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007412:	2300      	movs	r3, #0
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	4b60      	ldr	r3, [pc, #384]	; (8007598 <HAL_GPIO_Init+0x30c>)
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	4a5f      	ldr	r2, [pc, #380]	; (8007598 <HAL_GPIO_Init+0x30c>)
 800741c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007420:	6453      	str	r3, [r2, #68]	; 0x44
 8007422:	4b5d      	ldr	r3, [pc, #372]	; (8007598 <HAL_GPIO_Init+0x30c>)
 8007424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800742e:	4a5b      	ldr	r2, [pc, #364]	; (800759c <HAL_GPIO_Init+0x310>)
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	089b      	lsrs	r3, r3, #2
 8007434:	3302      	adds	r3, #2
 8007436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800743a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f003 0303 	and.w	r3, r3, #3
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	220f      	movs	r2, #15
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	43db      	mvns	r3, r3
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	4013      	ands	r3, r2
 8007450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a52      	ldr	r2, [pc, #328]	; (80075a0 <HAL_GPIO_Init+0x314>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d02b      	beq.n	80074b2 <HAL_GPIO_Init+0x226>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a51      	ldr	r2, [pc, #324]	; (80075a4 <HAL_GPIO_Init+0x318>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d025      	beq.n	80074ae <HAL_GPIO_Init+0x222>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a50      	ldr	r2, [pc, #320]	; (80075a8 <HAL_GPIO_Init+0x31c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d01f      	beq.n	80074aa <HAL_GPIO_Init+0x21e>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a4f      	ldr	r2, [pc, #316]	; (80075ac <HAL_GPIO_Init+0x320>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d019      	beq.n	80074a6 <HAL_GPIO_Init+0x21a>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a4e      	ldr	r2, [pc, #312]	; (80075b0 <HAL_GPIO_Init+0x324>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d013      	beq.n	80074a2 <HAL_GPIO_Init+0x216>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a4d      	ldr	r2, [pc, #308]	; (80075b4 <HAL_GPIO_Init+0x328>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00d      	beq.n	800749e <HAL_GPIO_Init+0x212>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a4c      	ldr	r2, [pc, #304]	; (80075b8 <HAL_GPIO_Init+0x32c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d007      	beq.n	800749a <HAL_GPIO_Init+0x20e>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a4b      	ldr	r2, [pc, #300]	; (80075bc <HAL_GPIO_Init+0x330>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d101      	bne.n	8007496 <HAL_GPIO_Init+0x20a>
 8007492:	2307      	movs	r3, #7
 8007494:	e00e      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 8007496:	2308      	movs	r3, #8
 8007498:	e00c      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 800749a:	2306      	movs	r3, #6
 800749c:	e00a      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 800749e:	2305      	movs	r3, #5
 80074a0:	e008      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 80074a2:	2304      	movs	r3, #4
 80074a4:	e006      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 80074a6:	2303      	movs	r3, #3
 80074a8:	e004      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 80074aa:	2302      	movs	r3, #2
 80074ac:	e002      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 80074b2:	2300      	movs	r3, #0
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	f002 0203 	and.w	r2, r2, #3
 80074ba:	0092      	lsls	r2, r2, #2
 80074bc:	4093      	lsls	r3, r2
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074c4:	4935      	ldr	r1, [pc, #212]	; (800759c <HAL_GPIO_Init+0x310>)
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	089b      	lsrs	r3, r3, #2
 80074ca:	3302      	adds	r3, #2
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074d2:	4b3b      	ldr	r3, [pc, #236]	; (80075c0 <HAL_GPIO_Init+0x334>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	43db      	mvns	r3, r3
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	4013      	ands	r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80074f6:	4a32      	ldr	r2, [pc, #200]	; (80075c0 <HAL_GPIO_Init+0x334>)
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80074fc:	4b30      	ldr	r3, [pc, #192]	; (80075c0 <HAL_GPIO_Init+0x334>)
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	43db      	mvns	r3, r3
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	4013      	ands	r3, r2
 800750a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	4313      	orrs	r3, r2
 800751e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007520:	4a27      	ldr	r2, [pc, #156]	; (80075c0 <HAL_GPIO_Init+0x334>)
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007526:	4b26      	ldr	r3, [pc, #152]	; (80075c0 <HAL_GPIO_Init+0x334>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	43db      	mvns	r3, r3
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	4013      	ands	r3, r2
 8007534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800754a:	4a1d      	ldr	r2, [pc, #116]	; (80075c0 <HAL_GPIO_Init+0x334>)
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007550:	4b1b      	ldr	r3, [pc, #108]	; (80075c0 <HAL_GPIO_Init+0x334>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	43db      	mvns	r3, r3
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	4013      	ands	r3, r2
 800755e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007574:	4a12      	ldr	r2, [pc, #72]	; (80075c0 <HAL_GPIO_Init+0x334>)
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	3301      	adds	r3, #1
 800757e:	61fb      	str	r3, [r7, #28]
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	2b0f      	cmp	r3, #15
 8007584:	f67f ae90 	bls.w	80072a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	3724      	adds	r7, #36	; 0x24
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40023800 	.word	0x40023800
 800759c:	40013800 	.word	0x40013800
 80075a0:	40020000 	.word	0x40020000
 80075a4:	40020400 	.word	0x40020400
 80075a8:	40020800 	.word	0x40020800
 80075ac:	40020c00 	.word	0x40020c00
 80075b0:	40021000 	.word	0x40021000
 80075b4:	40021400 	.word	0x40021400
 80075b8:	40021800 	.word	0x40021800
 80075bc:	40021c00 	.word	0x40021c00
 80075c0:	40013c00 	.word	0x40013c00

080075c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691a      	ldr	r2, [r3, #16]
 80075d4:	887b      	ldrh	r3, [r7, #2]
 80075d6:	4013      	ands	r3, r2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075dc:	2301      	movs	r3, #1
 80075de:	73fb      	strb	r3, [r7, #15]
 80075e0:	e001      	b.n	80075e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]
 8007600:	4613      	mov	r3, r2
 8007602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007604:	787b      	ldrb	r3, [r7, #1]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800760a:	887a      	ldrh	r2, [r7, #2]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007610:	e003      	b.n	800761a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007612:	887b      	ldrh	r3, [r7, #2]
 8007614:	041a      	lsls	r2, r3, #16
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	619a      	str	r2, [r3, #24]
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b086      	sub	sp, #24
 800762a:	af02      	add	r7, sp, #8
 800762c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e101      	b.n	800783c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d106      	bne.n	8007658 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f007 f91e 	bl	800e894 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2203      	movs	r2, #3
 800765c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007666:	d102      	bne.n	800766e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f002 fa97 	bl	8009ba6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6818      	ldr	r0, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	7c1a      	ldrb	r2, [r3, #16]
 8007680:	f88d 2000 	strb.w	r2, [sp]
 8007684:	3304      	adds	r3, #4
 8007686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007688:	f002 f976 	bl	8009978 <USB_CoreInit>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2202      	movs	r2, #2
 8007696:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e0ce      	b.n	800783c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2100      	movs	r1, #0
 80076a4:	4618      	mov	r0, r3
 80076a6:	f002 fa8f 	bl	8009bc8 <USB_SetCurrentMode>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d005      	beq.n	80076bc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e0bf      	b.n	800783c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076bc:	2300      	movs	r3, #0
 80076be:	73fb      	strb	r3, [r7, #15]
 80076c0:	e04a      	b.n	8007758 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80076c2:	7bfa      	ldrb	r2, [r7, #15]
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	4613      	mov	r3, r2
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	4413      	add	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	440b      	add	r3, r1
 80076d0:	3315      	adds	r3, #21
 80076d2:	2201      	movs	r2, #1
 80076d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80076d6:	7bfa      	ldrb	r2, [r7, #15]
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	00db      	lsls	r3, r3, #3
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	440b      	add	r3, r1
 80076e4:	3314      	adds	r3, #20
 80076e6:	7bfa      	ldrb	r2, [r7, #15]
 80076e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80076ea:	7bfa      	ldrb	r2, [r7, #15]
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	b298      	uxth	r0, r3
 80076f0:	6879      	ldr	r1, [r7, #4]
 80076f2:	4613      	mov	r3, r2
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	4413      	add	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	440b      	add	r3, r1
 80076fc:	332e      	adds	r3, #46	; 0x2e
 80076fe:	4602      	mov	r2, r0
 8007700:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007702:	7bfa      	ldrb	r2, [r7, #15]
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	4613      	mov	r3, r2
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	440b      	add	r3, r1
 8007710:	3318      	adds	r3, #24
 8007712:	2200      	movs	r2, #0
 8007714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007716:	7bfa      	ldrb	r2, [r7, #15]
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	4613      	mov	r3, r2
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	4413      	add	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	440b      	add	r3, r1
 8007724:	331c      	adds	r3, #28
 8007726:	2200      	movs	r2, #0
 8007728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800772a:	7bfa      	ldrb	r2, [r7, #15]
 800772c:	6879      	ldr	r1, [r7, #4]
 800772e:	4613      	mov	r3, r2
 8007730:	00db      	lsls	r3, r3, #3
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	440b      	add	r3, r1
 8007738:	3320      	adds	r3, #32
 800773a:	2200      	movs	r2, #0
 800773c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800773e:	7bfa      	ldrb	r2, [r7, #15]
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	4613      	mov	r3, r2
 8007744:	00db      	lsls	r3, r3, #3
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	440b      	add	r3, r1
 800774c:	3324      	adds	r3, #36	; 0x24
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	3301      	adds	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	791b      	ldrb	r3, [r3, #4]
 800775c:	7bfa      	ldrb	r2, [r7, #15]
 800775e:	429a      	cmp	r2, r3
 8007760:	d3af      	bcc.n	80076c2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]
 8007766:	e044      	b.n	80077f2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007768:	7bfa      	ldrb	r2, [r7, #15]
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	4613      	mov	r3, r2
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	4413      	add	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	440b      	add	r3, r1
 8007776:	f203 2355 	addw	r3, r3, #597	; 0x255
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800777e:	7bfa      	ldrb	r2, [r7, #15]
 8007780:	6879      	ldr	r1, [r7, #4]
 8007782:	4613      	mov	r3, r2
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	440b      	add	r3, r1
 800778c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007790:	7bfa      	ldrb	r2, [r7, #15]
 8007792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007794:	7bfa      	ldrb	r2, [r7, #15]
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	4613      	mov	r3, r2
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	4413      	add	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	440b      	add	r3, r1
 80077a2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80077a6:	2200      	movs	r2, #0
 80077a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80077aa:	7bfa      	ldrb	r2, [r7, #15]
 80077ac:	6879      	ldr	r1, [r7, #4]
 80077ae:	4613      	mov	r3, r2
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	440b      	add	r3, r1
 80077b8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80077c0:	7bfa      	ldrb	r2, [r7, #15]
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	4613      	mov	r3, r2
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	440b      	add	r3, r1
 80077ce:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80077d6:	7bfa      	ldrb	r2, [r7, #15]
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	4613      	mov	r3, r2
 80077dc:	00db      	lsls	r3, r3, #3
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	440b      	add	r3, r1
 80077e4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	3301      	adds	r3, #1
 80077f0:	73fb      	strb	r3, [r7, #15]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	791b      	ldrb	r3, [r3, #4]
 80077f6:	7bfa      	ldrb	r2, [r7, #15]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d3b5      	bcc.n	8007768 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	7c1a      	ldrb	r2, [r3, #16]
 8007804:	f88d 2000 	strb.w	r2, [sp]
 8007808:	3304      	adds	r3, #4
 800780a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800780c:	f002 fa28 	bl	8009c60 <USB_DevInit>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d005      	beq.n	8007822 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e00c      	b.n	800783c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4618      	mov	r0, r3
 8007836:	f003 fa6c 	bl	800ad12 <USB_DevDisconnect>

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_PCD_Start+0x1c>
 800785c:	2302      	movs	r3, #2
 800785e:	e022      	b.n	80078a6 <HAL_PCD_Start+0x62>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	d009      	beq.n	8007888 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007878:	2b01      	cmp	r3, #1
 800787a:	d105      	bne.n	8007888 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4618      	mov	r0, r3
 800788e:	f002 f979 	bl	8009b84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f003 fa1a 	bl	800acd0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80078ae:	b590      	push	{r4, r7, lr}
 80078b0:	b08d      	sub	sp, #52	; 0x34
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f003 fad8 	bl	800ae7a <USB_GetMode>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f040 848c 	bne.w	80081ea <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f003 fa3c 	bl	800ad54 <USB_ReadInterrupts>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 8482 	beq.w	80081e8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	0a1b      	lsrs	r3, r3, #8
 80078ee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f003 fa29 	bl	800ad54 <USB_ReadInterrupts>
 8007902:	4603      	mov	r3, r0
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b02      	cmp	r3, #2
 800790a:	d107      	bne.n	800791c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	695a      	ldr	r2, [r3, #20]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f002 0202 	and.w	r2, r2, #2
 800791a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4618      	mov	r0, r3
 8007922:	f003 fa17 	bl	800ad54 <USB_ReadInterrupts>
 8007926:	4603      	mov	r3, r0
 8007928:	f003 0310 	and.w	r3, r3, #16
 800792c:	2b10      	cmp	r3, #16
 800792e:	d161      	bne.n	80079f4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	699a      	ldr	r2, [r3, #24]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0210 	bic.w	r2, r2, #16
 800793e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	f003 020f 	and.w	r2, r3, #15
 800794c:	4613      	mov	r3, r2
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	4413      	add	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	4413      	add	r3, r2
 800795c:	3304      	adds	r3, #4
 800795e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	0c5b      	lsrs	r3, r3, #17
 8007964:	f003 030f 	and.w	r3, r3, #15
 8007968:	2b02      	cmp	r3, #2
 800796a:	d124      	bne.n	80079b6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007972:	4013      	ands	r3, r2
 8007974:	2b00      	cmp	r3, #0
 8007976:	d035      	beq.n	80079e4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	091b      	lsrs	r3, r3, #4
 8007980:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007986:	b29b      	uxth	r3, r3
 8007988:	461a      	mov	r2, r3
 800798a:	6a38      	ldr	r0, [r7, #32]
 800798c:	f003 f84e 	bl	800aa2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	68da      	ldr	r2, [r3, #12]
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	091b      	lsrs	r3, r3, #4
 8007998:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800799c:	441a      	add	r2, r3
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	695a      	ldr	r2, [r3, #20]
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	091b      	lsrs	r3, r3, #4
 80079aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079ae:	441a      	add	r2, r3
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	615a      	str	r2, [r3, #20]
 80079b4:	e016      	b.n	80079e4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	0c5b      	lsrs	r3, r3, #17
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	2b06      	cmp	r3, #6
 80079c0:	d110      	bne.n	80079e4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80079c8:	2208      	movs	r2, #8
 80079ca:	4619      	mov	r1, r3
 80079cc:	6a38      	ldr	r0, [r7, #32]
 80079ce:	f003 f82d 	bl	800aa2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	695a      	ldr	r2, [r3, #20]
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	091b      	lsrs	r3, r3, #4
 80079da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079de:	441a      	add	r2, r3
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	699a      	ldr	r2, [r3, #24]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0210 	orr.w	r2, r2, #16
 80079f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f003 f9ab 	bl	800ad54 <USB_ReadInterrupts>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a08:	f040 80a7 	bne.w	8007b5a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f003 f9b0 	bl	800ad7a <USB_ReadDevAllOutEpInterrupt>
 8007a1a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007a1c:	e099      	b.n	8007b52 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 808e 	beq.w	8007b46 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a30:	b2d2      	uxtb	r2, r2
 8007a32:	4611      	mov	r1, r2
 8007a34:	4618      	mov	r0, r3
 8007a36:	f003 f9d4 	bl	800ade2 <USB_ReadDevOutEPInterrupt>
 8007a3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00c      	beq.n	8007a60 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a52:	461a      	mov	r2, r3
 8007a54:	2301      	movs	r3, #1
 8007a56:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fea2 	bl	80087a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f003 0308 	and.w	r3, r3, #8
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00c      	beq.n	8007a84 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a76:	461a      	mov	r2, r3
 8007a78:	2308      	movs	r3, #8
 8007a7a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 ff78 	bl	8008974 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d008      	beq.n	8007aa0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	2310      	movs	r3, #16
 8007a9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d030      	beq.n	8007b0c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab2:	2b80      	cmp	r3, #128	; 0x80
 8007ab4:	d109      	bne.n	8007aca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	69fa      	ldr	r2, [r7, #28]
 8007ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ac4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ac8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007acc:	4613      	mov	r3, r2
 8007ace:	00db      	lsls	r3, r3, #3
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	4413      	add	r3, r2
 8007adc:	3304      	adds	r3, #4
 8007ade:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	78db      	ldrb	r3, [r3, #3]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d108      	bne.n	8007afa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	2200      	movs	r2, #0
 8007aec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f006 ffe1 	bl	800eabc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b06:	461a      	mov	r2, r3
 8007b08:	2302      	movs	r3, #2
 8007b0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d008      	beq.n	8007b28 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b22:	461a      	mov	r2, r3
 8007b24:	2320      	movs	r3, #32
 8007b26:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b44:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	3301      	adds	r3, #1
 8007b4a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	085b      	lsrs	r3, r3, #1
 8007b50:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f47f af62 	bne.w	8007a1e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f003 f8f8 	bl	800ad54 <USB_ReadInterrupts>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b6e:	f040 80db 	bne.w	8007d28 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f003 f919 	bl	800adae <USB_ReadDevAllInEpInterrupt>
 8007b7c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007b82:	e0cd      	b.n	8007d20 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 80c2 	beq.w	8007d14 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b96:	b2d2      	uxtb	r2, r2
 8007b98:	4611      	mov	r1, r2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f003 f93f 	bl	800ae1e <USB_ReadDevInEPInterrupt>
 8007ba0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d057      	beq.n	8007c5c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	f003 030f 	and.w	r3, r3, #15
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	43db      	mvns	r3, r3
 8007bc6:	69f9      	ldr	r1, [r7, #28]
 8007bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bcc:	4013      	ands	r3, r2
 8007bce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	015a      	lsls	r2, r3, #5
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bdc:	461a      	mov	r2, r3
 8007bde:	2301      	movs	r3, #1
 8007be0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	799b      	ldrb	r3, [r3, #6]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d132      	bne.n	8007c50 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007bea:	6879      	ldr	r1, [r7, #4]
 8007bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bee:	4613      	mov	r3, r2
 8007bf0:	00db      	lsls	r3, r3, #3
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	3320      	adds	r3, #32
 8007bfa:	6819      	ldr	r1, [r3, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c00:	4613      	mov	r3, r2
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4403      	add	r3, r0
 8007c0a:	331c      	adds	r3, #28
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4419      	add	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c14:	4613      	mov	r3, r2
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	4413      	add	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4403      	add	r3, r0
 8007c1e:	3320      	adds	r3, #32
 8007c20:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d113      	bne.n	8007c50 <HAL_PCD_IRQHandler+0x3a2>
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	4413      	add	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	440b      	add	r3, r1
 8007c36:	3324      	adds	r3, #36	; 0x24
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d108      	bne.n	8007c50 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007c48:	461a      	mov	r2, r3
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	f003 f946 	bl	800aedc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f006 feab 	bl	800e9b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f003 0308 	and.w	r3, r3, #8
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d008      	beq.n	8007c78 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c72:	461a      	mov	r2, r3
 8007c74:	2308      	movs	r3, #8
 8007c76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d008      	beq.n	8007c94 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8e:	461a      	mov	r2, r3
 8007c90:	2310      	movs	r3, #16
 8007c92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d008      	beq.n	8007cb0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007caa:	461a      	mov	r2, r3
 8007cac:	2340      	movs	r3, #64	; 0x40
 8007cae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d023      	beq.n	8007d02 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007cba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cbc:	6a38      	ldr	r0, [r7, #32]
 8007cbe:	f002 f933 	bl	8009f28 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	3310      	adds	r3, #16
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	78db      	ldrb	r3, [r3, #3]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d108      	bne.n	8007cf0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f006 fef8 	bl	800eae0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	2302      	movs	r3, #2
 8007d00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fcbb 	bl	800868a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	3301      	adds	r3, #1
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	085b      	lsrs	r3, r3, #1
 8007d1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f47f af2e 	bne.w	8007b84 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f003 f811 	bl	800ad54 <USB_ReadInterrupts>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d3c:	d122      	bne.n	8007d84 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	69fa      	ldr	r2, [r7, #28]
 8007d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d4c:	f023 0301 	bic.w	r3, r3, #1
 8007d50:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d108      	bne.n	8007d6e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007d64:	2100      	movs	r1, #0
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fea2 	bl	8008ab0 <HAL_PCDEx_LPM_Callback>
 8007d6c:	e002      	b.n	8007d74 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f006 fe96 	bl	800eaa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	695a      	ldr	r2, [r3, #20]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f002 ffe3 	bl	800ad54 <USB_ReadInterrupts>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d98:	d112      	bne.n	8007dc0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d102      	bne.n	8007db0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f006 fe52 	bl	800ea54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	695a      	ldr	r2, [r3, #20]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007dbe:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f002 ffc5 	bl	800ad54 <USB_ReadInterrupts>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd4:	f040 80b7 	bne.w	8007f46 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007de6:	f023 0301 	bic.w	r3, r3, #1
 8007dea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2110      	movs	r1, #16
 8007df2:	4618      	mov	r0, r3
 8007df4:	f002 f898 	bl	8009f28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dfc:	e046      	b.n	8007e8c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e22:	0151      	lsls	r1, r2, #5
 8007e24:	69fa      	ldr	r2, [r7, #28]
 8007e26:	440a      	add	r2, r1
 8007e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e56:	0151      	lsls	r1, r2, #5
 8007e58:	69fa      	ldr	r2, [r7, #28]
 8007e5a:	440a      	add	r2, r1
 8007e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e76:	0151      	lsls	r1, r2, #5
 8007e78:	69fa      	ldr	r2, [r7, #28]
 8007e7a:	440a      	add	r2, r1
 8007e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e88:	3301      	adds	r3, #1
 8007e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	791b      	ldrb	r3, [r3, #4]
 8007e90:	461a      	mov	r2, r3
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d3b2      	bcc.n	8007dfe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	69fa      	ldr	r2, [r7, #28]
 8007ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ea6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007eaa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	7bdb      	ldrb	r3, [r3, #15]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d016      	beq.n	8007ee2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ec4:	f043 030b 	orr.w	r3, r3, #11
 8007ec8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed4:	69fa      	ldr	r2, [r7, #28]
 8007ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eda:	f043 030b 	orr.w	r3, r3, #11
 8007ede:	6453      	str	r3, [r2, #68]	; 0x44
 8007ee0:	e015      	b.n	8007f0e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	69fa      	ldr	r2, [r7, #28]
 8007eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ef0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ef4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007ef8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	69fa      	ldr	r2, [r7, #28]
 8007f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f08:	f043 030b 	orr.w	r3, r3, #11
 8007f0c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f1c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007f20:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007f30:	461a      	mov	r2, r3
 8007f32:	f002 ffd3 	bl	800aedc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	695a      	ldr	r2, [r3, #20]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f002 ff02 	bl	800ad54 <USB_ReadInterrupts>
 8007f50:	4603      	mov	r3, r0
 8007f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f5a:	d123      	bne.n	8007fa4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f002 ff98 	bl	800ae96 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f002 f855 	bl	800a01a <USB_GetDevSpeed>
 8007f70:	4603      	mov	r3, r0
 8007f72:	461a      	mov	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681c      	ldr	r4, [r3, #0]
 8007f7c:	f001 fa08 	bl	8009390 <HAL_RCC_GetHCLKFreq>
 8007f80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007f86:	461a      	mov	r2, r3
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f001 fd59 	bl	8009a40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f006 fd37 	bl	800ea02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	695a      	ldr	r2, [r3, #20]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f002 fed3 	bl	800ad54 <USB_ReadInterrupts>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	f003 0308 	and.w	r3, r3, #8
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d10a      	bne.n	8007fce <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f006 fd14 	bl	800e9e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	695a      	ldr	r2, [r3, #20]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f002 0208 	and.w	r2, r2, #8
 8007fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f002 febe 	bl	800ad54 <USB_ReadInterrupts>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fde:	2b80      	cmp	r3, #128	; 0x80
 8007fe0:	d123      	bne.n	800802a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007fee:	2301      	movs	r3, #1
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ff2:	e014      	b.n	800801e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	4413      	add	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	440b      	add	r3, r1
 8008002:	f203 2357 	addw	r3, r3, #599	; 0x257
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d105      	bne.n	8008018 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	b2db      	uxtb	r3, r3
 8008010:	4619      	mov	r1, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fb08 	bl	8008628 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	3301      	adds	r3, #1
 800801c:	627b      	str	r3, [r7, #36]	; 0x24
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	791b      	ldrb	r3, [r3, #4]
 8008022:	461a      	mov	r2, r3
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	4293      	cmp	r3, r2
 8008028:	d3e4      	bcc.n	8007ff4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f002 fe90 	bl	800ad54 <USB_ReadInterrupts>
 8008034:	4603      	mov	r3, r0
 8008036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800803a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800803e:	d13c      	bne.n	80080ba <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008040:	2301      	movs	r3, #1
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
 8008044:	e02b      	b.n	800809e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	4413      	add	r3, r2
 800804e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008056:	6879      	ldr	r1, [r7, #4]
 8008058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805a:	4613      	mov	r3, r2
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	440b      	add	r3, r1
 8008064:	3318      	adds	r3, #24
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d115      	bne.n	8008098 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800806c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800806e:	2b00      	cmp	r3, #0
 8008070:	da12      	bge.n	8008098 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008076:	4613      	mov	r3, r2
 8008078:	00db      	lsls	r3, r3, #3
 800807a:	4413      	add	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	440b      	add	r3, r1
 8008080:	3317      	adds	r3, #23
 8008082:	2201      	movs	r2, #1
 8008084:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	b2db      	uxtb	r3, r3
 800808a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800808e:	b2db      	uxtb	r3, r3
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fac8 	bl	8008628 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	3301      	adds	r3, #1
 800809c:	627b      	str	r3, [r7, #36]	; 0x24
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	791b      	ldrb	r3, [r3, #4]
 80080a2:	461a      	mov	r2, r3
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d3cd      	bcc.n	8008046 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	695a      	ldr	r2, [r3, #20]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80080b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4618      	mov	r0, r3
 80080c0:	f002 fe48 	bl	800ad54 <USB_ReadInterrupts>
 80080c4:	4603      	mov	r3, r0
 80080c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080ce:	d156      	bne.n	800817e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080d0:	2301      	movs	r3, #1
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24
 80080d4:	e045      	b.n	8008162 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80080e6:	6879      	ldr	r1, [r7, #4]
 80080e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ea:	4613      	mov	r3, r2
 80080ec:	00db      	lsls	r3, r3, #3
 80080ee:	4413      	add	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	440b      	add	r3, r1
 80080f4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d12e      	bne.n	800815c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80080fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008100:	2b00      	cmp	r3, #0
 8008102:	da2b      	bge.n	800815c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8008110:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008114:	429a      	cmp	r2, r3
 8008116:	d121      	bne.n	800815c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800811c:	4613      	mov	r3, r2
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	f203 2357 	addw	r3, r3, #599	; 0x257
 800812a:	2201      	movs	r2, #1
 800812c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10a      	bne.n	800815c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008158:	6053      	str	r3, [r2, #4]
            break;
 800815a:	e008      	b.n	800816e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	3301      	adds	r3, #1
 8008160:	627b      	str	r3, [r7, #36]	; 0x24
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	791b      	ldrb	r3, [r3, #4]
 8008166:	461a      	mov	r2, r3
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	4293      	cmp	r3, r2
 800816c:	d3b3      	bcc.n	80080d6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	695a      	ldr	r2, [r3, #20]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800817c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4618      	mov	r0, r3
 8008184:	f002 fde6 	bl	800ad54 <USB_ReadInterrupts>
 8008188:	4603      	mov	r3, r0
 800818a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800818e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008192:	d10a      	bne.n	80081aa <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f006 fcb5 	bl	800eb04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	695a      	ldr	r2, [r3, #20]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80081a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f002 fdd0 	bl	800ad54 <USB_ReadInterrupts>
 80081b4:	4603      	mov	r3, r0
 80081b6:	f003 0304 	and.w	r3, r3, #4
 80081ba:	2b04      	cmp	r3, #4
 80081bc:	d115      	bne.n	80081ea <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f006 fca5 	bl	800eb20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6859      	ldr	r1, [r3, #4]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	605a      	str	r2, [r3, #4]
 80081e6:	e000      	b.n	80081ea <HAL_PCD_IRQHandler+0x93c>
      return;
 80081e8:	bf00      	nop
    }
  }
}
 80081ea:	3734      	adds	r7, #52	; 0x34
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd90      	pop	{r4, r7, pc}

080081f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8008202:	2b01      	cmp	r3, #1
 8008204:	d101      	bne.n	800820a <HAL_PCD_SetAddress+0x1a>
 8008206:	2302      	movs	r3, #2
 8008208:	e012      	b.n	8008230 <HAL_PCD_SetAddress+0x40>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	78fa      	ldrb	r2, [r7, #3]
 8008216:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	78fa      	ldrb	r2, [r7, #3]
 800821e:	4611      	mov	r1, r2
 8008220:	4618      	mov	r0, r3
 8008222:	f002 fd2f 	bl	800ac84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	4608      	mov	r0, r1
 8008242:	4611      	mov	r1, r2
 8008244:	461a      	mov	r2, r3
 8008246:	4603      	mov	r3, r0
 8008248:	70fb      	strb	r3, [r7, #3]
 800824a:	460b      	mov	r3, r1
 800824c:	803b      	strh	r3, [r7, #0]
 800824e:	4613      	mov	r3, r2
 8008250:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800825a:	2b00      	cmp	r3, #0
 800825c:	da0f      	bge.n	800827e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800825e:	78fb      	ldrb	r3, [r7, #3]
 8008260:	f003 020f 	and.w	r2, r3, #15
 8008264:	4613      	mov	r3, r2
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	3310      	adds	r3, #16
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	4413      	add	r3, r2
 8008272:	3304      	adds	r3, #4
 8008274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2201      	movs	r2, #1
 800827a:	705a      	strb	r2, [r3, #1]
 800827c:	e00f      	b.n	800829e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800827e:	78fb      	ldrb	r3, [r7, #3]
 8008280:	f003 020f 	and.w	r2, r3, #15
 8008284:	4613      	mov	r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	4413      	add	r3, r2
 8008294:	3304      	adds	r3, #4
 8008296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80082aa:	883a      	ldrh	r2, [r7, #0]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	78ba      	ldrb	r2, [r7, #2]
 80082b4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d004      	beq.n	80082c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80082c8:	78bb      	ldrb	r3, [r7, #2]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d102      	bne.n	80082d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d101      	bne.n	80082e2 <HAL_PCD_EP_Open+0xaa>
 80082de:	2302      	movs	r3, #2
 80082e0:	e00e      	b.n	8008300 <HAL_PCD_EP_Open+0xc8>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68f9      	ldr	r1, [r7, #12]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f001 feb7 	bl	800a064 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80082fe:	7afb      	ldrb	r3, [r7, #11]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008318:	2b00      	cmp	r3, #0
 800831a:	da0f      	bge.n	800833c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800831c:	78fb      	ldrb	r3, [r7, #3]
 800831e:	f003 020f 	and.w	r2, r3, #15
 8008322:	4613      	mov	r3, r2
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	3310      	adds	r3, #16
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	4413      	add	r3, r2
 8008330:	3304      	adds	r3, #4
 8008332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2201      	movs	r2, #1
 8008338:	705a      	strb	r2, [r3, #1]
 800833a:	e00f      	b.n	800835c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800833c:	78fb      	ldrb	r3, [r7, #3]
 800833e:	f003 020f 	and.w	r2, r3, #15
 8008342:	4613      	mov	r3, r2
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	3304      	adds	r3, #4
 8008354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800835c:	78fb      	ldrb	r3, [r7, #3]
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	b2da      	uxtb	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800836e:	2b01      	cmp	r3, #1
 8008370:	d101      	bne.n	8008376 <HAL_PCD_EP_Close+0x6e>
 8008372:	2302      	movs	r3, #2
 8008374:	e00e      	b.n	8008394 <HAL_PCD_EP_Close+0x8c>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68f9      	ldr	r1, [r7, #12]
 8008384:	4618      	mov	r0, r3
 8008386:	f001 fef5 	bl	800a174 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	607a      	str	r2, [r7, #4]
 80083a6:	603b      	str	r3, [r7, #0]
 80083a8:	460b      	mov	r3, r1
 80083aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083ac:	7afb      	ldrb	r3, [r7, #11]
 80083ae:	f003 020f 	and.w	r2, r3, #15
 80083b2:	4613      	mov	r3, r2
 80083b4:	00db      	lsls	r3, r3, #3
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	4413      	add	r3, r2
 80083c2:	3304      	adds	r3, #4
 80083c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2200      	movs	r2, #0
 80083d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	2200      	movs	r2, #0
 80083dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80083de:	7afb      	ldrb	r3, [r7, #11]
 80083e0:	f003 030f 	and.w	r3, r3, #15
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	799b      	ldrb	r3, [r3, #6]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d102      	bne.n	80083f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6818      	ldr	r0, [r3, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	799b      	ldrb	r3, [r3, #6]
 8008400:	461a      	mov	r2, r3
 8008402:	6979      	ldr	r1, [r7, #20]
 8008404:	f001 ff92 	bl	800a32c <USB_EPStartXfer>

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	460b      	mov	r3, r1
 800841c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800841e:	78fb      	ldrb	r3, [r7, #3]
 8008420:	f003 020f 	and.w	r2, r3, #15
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	4613      	mov	r3, r2
 8008428:	00db      	lsls	r3, r3, #3
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	440b      	add	r3, r1
 8008430:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8008434:	681b      	ldr	r3, [r3, #0]
}
 8008436:	4618      	mov	r0, r3
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b086      	sub	sp, #24
 8008446:	af00      	add	r7, sp, #0
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
 800844e:	460b      	mov	r3, r1
 8008450:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008452:	7afb      	ldrb	r3, [r7, #11]
 8008454:	f003 020f 	and.w	r2, r3, #15
 8008458:	4613      	mov	r3, r2
 800845a:	00db      	lsls	r3, r3, #3
 800845c:	4413      	add	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	3310      	adds	r3, #16
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4413      	add	r3, r2
 8008466:	3304      	adds	r3, #4
 8008468:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2200      	movs	r2, #0
 800847a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2201      	movs	r2, #1
 8008480:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008482:	7afb      	ldrb	r3, [r7, #11]
 8008484:	f003 030f 	and.w	r3, r3, #15
 8008488:	b2da      	uxtb	r2, r3
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	799b      	ldrb	r3, [r3, #6]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d102      	bne.n	800849c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6818      	ldr	r0, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	799b      	ldrb	r3, [r3, #6]
 80084a4:	461a      	mov	r2, r3
 80084a6:	6979      	ldr	r1, [r7, #20]
 80084a8:	f001 ff40 	bl	800a32c <USB_EPStartXfer>

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	f003 030f 	and.w	r3, r3, #15
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	7912      	ldrb	r2, [r2, #4]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d901      	bls.n	80084d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e04f      	b.n	8008574 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80084d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	da0f      	bge.n	80084fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	f003 020f 	and.w	r2, r3, #15
 80084e2:	4613      	mov	r3, r2
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	4413      	add	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	3310      	adds	r3, #16
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	4413      	add	r3, r2
 80084f0:	3304      	adds	r3, #4
 80084f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2201      	movs	r2, #1
 80084f8:	705a      	strb	r2, [r3, #1]
 80084fa:	e00d      	b.n	8008518 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80084fc:	78fa      	ldrb	r2, [r7, #3]
 80084fe:	4613      	mov	r3, r2
 8008500:	00db      	lsls	r3, r3, #3
 8008502:	4413      	add	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	3304      	adds	r3, #4
 8008510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2201      	movs	r2, #1
 800851c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800851e:	78fb      	ldrb	r3, [r7, #3]
 8008520:	f003 030f 	and.w	r3, r3, #15
 8008524:	b2da      	uxtb	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8008530:	2b01      	cmp	r3, #1
 8008532:	d101      	bne.n	8008538 <HAL_PCD_EP_SetStall+0x82>
 8008534:	2302      	movs	r3, #2
 8008536:	e01d      	b.n	8008574 <HAL_PCD_EP_SetStall+0xbe>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68f9      	ldr	r1, [r7, #12]
 8008546:	4618      	mov	r0, r3
 8008548:	f002 fac8 	bl	800aadc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800854c:	78fb      	ldrb	r3, [r7, #3]
 800854e:	f003 030f 	and.w	r3, r3, #15
 8008552:	2b00      	cmp	r3, #0
 8008554:	d109      	bne.n	800856a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6818      	ldr	r0, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	7999      	ldrb	r1, [r3, #6]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008564:	461a      	mov	r2, r3
 8008566:	f002 fcb9 	bl	800aedc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	7912      	ldrb	r2, [r2, #4]
 8008592:	4293      	cmp	r3, r2
 8008594:	d901      	bls.n	800859a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e042      	b.n	8008620 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800859a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	da0f      	bge.n	80085c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085a2:	78fb      	ldrb	r3, [r7, #3]
 80085a4:	f003 020f 	and.w	r2, r3, #15
 80085a8:	4613      	mov	r3, r2
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	3310      	adds	r3, #16
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	4413      	add	r3, r2
 80085b6:	3304      	adds	r3, #4
 80085b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2201      	movs	r2, #1
 80085be:	705a      	strb	r2, [r3, #1]
 80085c0:	e00f      	b.n	80085e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80085c2:	78fb      	ldrb	r3, [r7, #3]
 80085c4:	f003 020f 	and.w	r2, r3, #15
 80085c8:	4613      	mov	r3, r2
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	4413      	add	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	4413      	add	r3, r2
 80085d8:	3304      	adds	r3, #4
 80085da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	f003 030f 	and.w	r3, r3, #15
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d101      	bne.n	8008602 <HAL_PCD_EP_ClrStall+0x86>
 80085fe:	2302      	movs	r3, #2
 8008600:	e00e      	b.n	8008620 <HAL_PCD_EP_ClrStall+0xa4>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68f9      	ldr	r1, [r7, #12]
 8008610:	4618      	mov	r0, r3
 8008612:	f002 fad1 	bl	800abb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008638:	2b00      	cmp	r3, #0
 800863a:	da0c      	bge.n	8008656 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800863c:	78fb      	ldrb	r3, [r7, #3]
 800863e:	f003 020f 	and.w	r2, r3, #15
 8008642:	4613      	mov	r3, r2
 8008644:	00db      	lsls	r3, r3, #3
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	3310      	adds	r3, #16
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	4413      	add	r3, r2
 8008650:	3304      	adds	r3, #4
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	e00c      	b.n	8008670 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008656:	78fb      	ldrb	r3, [r7, #3]
 8008658:	f003 020f 	and.w	r2, r3, #15
 800865c:	4613      	mov	r3, r2
 800865e:	00db      	lsls	r3, r3, #3
 8008660:	4413      	add	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	4413      	add	r3, r2
 800866c:	3304      	adds	r3, #4
 800866e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68f9      	ldr	r1, [r7, #12]
 8008676:	4618      	mov	r0, r3
 8008678:	f002 f8f0 	bl	800a85c <USB_EPStopXfer>
 800867c:	4603      	mov	r3, r0
 800867e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008680:	7afb      	ldrb	r3, [r7, #11]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b08a      	sub	sp, #40	; 0x28
 800868e:	af02      	add	r7, sp, #8
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	4613      	mov	r3, r2
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	3310      	adds	r3, #16
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	4413      	add	r3, r2
 80086ae:	3304      	adds	r3, #4
 80086b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	695a      	ldr	r2, [r3, #20]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d901      	bls.n	80086c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e06b      	b.n	800879a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	691a      	ldr	r2, [r3, #16]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d902      	bls.n	80086de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	3303      	adds	r3, #3
 80086e2:	089b      	lsrs	r3, r3, #2
 80086e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086e6:	e02a      	b.n	800873e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	691a      	ldr	r2, [r3, #16]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	69fa      	ldr	r2, [r7, #28]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d902      	bls.n	8008704 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	3303      	adds	r3, #3
 8008708:	089b      	lsrs	r3, r3, #2
 800870a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	68d9      	ldr	r1, [r3, #12]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	b2da      	uxtb	r2, r3
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	4603      	mov	r3, r0
 8008720:	6978      	ldr	r0, [r7, #20]
 8008722:	f002 f945 	bl	800a9b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	441a      	add	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	695a      	ldr	r2, [r3, #20]
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	441a      	add	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	4413      	add	r3, r2
 8008746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	429a      	cmp	r2, r3
 8008752:	d809      	bhi.n	8008768 <PCD_WriteEmptyTxFifo+0xde>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	695a      	ldr	r2, [r3, #20]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800875c:	429a      	cmp	r2, r3
 800875e:	d203      	bcs.n	8008768 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1bf      	bne.n	80086e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	429a      	cmp	r2, r3
 8008772:	d811      	bhi.n	8008798 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	f003 030f 	and.w	r3, r3, #15
 800877a:	2201      	movs	r2, #1
 800877c:	fa02 f303 	lsl.w	r3, r2, r3
 8008780:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	43db      	mvns	r3, r3
 800878e:	6939      	ldr	r1, [r7, #16]
 8008790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008794:	4013      	ands	r3, r2
 8008796:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3720      	adds	r7, #32
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
	...

080087a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b088      	sub	sp, #32
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	333c      	adds	r3, #60	; 0x3c
 80087bc:	3304      	adds	r3, #4
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	799b      	ldrb	r3, [r3, #6]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d17b      	bne.n	80088d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	f003 0308 	and.w	r3, r3, #8
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d015      	beq.n	8008810 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	4a61      	ldr	r2, [pc, #388]	; (800896c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	f240 80b9 	bls.w	8008960 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 80b3 	beq.w	8008960 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008806:	461a      	mov	r2, r3
 8008808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800880c:	6093      	str	r3, [r2, #8]
 800880e:	e0a7      	b.n	8008960 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f003 0320 	and.w	r3, r3, #32
 8008816:	2b00      	cmp	r3, #0
 8008818:	d009      	beq.n	800882e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008826:	461a      	mov	r2, r3
 8008828:	2320      	movs	r3, #32
 800882a:	6093      	str	r3, [r2, #8]
 800882c:	e098      	b.n	8008960 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008834:	2b00      	cmp	r3, #0
 8008836:	f040 8093 	bne.w	8008960 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	4a4b      	ldr	r2, [pc, #300]	; (800896c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d90f      	bls.n	8008862 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00a      	beq.n	8008862 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008858:	461a      	mov	r2, r3
 800885a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800885e:	6093      	str	r3, [r2, #8]
 8008860:	e07e      	b.n	8008960 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	4613      	mov	r3, r2
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	4413      	add	r3, r2
 8008874:	3304      	adds	r3, #4
 8008876:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6a1a      	ldr	r2, [r3, #32]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	0159      	lsls	r1, r3, #5
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	440b      	add	r3, r1
 8008884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d114      	bne.n	80088c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d109      	bne.n	80088b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80088ac:	461a      	mov	r2, r3
 80088ae:	2101      	movs	r1, #1
 80088b0:	f002 fb14 	bl	800aedc <USB_EP0_OutStart>
 80088b4:	e006      	b.n	80088c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	68da      	ldr	r2, [r3, #12]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	441a      	add	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f006 f856 	bl	800e97c <HAL_PCD_DataOutStageCallback>
 80088d0:	e046      	b.n	8008960 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	4a26      	ldr	r2, [pc, #152]	; (8008970 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d124      	bne.n	8008924 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00a      	beq.n	80088fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	015a      	lsls	r2, r3, #5
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f0:	461a      	mov	r2, r3
 80088f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088f6:	6093      	str	r3, [r2, #8]
 80088f8:	e032      	b.n	8008960 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f003 0320 	and.w	r3, r3, #32
 8008900:	2b00      	cmp	r3, #0
 8008902:	d008      	beq.n	8008916 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008910:	461a      	mov	r2, r3
 8008912:	2320      	movs	r3, #32
 8008914:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f006 f82d 	bl	800e97c <HAL_PCD_DataOutStageCallback>
 8008922:	e01d      	b.n	8008960 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d114      	bne.n	8008954 <PCD_EP_OutXfrComplete_int+0x1b0>
 800892a:	6879      	ldr	r1, [r7, #4]
 800892c:	683a      	ldr	r2, [r7, #0]
 800892e:	4613      	mov	r3, r2
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	440b      	add	r3, r1
 8008938:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d108      	bne.n	8008954 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6818      	ldr	r0, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800894c:	461a      	mov	r2, r3
 800894e:	2100      	movs	r1, #0
 8008950:	f002 fac4 	bl	800aedc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	b2db      	uxtb	r3, r3
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f006 f80e 	bl	800e97c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3720      	adds	r7, #32
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	4f54300a 	.word	0x4f54300a
 8008970:	4f54310a 	.word	0x4f54310a

08008974 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	333c      	adds	r3, #60	; 0x3c
 800898c:	3304      	adds	r3, #4
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	4a15      	ldr	r2, [pc, #84]	; (80089fc <PCD_EP_OutSetupPacket_int+0x88>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d90e      	bls.n	80089c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d009      	beq.n	80089c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c0:	461a      	mov	r2, r3
 80089c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f005 ffc5 	bl	800e958 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	4a0a      	ldr	r2, [pc, #40]	; (80089fc <PCD_EP_OutSetupPacket_int+0x88>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d90c      	bls.n	80089f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	799b      	ldrb	r3, [r3, #6]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d108      	bne.n	80089f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6818      	ldr	r0, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80089e8:	461a      	mov	r2, r3
 80089ea:	2101      	movs	r1, #1
 80089ec:	f002 fa76 	bl	800aedc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	4f54300a 	.word	0x4f54300a

08008a00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008a18:	78fb      	ldrb	r3, [r7, #3]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d107      	bne.n	8008a2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008a1e:	883b      	ldrh	r3, [r7, #0]
 8008a20:	0419      	lsls	r1, r3, #16
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8008a2c:	e028      	b.n	8008a80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a34:	0c1b      	lsrs	r3, r3, #16
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	4413      	add	r3, r2
 8008a3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]
 8008a40:	e00d      	b.n	8008a5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	3340      	adds	r3, #64	; 0x40
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	0c1b      	lsrs	r3, r3, #16
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	4413      	add	r3, r2
 8008a56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	73fb      	strb	r3, [r7, #15]
 8008a5e:	7bfa      	ldrb	r2, [r7, #15]
 8008a60:	78fb      	ldrb	r3, [r7, #3]
 8008a62:	3b01      	subs	r3, #1
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d3ec      	bcc.n	8008a42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008a68:	883b      	ldrh	r3, [r7, #0]
 8008a6a:	0418      	lsls	r0, r3, #16
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6819      	ldr	r1, [r3, #0]
 8008a70:	78fb      	ldrb	r3, [r7, #3]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	4302      	orrs	r2, r0
 8008a78:	3340      	adds	r3, #64	; 0x40
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	460b      	mov	r3, r1
 8008a98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	887a      	ldrh	r2, [r7, #2]
 8008aa0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e267      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d075      	beq.n	8008bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ae6:	4b88      	ldr	r3, [pc, #544]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f003 030c 	and.w	r3, r3, #12
 8008aee:	2b04      	cmp	r3, #4
 8008af0:	d00c      	beq.n	8008b0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008af2:	4b85      	ldr	r3, [pc, #532]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008afa:	2b08      	cmp	r3, #8
 8008afc:	d112      	bne.n	8008b24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008afe:	4b82      	ldr	r3, [pc, #520]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b0a:	d10b      	bne.n	8008b24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b0c:	4b7e      	ldr	r3, [pc, #504]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d05b      	beq.n	8008bd0 <HAL_RCC_OscConfig+0x108>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d157      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e242      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b2c:	d106      	bne.n	8008b3c <HAL_RCC_OscConfig+0x74>
 8008b2e:	4b76      	ldr	r3, [pc, #472]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a75      	ldr	r2, [pc, #468]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b38:	6013      	str	r3, [r2, #0]
 8008b3a:	e01d      	b.n	8008b78 <HAL_RCC_OscConfig+0xb0>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b44:	d10c      	bne.n	8008b60 <HAL_RCC_OscConfig+0x98>
 8008b46:	4b70      	ldr	r3, [pc, #448]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a6f      	ldr	r2, [pc, #444]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b50:	6013      	str	r3, [r2, #0]
 8008b52:	4b6d      	ldr	r3, [pc, #436]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a6c      	ldr	r2, [pc, #432]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	e00b      	b.n	8008b78 <HAL_RCC_OscConfig+0xb0>
 8008b60:	4b69      	ldr	r3, [pc, #420]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a68      	ldr	r2, [pc, #416]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	4b66      	ldr	r3, [pc, #408]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a65      	ldr	r2, [pc, #404]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d013      	beq.n	8008ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b80:	f7fd fc0a 	bl	8006398 <HAL_GetTick>
 8008b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b86:	e008      	b.n	8008b9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b88:	f7fd fc06 	bl	8006398 <HAL_GetTick>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	2b64      	cmp	r3, #100	; 0x64
 8008b94:	d901      	bls.n	8008b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e207      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b9a:	4b5b      	ldr	r3, [pc, #364]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0f0      	beq.n	8008b88 <HAL_RCC_OscConfig+0xc0>
 8008ba6:	e014      	b.n	8008bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ba8:	f7fd fbf6 	bl	8006398 <HAL_GetTick>
 8008bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bae:	e008      	b.n	8008bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bb0:	f7fd fbf2 	bl	8006398 <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	2b64      	cmp	r3, #100	; 0x64
 8008bbc:	d901      	bls.n	8008bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e1f3      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bc2:	4b51      	ldr	r3, [pc, #324]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1f0      	bne.n	8008bb0 <HAL_RCC_OscConfig+0xe8>
 8008bce:	e000      	b.n	8008bd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 0302 	and.w	r3, r3, #2
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d063      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008bde:	4b4a      	ldr	r3, [pc, #296]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f003 030c 	and.w	r3, r3, #12
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00b      	beq.n	8008c02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008bea:	4b47      	ldr	r3, [pc, #284]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	d11c      	bne.n	8008c30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008bf6:	4b44      	ldr	r3, [pc, #272]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d116      	bne.n	8008c30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c02:	4b41      	ldr	r3, [pc, #260]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0302 	and.w	r3, r3, #2
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d005      	beq.n	8008c1a <HAL_RCC_OscConfig+0x152>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d001      	beq.n	8008c1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e1c7      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c1a:	4b3b      	ldr	r3, [pc, #236]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	00db      	lsls	r3, r3, #3
 8008c28:	4937      	ldr	r1, [pc, #220]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c2e:	e03a      	b.n	8008ca6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d020      	beq.n	8008c7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c38:	4b34      	ldr	r3, [pc, #208]	; (8008d0c <HAL_RCC_OscConfig+0x244>)
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c3e:	f7fd fbab 	bl	8006398 <HAL_GetTick>
 8008c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c44:	e008      	b.n	8008c58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c46:	f7fd fba7 	bl	8006398 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d901      	bls.n	8008c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e1a8      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c58:	4b2b      	ldr	r3, [pc, #172]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d0f0      	beq.n	8008c46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c64:	4b28      	ldr	r3, [pc, #160]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	4925      	ldr	r1, [pc, #148]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	600b      	str	r3, [r1, #0]
 8008c78:	e015      	b.n	8008ca6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c7a:	4b24      	ldr	r3, [pc, #144]	; (8008d0c <HAL_RCC_OscConfig+0x244>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c80:	f7fd fb8a 	bl	8006398 <HAL_GetTick>
 8008c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c86:	e008      	b.n	8008c9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c88:	f7fd fb86 	bl	8006398 <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d901      	bls.n	8008c9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e187      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c9a:	4b1b      	ldr	r3, [pc, #108]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1f0      	bne.n	8008c88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0308 	and.w	r3, r3, #8
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d036      	beq.n	8008d20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d016      	beq.n	8008ce8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cba:	4b15      	ldr	r3, [pc, #84]	; (8008d10 <HAL_RCC_OscConfig+0x248>)
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cc0:	f7fd fb6a 	bl	8006398 <HAL_GetTick>
 8008cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cc6:	e008      	b.n	8008cda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008cc8:	f7fd fb66 	bl	8006398 <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d901      	bls.n	8008cda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e167      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cda:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <HAL_RCC_OscConfig+0x240>)
 8008cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0f0      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x200>
 8008ce6:	e01b      	b.n	8008d20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ce8:	4b09      	ldr	r3, [pc, #36]	; (8008d10 <HAL_RCC_OscConfig+0x248>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cee:	f7fd fb53 	bl	8006398 <HAL_GetTick>
 8008cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cf4:	e00e      	b.n	8008d14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008cf6:	f7fd fb4f 	bl	8006398 <HAL_GetTick>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d907      	bls.n	8008d14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e150      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
 8008d08:	40023800 	.word	0x40023800
 8008d0c:	42470000 	.word	0x42470000
 8008d10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d14:	4b88      	ldr	r3, [pc, #544]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d18:	f003 0302 	and.w	r3, r3, #2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1ea      	bne.n	8008cf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 8097 	beq.w	8008e5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d32:	4b81      	ldr	r3, [pc, #516]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10f      	bne.n	8008d5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d3e:	2300      	movs	r3, #0
 8008d40:	60bb      	str	r3, [r7, #8]
 8008d42:	4b7d      	ldr	r3, [pc, #500]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d46:	4a7c      	ldr	r2, [pc, #496]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8008d4e:	4b7a      	ldr	r3, [pc, #488]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d56:	60bb      	str	r3, [r7, #8]
 8008d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d5e:	4b77      	ldr	r3, [pc, #476]	; (8008f3c <HAL_RCC_OscConfig+0x474>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d118      	bne.n	8008d9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d6a:	4b74      	ldr	r3, [pc, #464]	; (8008f3c <HAL_RCC_OscConfig+0x474>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a73      	ldr	r2, [pc, #460]	; (8008f3c <HAL_RCC_OscConfig+0x474>)
 8008d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d76:	f7fd fb0f 	bl	8006398 <HAL_GetTick>
 8008d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d7c:	e008      	b.n	8008d90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d7e:	f7fd fb0b 	bl	8006398 <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d901      	bls.n	8008d90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e10c      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d90:	4b6a      	ldr	r3, [pc, #424]	; (8008f3c <HAL_RCC_OscConfig+0x474>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d0f0      	beq.n	8008d7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d106      	bne.n	8008db2 <HAL_RCC_OscConfig+0x2ea>
 8008da4:	4b64      	ldr	r3, [pc, #400]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da8:	4a63      	ldr	r2, [pc, #396]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008daa:	f043 0301 	orr.w	r3, r3, #1
 8008dae:	6713      	str	r3, [r2, #112]	; 0x70
 8008db0:	e01c      	b.n	8008dec <HAL_RCC_OscConfig+0x324>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	2b05      	cmp	r3, #5
 8008db8:	d10c      	bne.n	8008dd4 <HAL_RCC_OscConfig+0x30c>
 8008dba:	4b5f      	ldr	r3, [pc, #380]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dbe:	4a5e      	ldr	r2, [pc, #376]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008dc0:	f043 0304 	orr.w	r3, r3, #4
 8008dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8008dc6:	4b5c      	ldr	r3, [pc, #368]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dca:	4a5b      	ldr	r2, [pc, #364]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008dcc:	f043 0301 	orr.w	r3, r3, #1
 8008dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8008dd2:	e00b      	b.n	8008dec <HAL_RCC_OscConfig+0x324>
 8008dd4:	4b58      	ldr	r3, [pc, #352]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd8:	4a57      	ldr	r2, [pc, #348]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008dda:	f023 0301 	bic.w	r3, r3, #1
 8008dde:	6713      	str	r3, [r2, #112]	; 0x70
 8008de0:	4b55      	ldr	r3, [pc, #340]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de4:	4a54      	ldr	r2, [pc, #336]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008de6:	f023 0304 	bic.w	r3, r3, #4
 8008dea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d015      	beq.n	8008e20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df4:	f7fd fad0 	bl	8006398 <HAL_GetTick>
 8008df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dfa:	e00a      	b.n	8008e12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dfc:	f7fd facc 	bl	8006398 <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d901      	bls.n	8008e12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e0cb      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e12:	4b49      	ldr	r3, [pc, #292]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0ee      	beq.n	8008dfc <HAL_RCC_OscConfig+0x334>
 8008e1e:	e014      	b.n	8008e4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e20:	f7fd faba 	bl	8006398 <HAL_GetTick>
 8008e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e26:	e00a      	b.n	8008e3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e28:	f7fd fab6 	bl	8006398 <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d901      	bls.n	8008e3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e0b5      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e3e:	4b3e      	ldr	r3, [pc, #248]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e42:	f003 0302 	and.w	r3, r3, #2
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1ee      	bne.n	8008e28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d105      	bne.n	8008e5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e50:	4b39      	ldr	r3, [pc, #228]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e54:	4a38      	ldr	r2, [pc, #224]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 80a1 	beq.w	8008fa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e66:	4b34      	ldr	r3, [pc, #208]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f003 030c 	and.w	r3, r3, #12
 8008e6e:	2b08      	cmp	r3, #8
 8008e70:	d05c      	beq.n	8008f2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d141      	bne.n	8008efe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e7a:	4b31      	ldr	r3, [pc, #196]	; (8008f40 <HAL_RCC_OscConfig+0x478>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e80:	f7fd fa8a 	bl	8006398 <HAL_GetTick>
 8008e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e86:	e008      	b.n	8008e9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e88:	f7fd fa86 	bl	8006398 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d901      	bls.n	8008e9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e087      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e9a:	4b27      	ldr	r3, [pc, #156]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1f0      	bne.n	8008e88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	69da      	ldr	r2, [r3, #28]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a1b      	ldr	r3, [r3, #32]
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb4:	019b      	lsls	r3, r3, #6
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	085b      	lsrs	r3, r3, #1
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	041b      	lsls	r3, r3, #16
 8008ec2:	431a      	orrs	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	061b      	lsls	r3, r3, #24
 8008eca:	491b      	ldr	r1, [pc, #108]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ed0:	4b1b      	ldr	r3, [pc, #108]	; (8008f40 <HAL_RCC_OscConfig+0x478>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ed6:	f7fd fa5f 	bl	8006398 <HAL_GetTick>
 8008eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008edc:	e008      	b.n	8008ef0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ede:	f7fd fa5b 	bl	8006398 <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d901      	bls.n	8008ef0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e05c      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ef0:	4b11      	ldr	r3, [pc, #68]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0f0      	beq.n	8008ede <HAL_RCC_OscConfig+0x416>
 8008efc:	e054      	b.n	8008fa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008efe:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <HAL_RCC_OscConfig+0x478>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f04:	f7fd fa48 	bl	8006398 <HAL_GetTick>
 8008f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f0a:	e008      	b.n	8008f1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f0c:	f7fd fa44 	bl	8006398 <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d901      	bls.n	8008f1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e045      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f1e:	4b06      	ldr	r3, [pc, #24]	; (8008f38 <HAL_RCC_OscConfig+0x470>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1f0      	bne.n	8008f0c <HAL_RCC_OscConfig+0x444>
 8008f2a:	e03d      	b.n	8008fa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d107      	bne.n	8008f44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e038      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
 8008f38:	40023800 	.word	0x40023800
 8008f3c:	40007000 	.word	0x40007000
 8008f40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008f44:	4b1b      	ldr	r3, [pc, #108]	; (8008fb4 <HAL_RCC_OscConfig+0x4ec>)
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d028      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d121      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d11a      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008f74:	4013      	ands	r3, r2
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d111      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8a:	085b      	lsrs	r3, r3, #1
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d107      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d001      	beq.n	8008fa8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e000      	b.n	8008faa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	40023800 	.word	0x40023800

08008fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e0cc      	b.n	8009166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008fcc:	4b68      	ldr	r3, [pc, #416]	; (8009170 <HAL_RCC_ClockConfig+0x1b8>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0307 	and.w	r3, r3, #7
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d90c      	bls.n	8008ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fda:	4b65      	ldr	r3, [pc, #404]	; (8009170 <HAL_RCC_ClockConfig+0x1b8>)
 8008fdc:	683a      	ldr	r2, [r7, #0]
 8008fde:	b2d2      	uxtb	r2, r2
 8008fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fe2:	4b63      	ldr	r3, [pc, #396]	; (8009170 <HAL_RCC_ClockConfig+0x1b8>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d001      	beq.n	8008ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e0b8      	b.n	8009166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d020      	beq.n	8009042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b00      	cmp	r3, #0
 800900a:	d005      	beq.n	8009018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800900c:	4b59      	ldr	r3, [pc, #356]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	4a58      	ldr	r2, [pc, #352]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 8009012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0308 	and.w	r3, r3, #8
 8009020:	2b00      	cmp	r3, #0
 8009022:	d005      	beq.n	8009030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009024:	4b53      	ldr	r3, [pc, #332]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	4a52      	ldr	r2, [pc, #328]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 800902a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800902e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009030:	4b50      	ldr	r3, [pc, #320]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	494d      	ldr	r1, [pc, #308]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 800903e:	4313      	orrs	r3, r2
 8009040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d044      	beq.n	80090d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d107      	bne.n	8009066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009056:	4b47      	ldr	r3, [pc, #284]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d119      	bne.n	8009096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e07f      	b.n	8009166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	2b02      	cmp	r3, #2
 800906c:	d003      	beq.n	8009076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009072:	2b03      	cmp	r3, #3
 8009074:	d107      	bne.n	8009086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009076:	4b3f      	ldr	r3, [pc, #252]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d109      	bne.n	8009096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e06f      	b.n	8009166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009086:	4b3b      	ldr	r3, [pc, #236]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d101      	bne.n	8009096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e067      	b.n	8009166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009096:	4b37      	ldr	r3, [pc, #220]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f023 0203 	bic.w	r2, r3, #3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	4934      	ldr	r1, [pc, #208]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 80090a4:	4313      	orrs	r3, r2
 80090a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090a8:	f7fd f976 	bl	8006398 <HAL_GetTick>
 80090ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090ae:	e00a      	b.n	80090c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090b0:	f7fd f972 	bl	8006398 <HAL_GetTick>
 80090b4:	4602      	mov	r2, r0
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80090be:	4293      	cmp	r3, r2
 80090c0:	d901      	bls.n	80090c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80090c2:	2303      	movs	r3, #3
 80090c4:	e04f      	b.n	8009166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090c6:	4b2b      	ldr	r3, [pc, #172]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f003 020c 	and.w	r2, r3, #12
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d1eb      	bne.n	80090b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80090d8:	4b25      	ldr	r3, [pc, #148]	; (8009170 <HAL_RCC_ClockConfig+0x1b8>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0307 	and.w	r3, r3, #7
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d20c      	bcs.n	8009100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090e6:	4b22      	ldr	r3, [pc, #136]	; (8009170 <HAL_RCC_ClockConfig+0x1b8>)
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	b2d2      	uxtb	r2, r2
 80090ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090ee:	4b20      	ldr	r3, [pc, #128]	; (8009170 <HAL_RCC_ClockConfig+0x1b8>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0307 	and.w	r3, r3, #7
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d001      	beq.n	8009100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e032      	b.n	8009166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0304 	and.w	r3, r3, #4
 8009108:	2b00      	cmp	r3, #0
 800910a:	d008      	beq.n	800911e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800910c:	4b19      	ldr	r3, [pc, #100]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	4916      	ldr	r1, [pc, #88]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 800911a:	4313      	orrs	r3, r2
 800911c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0308 	and.w	r3, r3, #8
 8009126:	2b00      	cmp	r3, #0
 8009128:	d009      	beq.n	800913e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800912a:	4b12      	ldr	r3, [pc, #72]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	490e      	ldr	r1, [pc, #56]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 800913a:	4313      	orrs	r3, r2
 800913c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800913e:	f000 f821 	bl	8009184 <HAL_RCC_GetSysClockFreq>
 8009142:	4602      	mov	r2, r0
 8009144:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <HAL_RCC_ClockConfig+0x1bc>)
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	091b      	lsrs	r3, r3, #4
 800914a:	f003 030f 	and.w	r3, r3, #15
 800914e:	490a      	ldr	r1, [pc, #40]	; (8009178 <HAL_RCC_ClockConfig+0x1c0>)
 8009150:	5ccb      	ldrb	r3, [r1, r3]
 8009152:	fa22 f303 	lsr.w	r3, r2, r3
 8009156:	4a09      	ldr	r2, [pc, #36]	; (800917c <HAL_RCC_ClockConfig+0x1c4>)
 8009158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800915a:	4b09      	ldr	r3, [pc, #36]	; (8009180 <HAL_RCC_ClockConfig+0x1c8>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4618      	mov	r0, r3
 8009160:	f7fc fdb4 	bl	8005ccc <HAL_InitTick>

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	40023c00 	.word	0x40023c00
 8009174:	40023800 	.word	0x40023800
 8009178:	080103d0 	.word	0x080103d0
 800917c:	20000000 	.word	0x20000000
 8009180:	20000004 	.word	0x20000004

08009184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009188:	b094      	sub	sp, #80	; 0x50
 800918a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800918c:	2300      	movs	r3, #0
 800918e:	647b      	str	r3, [r7, #68]	; 0x44
 8009190:	2300      	movs	r3, #0
 8009192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009194:	2300      	movs	r3, #0
 8009196:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009198:	2300      	movs	r3, #0
 800919a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800919c:	4b79      	ldr	r3, [pc, #484]	; (8009384 <HAL_RCC_GetSysClockFreq+0x200>)
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f003 030c 	and.w	r3, r3, #12
 80091a4:	2b08      	cmp	r3, #8
 80091a6:	d00d      	beq.n	80091c4 <HAL_RCC_GetSysClockFreq+0x40>
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	f200 80e1 	bhi.w	8009370 <HAL_RCC_GetSysClockFreq+0x1ec>
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d002      	beq.n	80091b8 <HAL_RCC_GetSysClockFreq+0x34>
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	d003      	beq.n	80091be <HAL_RCC_GetSysClockFreq+0x3a>
 80091b6:	e0db      	b.n	8009370 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80091b8:	4b73      	ldr	r3, [pc, #460]	; (8009388 <HAL_RCC_GetSysClockFreq+0x204>)
 80091ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80091bc:	e0db      	b.n	8009376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80091be:	4b73      	ldr	r3, [pc, #460]	; (800938c <HAL_RCC_GetSysClockFreq+0x208>)
 80091c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80091c2:	e0d8      	b.n	8009376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80091c4:	4b6f      	ldr	r3, [pc, #444]	; (8009384 <HAL_RCC_GetSysClockFreq+0x200>)
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80091ce:	4b6d      	ldr	r3, [pc, #436]	; (8009384 <HAL_RCC_GetSysClockFreq+0x200>)
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d063      	beq.n	80092a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091da:	4b6a      	ldr	r3, [pc, #424]	; (8009384 <HAL_RCC_GetSysClockFreq+0x200>)
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	099b      	lsrs	r3, r3, #6
 80091e0:	2200      	movs	r2, #0
 80091e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80091e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ec:	633b      	str	r3, [r7, #48]	; 0x30
 80091ee:	2300      	movs	r3, #0
 80091f0:	637b      	str	r3, [r7, #52]	; 0x34
 80091f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80091f6:	4622      	mov	r2, r4
 80091f8:	462b      	mov	r3, r5
 80091fa:	f04f 0000 	mov.w	r0, #0
 80091fe:	f04f 0100 	mov.w	r1, #0
 8009202:	0159      	lsls	r1, r3, #5
 8009204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009208:	0150      	lsls	r0, r2, #5
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	4621      	mov	r1, r4
 8009210:	1a51      	subs	r1, r2, r1
 8009212:	6139      	str	r1, [r7, #16]
 8009214:	4629      	mov	r1, r5
 8009216:	eb63 0301 	sbc.w	r3, r3, r1
 800921a:	617b      	str	r3, [r7, #20]
 800921c:	f04f 0200 	mov.w	r2, #0
 8009220:	f04f 0300 	mov.w	r3, #0
 8009224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009228:	4659      	mov	r1, fp
 800922a:	018b      	lsls	r3, r1, #6
 800922c:	4651      	mov	r1, sl
 800922e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009232:	4651      	mov	r1, sl
 8009234:	018a      	lsls	r2, r1, #6
 8009236:	4651      	mov	r1, sl
 8009238:	ebb2 0801 	subs.w	r8, r2, r1
 800923c:	4659      	mov	r1, fp
 800923e:	eb63 0901 	sbc.w	r9, r3, r1
 8009242:	f04f 0200 	mov.w	r2, #0
 8009246:	f04f 0300 	mov.w	r3, #0
 800924a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800924e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009256:	4690      	mov	r8, r2
 8009258:	4699      	mov	r9, r3
 800925a:	4623      	mov	r3, r4
 800925c:	eb18 0303 	adds.w	r3, r8, r3
 8009260:	60bb      	str	r3, [r7, #8]
 8009262:	462b      	mov	r3, r5
 8009264:	eb49 0303 	adc.w	r3, r9, r3
 8009268:	60fb      	str	r3, [r7, #12]
 800926a:	f04f 0200 	mov.w	r2, #0
 800926e:	f04f 0300 	mov.w	r3, #0
 8009272:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009276:	4629      	mov	r1, r5
 8009278:	024b      	lsls	r3, r1, #9
 800927a:	4621      	mov	r1, r4
 800927c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009280:	4621      	mov	r1, r4
 8009282:	024a      	lsls	r2, r1, #9
 8009284:	4610      	mov	r0, r2
 8009286:	4619      	mov	r1, r3
 8009288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800928a:	2200      	movs	r2, #0
 800928c:	62bb      	str	r3, [r7, #40]	; 0x28
 800928e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009290:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009294:	f7f7 fc6a 	bl	8000b6c <__aeabi_uldivmod>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4613      	mov	r3, r2
 800929e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092a0:	e058      	b.n	8009354 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092a2:	4b38      	ldr	r3, [pc, #224]	; (8009384 <HAL_RCC_GetSysClockFreq+0x200>)
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	099b      	lsrs	r3, r3, #6
 80092a8:	2200      	movs	r2, #0
 80092aa:	4618      	mov	r0, r3
 80092ac:	4611      	mov	r1, r2
 80092ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80092b2:	623b      	str	r3, [r7, #32]
 80092b4:	2300      	movs	r3, #0
 80092b6:	627b      	str	r3, [r7, #36]	; 0x24
 80092b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80092bc:	4642      	mov	r2, r8
 80092be:	464b      	mov	r3, r9
 80092c0:	f04f 0000 	mov.w	r0, #0
 80092c4:	f04f 0100 	mov.w	r1, #0
 80092c8:	0159      	lsls	r1, r3, #5
 80092ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092ce:	0150      	lsls	r0, r2, #5
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4641      	mov	r1, r8
 80092d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80092da:	4649      	mov	r1, r9
 80092dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80092e0:	f04f 0200 	mov.w	r2, #0
 80092e4:	f04f 0300 	mov.w	r3, #0
 80092e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80092ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80092f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80092f4:	ebb2 040a 	subs.w	r4, r2, sl
 80092f8:	eb63 050b 	sbc.w	r5, r3, fp
 80092fc:	f04f 0200 	mov.w	r2, #0
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	00eb      	lsls	r3, r5, #3
 8009306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800930a:	00e2      	lsls	r2, r4, #3
 800930c:	4614      	mov	r4, r2
 800930e:	461d      	mov	r5, r3
 8009310:	4643      	mov	r3, r8
 8009312:	18e3      	adds	r3, r4, r3
 8009314:	603b      	str	r3, [r7, #0]
 8009316:	464b      	mov	r3, r9
 8009318:	eb45 0303 	adc.w	r3, r5, r3
 800931c:	607b      	str	r3, [r7, #4]
 800931e:	f04f 0200 	mov.w	r2, #0
 8009322:	f04f 0300 	mov.w	r3, #0
 8009326:	e9d7 4500 	ldrd	r4, r5, [r7]
 800932a:	4629      	mov	r1, r5
 800932c:	028b      	lsls	r3, r1, #10
 800932e:	4621      	mov	r1, r4
 8009330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009334:	4621      	mov	r1, r4
 8009336:	028a      	lsls	r2, r1, #10
 8009338:	4610      	mov	r0, r2
 800933a:	4619      	mov	r1, r3
 800933c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800933e:	2200      	movs	r2, #0
 8009340:	61bb      	str	r3, [r7, #24]
 8009342:	61fa      	str	r2, [r7, #28]
 8009344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009348:	f7f7 fc10 	bl	8000b6c <__aeabi_uldivmod>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4613      	mov	r3, r2
 8009352:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009354:	4b0b      	ldr	r3, [pc, #44]	; (8009384 <HAL_RCC_GetSysClockFreq+0x200>)
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	0c1b      	lsrs	r3, r3, #16
 800935a:	f003 0303 	and.w	r3, r3, #3
 800935e:	3301      	adds	r3, #1
 8009360:	005b      	lsls	r3, r3, #1
 8009362:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009364:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009368:	fbb2 f3f3 	udiv	r3, r2, r3
 800936c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800936e:	e002      	b.n	8009376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009370:	4b05      	ldr	r3, [pc, #20]	; (8009388 <HAL_RCC_GetSysClockFreq+0x204>)
 8009372:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009378:	4618      	mov	r0, r3
 800937a:	3750      	adds	r7, #80	; 0x50
 800937c:	46bd      	mov	sp, r7
 800937e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009382:	bf00      	nop
 8009384:	40023800 	.word	0x40023800
 8009388:	00f42400 	.word	0x00f42400
 800938c:	007a1200 	.word	0x007a1200

08009390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009390:	b480      	push	{r7}
 8009392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009394:	4b03      	ldr	r3, [pc, #12]	; (80093a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009396:	681b      	ldr	r3, [r3, #0]
}
 8009398:	4618      	mov	r0, r3
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	20000000 	.word	0x20000000

080093a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80093ac:	f7ff fff0 	bl	8009390 <HAL_RCC_GetHCLKFreq>
 80093b0:	4602      	mov	r2, r0
 80093b2:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	0b5b      	lsrs	r3, r3, #13
 80093b8:	f003 0307 	and.w	r3, r3, #7
 80093bc:	4903      	ldr	r1, [pc, #12]	; (80093cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80093be:	5ccb      	ldrb	r3, [r1, r3]
 80093c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	40023800 	.word	0x40023800
 80093cc:	080103e0 	.word	0x080103e0

080093d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	220f      	movs	r2, #15
 80093de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093e0:	4b12      	ldr	r3, [pc, #72]	; (800942c <HAL_RCC_GetClockConfig+0x5c>)
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	f003 0203 	and.w	r2, r3, #3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80093ec:	4b0f      	ldr	r3, [pc, #60]	; (800942c <HAL_RCC_GetClockConfig+0x5c>)
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80093f8:	4b0c      	ldr	r3, [pc, #48]	; (800942c <HAL_RCC_GetClockConfig+0x5c>)
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009404:	4b09      	ldr	r3, [pc, #36]	; (800942c <HAL_RCC_GetClockConfig+0x5c>)
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	08db      	lsrs	r3, r3, #3
 800940a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009412:	4b07      	ldr	r3, [pc, #28]	; (8009430 <HAL_RCC_GetClockConfig+0x60>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0207 	and.w	r2, r3, #7
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	601a      	str	r2, [r3, #0]
}
 800941e:	bf00      	nop
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	40023800 	.word	0x40023800
 8009430:	40023c00 	.word	0x40023c00

08009434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e041      	b.n	80094ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d106      	bne.n	8009460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f839 	bl	80094d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2202      	movs	r2, #2
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	3304      	adds	r3, #4
 8009470:	4619      	mov	r1, r3
 8009472:	4610      	mov	r0, r2
 8009474:	f000 f9c0 	bl	80097f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b083      	sub	sp, #12
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80094da:	bf00      	nop
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
	...

080094e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d001      	beq.n	8009500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e04e      	b.n	800959e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2202      	movs	r2, #2
 8009504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f042 0201 	orr.w	r2, r2, #1
 8009516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a23      	ldr	r2, [pc, #140]	; (80095ac <HAL_TIM_Base_Start_IT+0xc4>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d022      	beq.n	8009568 <HAL_TIM_Base_Start_IT+0x80>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800952a:	d01d      	beq.n	8009568 <HAL_TIM_Base_Start_IT+0x80>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a1f      	ldr	r2, [pc, #124]	; (80095b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d018      	beq.n	8009568 <HAL_TIM_Base_Start_IT+0x80>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a1e      	ldr	r2, [pc, #120]	; (80095b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d013      	beq.n	8009568 <HAL_TIM_Base_Start_IT+0x80>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a1c      	ldr	r2, [pc, #112]	; (80095b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d00e      	beq.n	8009568 <HAL_TIM_Base_Start_IT+0x80>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a1b      	ldr	r2, [pc, #108]	; (80095bc <HAL_TIM_Base_Start_IT+0xd4>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d009      	beq.n	8009568 <HAL_TIM_Base_Start_IT+0x80>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a19      	ldr	r2, [pc, #100]	; (80095c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d004      	beq.n	8009568 <HAL_TIM_Base_Start_IT+0x80>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a18      	ldr	r2, [pc, #96]	; (80095c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d111      	bne.n	800958c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f003 0307 	and.w	r3, r3, #7
 8009572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2b06      	cmp	r3, #6
 8009578:	d010      	beq.n	800959c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f042 0201 	orr.w	r2, r2, #1
 8009588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800958a:	e007      	b.n	800959c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f042 0201 	orr.w	r2, r2, #1
 800959a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	40010000 	.word	0x40010000
 80095b0:	40000400 	.word	0x40000400
 80095b4:	40000800 	.word	0x40000800
 80095b8:	40000c00 	.word	0x40000c00
 80095bc:	40010400 	.word	0x40010400
 80095c0:	40014000 	.word	0x40014000
 80095c4:	40001800 	.word	0x40001800

080095c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	f003 0302 	and.w	r3, r3, #2
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d020      	beq.n	800962c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f003 0302 	and.w	r3, r3, #2
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d01b      	beq.n	800962c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f06f 0202 	mvn.w	r2, #2
 80095fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	f003 0303 	and.w	r3, r3, #3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f8d2 	bl	80097bc <HAL_TIM_IC_CaptureCallback>
 8009618:	e005      	b.n	8009626 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f8c4 	bl	80097a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f8d5 	bl	80097d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	f003 0304 	and.w	r3, r3, #4
 8009632:	2b00      	cmp	r3, #0
 8009634:	d020      	beq.n	8009678 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f003 0304 	and.w	r3, r3, #4
 800963c:	2b00      	cmp	r3, #0
 800963e:	d01b      	beq.n	8009678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f06f 0204 	mvn.w	r2, #4
 8009648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2202      	movs	r2, #2
 800964e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800965a:	2b00      	cmp	r3, #0
 800965c:	d003      	beq.n	8009666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f8ac 	bl	80097bc <HAL_TIM_IC_CaptureCallback>
 8009664:	e005      	b.n	8009672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f89e 	bl	80097a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f8af 	bl	80097d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f003 0308 	and.w	r3, r3, #8
 800967e:	2b00      	cmp	r3, #0
 8009680:	d020      	beq.n	80096c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f003 0308 	and.w	r3, r3, #8
 8009688:	2b00      	cmp	r3, #0
 800968a:	d01b      	beq.n	80096c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f06f 0208 	mvn.w	r2, #8
 8009694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2204      	movs	r2, #4
 800969a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	f003 0303 	and.w	r3, r3, #3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f886 	bl	80097bc <HAL_TIM_IC_CaptureCallback>
 80096b0:	e005      	b.n	80096be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f878 	bl	80097a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f889 	bl	80097d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f003 0310 	and.w	r3, r3, #16
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d020      	beq.n	8009710 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f003 0310 	and.w	r3, r3, #16
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d01b      	beq.n	8009710 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f06f 0210 	mvn.w	r2, #16
 80096e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2208      	movs	r2, #8
 80096e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f860 	bl	80097bc <HAL_TIM_IC_CaptureCallback>
 80096fc:	e005      	b.n	800970a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f852 	bl	80097a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f863 	bl	80097d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00c      	beq.n	8009734 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f003 0301 	and.w	r3, r3, #1
 8009720:	2b00      	cmp	r3, #0
 8009722:	d007      	beq.n	8009734 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f06f 0201 	mvn.w	r2, #1
 800972c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7fb f8a8 	bl	8004884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00c      	beq.n	8009758 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009744:	2b00      	cmp	r3, #0
 8009746:	d007      	beq.n	8009758 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f906 	bl	8009964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00c      	beq.n	800977c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009768:	2b00      	cmp	r3, #0
 800976a:	d007      	beq.n	800977c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f834 	bl	80097e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	f003 0320 	and.w	r3, r3, #32
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00c      	beq.n	80097a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f003 0320 	and.w	r3, r3, #32
 800978c:	2b00      	cmp	r3, #0
 800978e:	d007      	beq.n	80097a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f06f 0220 	mvn.w	r2, #32
 8009798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f8d8 	bl	8009950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097a0:	bf00      	nop
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a46      	ldr	r2, [pc, #280]	; (8009924 <TIM_Base_SetConfig+0x12c>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d013      	beq.n	8009838 <TIM_Base_SetConfig+0x40>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009816:	d00f      	beq.n	8009838 <TIM_Base_SetConfig+0x40>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a43      	ldr	r2, [pc, #268]	; (8009928 <TIM_Base_SetConfig+0x130>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d00b      	beq.n	8009838 <TIM_Base_SetConfig+0x40>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a42      	ldr	r2, [pc, #264]	; (800992c <TIM_Base_SetConfig+0x134>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d007      	beq.n	8009838 <TIM_Base_SetConfig+0x40>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a41      	ldr	r2, [pc, #260]	; (8009930 <TIM_Base_SetConfig+0x138>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d003      	beq.n	8009838 <TIM_Base_SetConfig+0x40>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a40      	ldr	r2, [pc, #256]	; (8009934 <TIM_Base_SetConfig+0x13c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d108      	bne.n	800984a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800983e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	4313      	orrs	r3, r2
 8009848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a35      	ldr	r2, [pc, #212]	; (8009924 <TIM_Base_SetConfig+0x12c>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d02b      	beq.n	80098aa <TIM_Base_SetConfig+0xb2>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009858:	d027      	beq.n	80098aa <TIM_Base_SetConfig+0xb2>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a32      	ldr	r2, [pc, #200]	; (8009928 <TIM_Base_SetConfig+0x130>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d023      	beq.n	80098aa <TIM_Base_SetConfig+0xb2>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a31      	ldr	r2, [pc, #196]	; (800992c <TIM_Base_SetConfig+0x134>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d01f      	beq.n	80098aa <TIM_Base_SetConfig+0xb2>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a30      	ldr	r2, [pc, #192]	; (8009930 <TIM_Base_SetConfig+0x138>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d01b      	beq.n	80098aa <TIM_Base_SetConfig+0xb2>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a2f      	ldr	r2, [pc, #188]	; (8009934 <TIM_Base_SetConfig+0x13c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d017      	beq.n	80098aa <TIM_Base_SetConfig+0xb2>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a2e      	ldr	r2, [pc, #184]	; (8009938 <TIM_Base_SetConfig+0x140>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d013      	beq.n	80098aa <TIM_Base_SetConfig+0xb2>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a2d      	ldr	r2, [pc, #180]	; (800993c <TIM_Base_SetConfig+0x144>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d00f      	beq.n	80098aa <TIM_Base_SetConfig+0xb2>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a2c      	ldr	r2, [pc, #176]	; (8009940 <TIM_Base_SetConfig+0x148>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d00b      	beq.n	80098aa <TIM_Base_SetConfig+0xb2>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a2b      	ldr	r2, [pc, #172]	; (8009944 <TIM_Base_SetConfig+0x14c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d007      	beq.n	80098aa <TIM_Base_SetConfig+0xb2>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a2a      	ldr	r2, [pc, #168]	; (8009948 <TIM_Base_SetConfig+0x150>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d003      	beq.n	80098aa <TIM_Base_SetConfig+0xb2>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a29      	ldr	r2, [pc, #164]	; (800994c <TIM_Base_SetConfig+0x154>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d108      	bne.n	80098bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	689a      	ldr	r2, [r3, #8]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a10      	ldr	r2, [pc, #64]	; (8009924 <TIM_Base_SetConfig+0x12c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d003      	beq.n	80098f0 <TIM_Base_SetConfig+0xf8>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a12      	ldr	r2, [pc, #72]	; (8009934 <TIM_Base_SetConfig+0x13c>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d103      	bne.n	80098f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	691a      	ldr	r2, [r3, #16]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	2b01      	cmp	r3, #1
 8009908:	d105      	bne.n	8009916 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	f023 0201 	bic.w	r2, r3, #1
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	611a      	str	r2, [r3, #16]
  }
}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	40010000 	.word	0x40010000
 8009928:	40000400 	.word	0x40000400
 800992c:	40000800 	.word	0x40000800
 8009930:	40000c00 	.word	0x40000c00
 8009934:	40010400 	.word	0x40010400
 8009938:	40014000 	.word	0x40014000
 800993c:	40014400 	.word	0x40014400
 8009940:	40014800 	.word	0x40014800
 8009944:	40001800 	.word	0x40001800
 8009948:	40001c00 	.word	0x40001c00
 800994c:	40002000 	.word	0x40002000

08009950 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009978:	b084      	sub	sp, #16
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	f107 001c 	add.w	r0, r7, #28
 8009986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800998a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800998e:	2b01      	cmp	r3, #1
 8009990:	d123      	bne.n	80099da <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009996:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80099a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80099ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d105      	bne.n	80099ce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 fae2 	bl	800af98 <USB_CoreReset>
 80099d4:	4603      	mov	r3, r0
 80099d6:	73fb      	strb	r3, [r7, #15]
 80099d8:	e01b      	b.n	8009a12 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f001 fad6 	bl	800af98 <USB_CoreReset>
 80099ec:	4603      	mov	r3, r0
 80099ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80099f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d106      	bne.n	8009a06 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38
 8009a04:	e005      	b.n	8009a12 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009a12:	7fbb      	ldrb	r3, [r7, #30]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d10b      	bne.n	8009a30 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f043 0206 	orr.w	r2, r3, #6
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f043 0220 	orr.w	r2, r3, #32
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a3c:	b004      	add	sp, #16
 8009a3e:	4770      	bx	lr

08009a40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009a4e:	79fb      	ldrb	r3, [r7, #7]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d165      	bne.n	8009b20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	4a41      	ldr	r2, [pc, #260]	; (8009b5c <USB_SetTurnaroundTime+0x11c>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d906      	bls.n	8009a6a <USB_SetTurnaroundTime+0x2a>
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	4a40      	ldr	r2, [pc, #256]	; (8009b60 <USB_SetTurnaroundTime+0x120>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d202      	bcs.n	8009a6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009a64:	230f      	movs	r3, #15
 8009a66:	617b      	str	r3, [r7, #20]
 8009a68:	e062      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	4a3c      	ldr	r2, [pc, #240]	; (8009b60 <USB_SetTurnaroundTime+0x120>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d306      	bcc.n	8009a80 <USB_SetTurnaroundTime+0x40>
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	4a3b      	ldr	r2, [pc, #236]	; (8009b64 <USB_SetTurnaroundTime+0x124>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d202      	bcs.n	8009a80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009a7a:	230e      	movs	r3, #14
 8009a7c:	617b      	str	r3, [r7, #20]
 8009a7e:	e057      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	4a38      	ldr	r2, [pc, #224]	; (8009b64 <USB_SetTurnaroundTime+0x124>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d306      	bcc.n	8009a96 <USB_SetTurnaroundTime+0x56>
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	4a37      	ldr	r2, [pc, #220]	; (8009b68 <USB_SetTurnaroundTime+0x128>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d202      	bcs.n	8009a96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009a90:	230d      	movs	r3, #13
 8009a92:	617b      	str	r3, [r7, #20]
 8009a94:	e04c      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	4a33      	ldr	r2, [pc, #204]	; (8009b68 <USB_SetTurnaroundTime+0x128>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d306      	bcc.n	8009aac <USB_SetTurnaroundTime+0x6c>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	4a32      	ldr	r2, [pc, #200]	; (8009b6c <USB_SetTurnaroundTime+0x12c>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d802      	bhi.n	8009aac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009aa6:	230c      	movs	r3, #12
 8009aa8:	617b      	str	r3, [r7, #20]
 8009aaa:	e041      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	4a2f      	ldr	r2, [pc, #188]	; (8009b6c <USB_SetTurnaroundTime+0x12c>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d906      	bls.n	8009ac2 <USB_SetTurnaroundTime+0x82>
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	4a2e      	ldr	r2, [pc, #184]	; (8009b70 <USB_SetTurnaroundTime+0x130>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d802      	bhi.n	8009ac2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009abc:	230b      	movs	r3, #11
 8009abe:	617b      	str	r3, [r7, #20]
 8009ac0:	e036      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	4a2a      	ldr	r2, [pc, #168]	; (8009b70 <USB_SetTurnaroundTime+0x130>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d906      	bls.n	8009ad8 <USB_SetTurnaroundTime+0x98>
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	4a29      	ldr	r2, [pc, #164]	; (8009b74 <USB_SetTurnaroundTime+0x134>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d802      	bhi.n	8009ad8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009ad2:	230a      	movs	r3, #10
 8009ad4:	617b      	str	r3, [r7, #20]
 8009ad6:	e02b      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	4a26      	ldr	r2, [pc, #152]	; (8009b74 <USB_SetTurnaroundTime+0x134>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d906      	bls.n	8009aee <USB_SetTurnaroundTime+0xae>
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	4a25      	ldr	r2, [pc, #148]	; (8009b78 <USB_SetTurnaroundTime+0x138>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d202      	bcs.n	8009aee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ae8:	2309      	movs	r3, #9
 8009aea:	617b      	str	r3, [r7, #20]
 8009aec:	e020      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	4a21      	ldr	r2, [pc, #132]	; (8009b78 <USB_SetTurnaroundTime+0x138>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d306      	bcc.n	8009b04 <USB_SetTurnaroundTime+0xc4>
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	4a20      	ldr	r2, [pc, #128]	; (8009b7c <USB_SetTurnaroundTime+0x13c>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d802      	bhi.n	8009b04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009afe:	2308      	movs	r3, #8
 8009b00:	617b      	str	r3, [r7, #20]
 8009b02:	e015      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	4a1d      	ldr	r2, [pc, #116]	; (8009b7c <USB_SetTurnaroundTime+0x13c>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d906      	bls.n	8009b1a <USB_SetTurnaroundTime+0xda>
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	4a1c      	ldr	r2, [pc, #112]	; (8009b80 <USB_SetTurnaroundTime+0x140>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d202      	bcs.n	8009b1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009b14:	2307      	movs	r3, #7
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	e00a      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009b1a:	2306      	movs	r3, #6
 8009b1c:	617b      	str	r3, [r7, #20]
 8009b1e:	e007      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d102      	bne.n	8009b2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009b26:	2309      	movs	r3, #9
 8009b28:	617b      	str	r3, [r7, #20]
 8009b2a:	e001      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009b2c:	2309      	movs	r3, #9
 8009b2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	029b      	lsls	r3, r3, #10
 8009b44:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009b48:	431a      	orrs	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	371c      	adds	r7, #28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	00d8acbf 	.word	0x00d8acbf
 8009b60:	00e4e1c0 	.word	0x00e4e1c0
 8009b64:	00f42400 	.word	0x00f42400
 8009b68:	01067380 	.word	0x01067380
 8009b6c:	011a499f 	.word	0x011a499f
 8009b70:	01312cff 	.word	0x01312cff
 8009b74:	014ca43f 	.word	0x014ca43f
 8009b78:	016e3600 	.word	0x016e3600
 8009b7c:	01a6ab1f 	.word	0x01a6ab1f
 8009b80:	01e84800 	.word	0x01e84800

08009b84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	f043 0201 	orr.w	r2, r3, #1
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	f023 0201 	bic.w	r2, r3, #1
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009be4:	78fb      	ldrb	r3, [r7, #3]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d115      	bne.n	8009c16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009bf6:	200a      	movs	r0, #10
 8009bf8:	f7fc fbda 	bl	80063b0 <HAL_Delay>
      ms += 10U;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	330a      	adds	r3, #10
 8009c00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f001 f939 	bl	800ae7a <USB_GetMode>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d01e      	beq.n	8009c4c <USB_SetCurrentMode+0x84>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2bc7      	cmp	r3, #199	; 0xc7
 8009c12:	d9f0      	bls.n	8009bf6 <USB_SetCurrentMode+0x2e>
 8009c14:	e01a      	b.n	8009c4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009c16:	78fb      	ldrb	r3, [r7, #3]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d115      	bne.n	8009c48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009c28:	200a      	movs	r0, #10
 8009c2a:	f7fc fbc1 	bl	80063b0 <HAL_Delay>
      ms += 10U;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	330a      	adds	r3, #10
 8009c32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f001 f920 	bl	800ae7a <USB_GetMode>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d005      	beq.n	8009c4c <USB_SetCurrentMode+0x84>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2bc7      	cmp	r3, #199	; 0xc7
 8009c44:	d9f0      	bls.n	8009c28 <USB_SetCurrentMode+0x60>
 8009c46:	e001      	b.n	8009c4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e005      	b.n	8009c58 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2bc8      	cmp	r3, #200	; 0xc8
 8009c50:	d101      	bne.n	8009c56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e000      	b.n	8009c58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c60:	b084      	sub	sp, #16
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b086      	sub	sp, #24
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	613b      	str	r3, [r7, #16]
 8009c7e:	e009      	b.n	8009c94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	3340      	adds	r3, #64	; 0x40
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	3301      	adds	r3, #1
 8009c92:	613b      	str	r3, [r7, #16]
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	2b0e      	cmp	r3, #14
 8009c98:	d9f2      	bls.n	8009c80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009c9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d11c      	bne.n	8009cdc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cb0:	f043 0302 	orr.w	r3, r3, #2
 8009cb4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	639a      	str	r2, [r3, #56]	; 0x38
 8009cda:	e00b      	b.n	8009cf4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d00:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d10d      	bne.n	8009d24 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d104      	bne.n	8009d1a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009d10:	2100      	movs	r1, #0
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f968 	bl	8009fe8 <USB_SetDevSpeed>
 8009d18:	e008      	b.n	8009d2c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f963 	bl	8009fe8 <USB_SetDevSpeed>
 8009d22:	e003      	b.n	8009d2c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009d24:	2103      	movs	r1, #3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f95e 	bl	8009fe8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d2c:	2110      	movs	r1, #16
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f8fa 	bl	8009f28 <USB_FlushTxFifo>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f924 	bl	8009f8c <USB_FlushRxFifo>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d54:	461a      	mov	r2, r3
 8009d56:	2300      	movs	r3, #0
 8009d58:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d60:	461a      	mov	r2, r3
 8009d62:	2300      	movs	r3, #0
 8009d64:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	2300      	movs	r3, #0
 8009d70:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d72:	2300      	movs	r3, #0
 8009d74:	613b      	str	r3, [r7, #16]
 8009d76:	e043      	b.n	8009e00 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	015a      	lsls	r2, r3, #5
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4413      	add	r3, r2
 8009d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d8e:	d118      	bne.n	8009dc2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10a      	bne.n	8009dac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	015a      	lsls	r2, r3, #5
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009da2:	461a      	mov	r2, r3
 8009da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009da8:	6013      	str	r3, [r2, #0]
 8009daa:	e013      	b.n	8009dd4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db8:	461a      	mov	r2, r3
 8009dba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	e008      	b.n	8009dd4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	015a      	lsls	r2, r3, #5
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	4413      	add	r3, r2
 8009dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dce:	461a      	mov	r2, r3
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	015a      	lsls	r2, r3, #5
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4413      	add	r3, r2
 8009ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de0:	461a      	mov	r2, r3
 8009de2:	2300      	movs	r3, #0
 8009de4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	015a      	lsls	r2, r3, #5
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	4413      	add	r3, r2
 8009dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df2:	461a      	mov	r2, r3
 8009df4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009df8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	613b      	str	r3, [r7, #16]
 8009e00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009e04:	461a      	mov	r2, r3
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d3b5      	bcc.n	8009d78 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	613b      	str	r3, [r7, #16]
 8009e10:	e043      	b.n	8009e9a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	015a      	lsls	r2, r3, #5
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e28:	d118      	bne.n	8009e5c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10a      	bne.n	8009e46 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	e013      	b.n	8009e6e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e52:	461a      	mov	r2, r3
 8009e54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e58:	6013      	str	r3, [r2, #0]
 8009e5a:	e008      	b.n	8009e6e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e68:	461a      	mov	r2, r3
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	015a      	lsls	r2, r3, #5
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	4413      	add	r3, r2
 8009e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	015a      	lsls	r2, r3, #5
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	4413      	add	r3, r2
 8009e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	3301      	adds	r3, #1
 8009e98:	613b      	str	r3, [r7, #16]
 8009e9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d3b5      	bcc.n	8009e12 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009eb8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009ec6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d105      	bne.n	8009edc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	f043 0210 	orr.w	r2, r3, #16
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	699a      	ldr	r2, [r3, #24]
 8009ee0:	4b10      	ldr	r3, [pc, #64]	; (8009f24 <USB_DevInit+0x2c4>)
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ee8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d005      	beq.n	8009efc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	f043 0208 	orr.w	r2, r3, #8
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009efc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d107      	bne.n	8009f14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f0c:	f043 0304 	orr.w	r3, r3, #4
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f20:	b004      	add	sp, #16
 8009f22:	4770      	bx	lr
 8009f24:	803c3800 	.word	0x803c3800

08009f28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009f42:	d901      	bls.n	8009f48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e01b      	b.n	8009f80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	daf2      	bge.n	8009f36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009f50:	2300      	movs	r3, #0
 8009f52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	019b      	lsls	r3, r3, #6
 8009f58:	f043 0220 	orr.w	r2, r3, #32
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	3301      	adds	r3, #1
 8009f64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009f6c:	d901      	bls.n	8009f72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e006      	b.n	8009f80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	f003 0320 	and.w	r3, r3, #32
 8009f7a:	2b20      	cmp	r3, #32
 8009f7c:	d0f0      	beq.n	8009f60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f94:	2300      	movs	r3, #0
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009fa4:	d901      	bls.n	8009faa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e018      	b.n	8009fdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	daf2      	bge.n	8009f98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2210      	movs	r2, #16
 8009fba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009fc8:	d901      	bls.n	8009fce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e006      	b.n	8009fdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	f003 0310 	and.w	r3, r3, #16
 8009fd6:	2b10      	cmp	r3, #16
 8009fd8:	d0f0      	beq.n	8009fbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	78fb      	ldrb	r3, [r7, #3]
 800a002:	68f9      	ldr	r1, [r7, #12]
 800a004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a008:	4313      	orrs	r3, r2
 800a00a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b087      	sub	sp, #28
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	f003 0306 	and.w	r3, r3, #6
 800a032:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d102      	bne.n	800a040 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a03a:	2300      	movs	r3, #0
 800a03c:	75fb      	strb	r3, [r7, #23]
 800a03e:	e00a      	b.n	800a056 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b02      	cmp	r3, #2
 800a044:	d002      	beq.n	800a04c <USB_GetDevSpeed+0x32>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2b06      	cmp	r3, #6
 800a04a:	d102      	bne.n	800a052 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a04c:	2302      	movs	r3, #2
 800a04e:	75fb      	strb	r3, [r7, #23]
 800a050:	e001      	b.n	800a056 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a052:	230f      	movs	r3, #15
 800a054:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a056:	7dfb      	ldrb	r3, [r7, #23]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	371c      	adds	r7, #28
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	785b      	ldrb	r3, [r3, #1]
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d13a      	bne.n	800a0f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a086:	69da      	ldr	r2, [r3, #28]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	f003 030f 	and.w	r3, r3, #15
 800a090:	2101      	movs	r1, #1
 800a092:	fa01 f303 	lsl.w	r3, r1, r3
 800a096:	b29b      	uxth	r3, r3
 800a098:	68f9      	ldr	r1, [r7, #12]
 800a09a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	015a      	lsls	r2, r3, #5
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d155      	bne.n	800a164 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	791b      	ldrb	r3, [r3, #4]
 800a0d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	059b      	lsls	r3, r3, #22
 800a0da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	0151      	lsls	r1, r2, #5
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	440a      	add	r2, r1
 800a0e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	e036      	b.n	800a164 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0fc:	69da      	ldr	r2, [r3, #28]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	f003 030f 	and.w	r3, r3, #15
 800a106:	2101      	movs	r1, #1
 800a108:	fa01 f303 	lsl.w	r3, r1, r3
 800a10c:	041b      	lsls	r3, r3, #16
 800a10e:	68f9      	ldr	r1, [r7, #12]
 800a110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a114:	4313      	orrs	r3, r2
 800a116:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d11a      	bne.n	800a164 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	4413      	add	r3, r2
 800a136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	791b      	ldrb	r3, [r3, #4]
 800a148:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a14a:	430b      	orrs	r3, r1
 800a14c:	4313      	orrs	r3, r2
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	0151      	lsls	r1, r2, #5
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	440a      	add	r2, r1
 800a156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a15a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a15e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a162:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
	...

0800a174 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	785b      	ldrb	r3, [r3, #1]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d161      	bne.n	800a254 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	015a      	lsls	r2, r3, #5
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	4413      	add	r3, r2
 800a198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1a6:	d11f      	bne.n	800a1e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	0151      	lsls	r1, r2, #5
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	440a      	add	r2, r1
 800a1be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a1c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	0151      	lsls	r1, r2, #5
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	440a      	add	r2, r1
 800a1de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	f003 030f 	and.w	r3, r3, #15
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	43db      	mvns	r3, r3
 800a202:	68f9      	ldr	r1, [r7, #12]
 800a204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a208:	4013      	ands	r3, r2
 800a20a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a212:	69da      	ldr	r2, [r3, #28]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	f003 030f 	and.w	r3, r3, #15
 800a21c:	2101      	movs	r1, #1
 800a21e:	fa01 f303 	lsl.w	r3, r1, r3
 800a222:	b29b      	uxth	r3, r3
 800a224:	43db      	mvns	r3, r3
 800a226:	68f9      	ldr	r1, [r7, #12]
 800a228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a22c:	4013      	ands	r3, r2
 800a22e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	0159      	lsls	r1, r3, #5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	440b      	add	r3, r1
 800a246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a24a:	4619      	mov	r1, r3
 800a24c:	4b35      	ldr	r3, [pc, #212]	; (800a324 <USB_DeactivateEndpoint+0x1b0>)
 800a24e:	4013      	ands	r3, r2
 800a250:	600b      	str	r3, [r1, #0]
 800a252:	e060      	b.n	800a316 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a26a:	d11f      	bne.n	800a2ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	4413      	add	r3, r2
 800a274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	0151      	lsls	r1, r2, #5
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	440a      	add	r2, r1
 800a282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a286:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a28a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	0151      	lsls	r1, r2, #5
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	f003 030f 	and.w	r3, r3, #15
 800a2bc:	2101      	movs	r1, #1
 800a2be:	fa01 f303 	lsl.w	r3, r1, r3
 800a2c2:	041b      	lsls	r3, r3, #16
 800a2c4:	43db      	mvns	r3, r3
 800a2c6:	68f9      	ldr	r1, [r7, #12]
 800a2c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2d6:	69da      	ldr	r2, [r3, #28]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	f003 030f 	and.w	r3, r3, #15
 800a2e0:	2101      	movs	r1, #1
 800a2e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e6:	041b      	lsls	r3, r3, #16
 800a2e8:	43db      	mvns	r3, r3
 800a2ea:	68f9      	ldr	r1, [r7, #12]
 800a2ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	0159      	lsls	r1, r3, #5
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	440b      	add	r3, r1
 800a30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a30e:	4619      	mov	r1, r3
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <USB_DeactivateEndpoint+0x1b4>)
 800a312:	4013      	ands	r3, r2
 800a314:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3714      	adds	r7, #20
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	ec337800 	.word	0xec337800
 800a328:	eff37800 	.word	0xeff37800

0800a32c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08a      	sub	sp, #40	; 0x28
 800a330:	af02      	add	r7, sp, #8
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	785b      	ldrb	r3, [r3, #1]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	f040 817a 	bne.w	800a642 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d132      	bne.n	800a3bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	69ba      	ldr	r2, [r7, #24]
 800a366:	0151      	lsls	r1, r2, #5
 800a368:	69fa      	ldr	r2, [r7, #28]
 800a36a:	440a      	add	r2, r1
 800a36c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a370:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a374:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a378:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	4413      	add	r3, r2
 800a382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	69ba      	ldr	r2, [r7, #24]
 800a38a:	0151      	lsls	r1, r2, #5
 800a38c:	69fa      	ldr	r2, [r7, #28]
 800a38e:	440a      	add	r2, r1
 800a390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a398:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	69ba      	ldr	r2, [r7, #24]
 800a3aa:	0151      	lsls	r1, r2, #5
 800a3ac:	69fa      	ldr	r2, [r7, #28]
 800a3ae:	440a      	add	r2, r1
 800a3b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3b4:	0cdb      	lsrs	r3, r3, #19
 800a3b6:	04db      	lsls	r3, r3, #19
 800a3b8:	6113      	str	r3, [r2, #16]
 800a3ba:	e092      	b.n	800a4e2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	0151      	lsls	r1, r2, #5
 800a3ce:	69fa      	ldr	r2, [r7, #28]
 800a3d0:	440a      	add	r2, r1
 800a3d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3d6:	0cdb      	lsrs	r3, r3, #19
 800a3d8:	04db      	lsls	r3, r3, #19
 800a3da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	015a      	lsls	r2, r3, #5
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	0151      	lsls	r1, r2, #5
 800a3ee:	69fa      	ldr	r2, [r7, #28]
 800a3f0:	440a      	add	r2, r1
 800a3f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3fe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d11a      	bne.n	800a43c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	691a      	ldr	r2, [r3, #16]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d903      	bls.n	800a41a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	689a      	ldr	r2, [r3, #8]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	015a      	lsls	r2, r3, #5
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	4413      	add	r3, r2
 800a422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	69ba      	ldr	r2, [r7, #24]
 800a42a:	0151      	lsls	r1, r2, #5
 800a42c:	69fa      	ldr	r2, [r7, #28]
 800a42e:	440a      	add	r2, r1
 800a430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a434:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a438:	6113      	str	r3, [r2, #16]
 800a43a:	e01b      	b.n	800a474 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	4413      	add	r3, r2
 800a444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a448:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	6919      	ldr	r1, [r3, #16]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	440b      	add	r3, r1
 800a454:	1e59      	subs	r1, r3, #1
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a45e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a460:	4ba2      	ldr	r3, [pc, #648]	; (800a6ec <USB_EPStartXfer+0x3c0>)
 800a462:	400b      	ands	r3, r1
 800a464:	69b9      	ldr	r1, [r7, #24]
 800a466:	0148      	lsls	r0, r1, #5
 800a468:	69f9      	ldr	r1, [r7, #28]
 800a46a:	4401      	add	r1, r0
 800a46c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a470:	4313      	orrs	r3, r2
 800a472:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	015a      	lsls	r2, r3, #5
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a480:	691a      	ldr	r2, [r3, #16]
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a48a:	69b9      	ldr	r1, [r7, #24]
 800a48c:	0148      	lsls	r0, r1, #5
 800a48e:	69f9      	ldr	r1, [r7, #28]
 800a490:	4401      	add	r1, r0
 800a492:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a496:	4313      	orrs	r3, r2
 800a498:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	791b      	ldrb	r3, [r3, #4]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d11f      	bne.n	800a4e2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	015a      	lsls	r2, r3, #5
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	69ba      	ldr	r2, [r7, #24]
 800a4b2:	0151      	lsls	r1, r2, #5
 800a4b4:	69fa      	ldr	r2, [r7, #28]
 800a4b6:	440a      	add	r2, r1
 800a4b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a4c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	015a      	lsls	r2, r3, #5
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	69ba      	ldr	r2, [r7, #24]
 800a4d2:	0151      	lsls	r1, r2, #5
 800a4d4:	69fa      	ldr	r2, [r7, #28]
 800a4d6:	440a      	add	r2, r1
 800a4d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a4e2:	79fb      	ldrb	r3, [r7, #7]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d14b      	bne.n	800a580 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	69db      	ldr	r3, [r3, #28]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d009      	beq.n	800a504 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	015a      	lsls	r2, r3, #5
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	791b      	ldrb	r3, [r3, #4]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d128      	bne.n	800a55e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d110      	bne.n	800a53e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	4413      	add	r3, r2
 800a524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	69ba      	ldr	r2, [r7, #24]
 800a52c:	0151      	lsls	r1, r2, #5
 800a52e:	69fa      	ldr	r2, [r7, #28]
 800a530:	440a      	add	r2, r1
 800a532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a536:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	e00f      	b.n	800a55e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	015a      	lsls	r2, r3, #5
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	4413      	add	r3, r2
 800a546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	69ba      	ldr	r2, [r7, #24]
 800a54e:	0151      	lsls	r1, r2, #5
 800a550:	69fa      	ldr	r2, [r7, #28]
 800a552:	440a      	add	r2, r1
 800a554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a55c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	015a      	lsls	r2, r3, #5
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	4413      	add	r3, r2
 800a566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	69ba      	ldr	r2, [r7, #24]
 800a56e:	0151      	lsls	r1, r2, #5
 800a570:	69fa      	ldr	r2, [r7, #28]
 800a572:	440a      	add	r2, r1
 800a574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a578:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a57c:	6013      	str	r3, [r2, #0]
 800a57e:	e165      	b.n	800a84c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	015a      	lsls	r2, r3, #5
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	4413      	add	r3, r2
 800a588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	69ba      	ldr	r2, [r7, #24]
 800a590:	0151      	lsls	r1, r2, #5
 800a592:	69fa      	ldr	r2, [r7, #28]
 800a594:	440a      	add	r2, r1
 800a596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a59a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a59e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	791b      	ldrb	r3, [r3, #4]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d015      	beq.n	800a5d4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 814d 	beq.w	800a84c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	f003 030f 	and.w	r3, r3, #15
 800a5c2:	2101      	movs	r1, #1
 800a5c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a5c8:	69f9      	ldr	r1, [r7, #28]
 800a5ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	634b      	str	r3, [r1, #52]	; 0x34
 800a5d2:	e13b      	b.n	800a84c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d110      	bne.n	800a606 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	015a      	lsls	r2, r3, #5
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	69ba      	ldr	r2, [r7, #24]
 800a5f4:	0151      	lsls	r1, r2, #5
 800a5f6:	69fa      	ldr	r2, [r7, #28]
 800a5f8:	440a      	add	r2, r1
 800a5fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a602:	6013      	str	r3, [r2, #0]
 800a604:	e00f      	b.n	800a626 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	015a      	lsls	r2, r3, #5
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	4413      	add	r3, r2
 800a60e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	69ba      	ldr	r2, [r7, #24]
 800a616:	0151      	lsls	r1, r2, #5
 800a618:	69fa      	ldr	r2, [r7, #28]
 800a61a:	440a      	add	r2, r1
 800a61c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a624:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	68d9      	ldr	r1, [r3, #12]
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	781a      	ldrb	r2, [r3, #0]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	b298      	uxth	r0, r3
 800a634:	79fb      	ldrb	r3, [r7, #7]
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	4603      	mov	r3, r0
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 f9b8 	bl	800a9b0 <USB_WritePacket>
 800a640:	e104      	b.n	800a84c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	015a      	lsls	r2, r3, #5
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	4413      	add	r3, r2
 800a64a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	69ba      	ldr	r2, [r7, #24]
 800a652:	0151      	lsls	r1, r2, #5
 800a654:	69fa      	ldr	r2, [r7, #28]
 800a656:	440a      	add	r2, r1
 800a658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a65c:	0cdb      	lsrs	r3, r3, #19
 800a65e:	04db      	lsls	r3, r3, #19
 800a660:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	015a      	lsls	r2, r3, #5
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	4413      	add	r3, r2
 800a66a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	69ba      	ldr	r2, [r7, #24]
 800a672:	0151      	lsls	r1, r2, #5
 800a674:	69fa      	ldr	r2, [r7, #28]
 800a676:	440a      	add	r2, r1
 800a678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a67c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a680:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a684:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d131      	bne.n	800a6f0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d003      	beq.n	800a69c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	689a      	ldr	r2, [r3, #8]
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6b0:	691a      	ldr	r2, [r3, #16]
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6ba:	69b9      	ldr	r1, [r7, #24]
 800a6bc:	0148      	lsls	r0, r1, #5
 800a6be:	69f9      	ldr	r1, [r7, #28]
 800a6c0:	4401      	add	r1, r0
 800a6c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	015a      	lsls	r2, r3, #5
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	0151      	lsls	r1, r2, #5
 800a6dc:	69fa      	ldr	r2, [r7, #28]
 800a6de:	440a      	add	r2, r1
 800a6e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6e8:	6113      	str	r3, [r2, #16]
 800a6ea:	e061      	b.n	800a7b0 <USB_EPStartXfer+0x484>
 800a6ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d123      	bne.n	800a740 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a704:	691a      	ldr	r2, [r3, #16]
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a70e:	69b9      	ldr	r1, [r7, #24]
 800a710:	0148      	lsls	r0, r1, #5
 800a712:	69f9      	ldr	r1, [r7, #28]
 800a714:	4401      	add	r1, r0
 800a716:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a71a:	4313      	orrs	r3, r2
 800a71c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	015a      	lsls	r2, r3, #5
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	4413      	add	r3, r2
 800a726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	69ba      	ldr	r2, [r7, #24]
 800a72e:	0151      	lsls	r1, r2, #5
 800a730:	69fa      	ldr	r2, [r7, #28]
 800a732:	440a      	add	r2, r1
 800a734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a738:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a73c:	6113      	str	r3, [r2, #16]
 800a73e:	e037      	b.n	800a7b0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	691a      	ldr	r2, [r3, #16]
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	4413      	add	r3, r2
 800a74a:	1e5a      	subs	r2, r3, #1
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	fbb2 f3f3 	udiv	r3, r2, r3
 800a754:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	8afa      	ldrh	r2, [r7, #22]
 800a75c:	fb03 f202 	mul.w	r2, r3, r2
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	015a      	lsls	r2, r3, #5
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	4413      	add	r3, r2
 800a76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a770:	691a      	ldr	r2, [r3, #16]
 800a772:	8afb      	ldrh	r3, [r7, #22]
 800a774:	04d9      	lsls	r1, r3, #19
 800a776:	4b38      	ldr	r3, [pc, #224]	; (800a858 <USB_EPStartXfer+0x52c>)
 800a778:	400b      	ands	r3, r1
 800a77a:	69b9      	ldr	r1, [r7, #24]
 800a77c:	0148      	lsls	r0, r1, #5
 800a77e:	69f9      	ldr	r1, [r7, #28]
 800a780:	4401      	add	r1, r0
 800a782:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a786:	4313      	orrs	r3, r2
 800a788:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	4413      	add	r3, r2
 800a792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a796:	691a      	ldr	r2, [r3, #16]
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	6a1b      	ldr	r3, [r3, #32]
 800a79c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7a0:	69b9      	ldr	r1, [r7, #24]
 800a7a2:	0148      	lsls	r0, r1, #5
 800a7a4:	69f9      	ldr	r1, [r7, #28]
 800a7a6:	4401      	add	r1, r0
 800a7a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d10d      	bne.n	800a7d2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d009      	beq.n	800a7d2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	68d9      	ldr	r1, [r3, #12]
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ce:	460a      	mov	r2, r1
 800a7d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	791b      	ldrb	r3, [r3, #4]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d128      	bne.n	800a82c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d110      	bne.n	800a80c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	015a      	lsls	r2, r3, #5
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	69ba      	ldr	r2, [r7, #24]
 800a7fa:	0151      	lsls	r1, r2, #5
 800a7fc:	69fa      	ldr	r2, [r7, #28]
 800a7fe:	440a      	add	r2, r1
 800a800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a808:	6013      	str	r3, [r2, #0]
 800a80a:	e00f      	b.n	800a82c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	015a      	lsls	r2, r3, #5
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	4413      	add	r3, r2
 800a814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	0151      	lsls	r1, r2, #5
 800a81e:	69fa      	ldr	r2, [r7, #28]
 800a820:	440a      	add	r2, r1
 800a822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a82a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	4413      	add	r3, r2
 800a834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	69ba      	ldr	r2, [r7, #24]
 800a83c:	0151      	lsls	r1, r2, #5
 800a83e:	69fa      	ldr	r2, [r7, #28]
 800a840:	440a      	add	r2, r1
 800a842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a846:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a84a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3720      	adds	r7, #32
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	1ff80000 	.word	0x1ff80000

0800a85c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a866:	2300      	movs	r3, #0
 800a868:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	785b      	ldrb	r3, [r3, #1]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d14a      	bne.n	800a910 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a88e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a892:	f040 8086 	bne.w	800a9a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	7812      	ldrb	r2, [r2, #0]
 800a8aa:	0151      	lsls	r1, r2, #5
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	440a      	add	r2, r1
 800a8b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a8b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	015a      	lsls	r2, r3, #5
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	7812      	ldrb	r2, [r2, #0]
 800a8ce:	0151      	lsls	r1, r2, #5
 800a8d0:	693a      	ldr	r2, [r7, #16]
 800a8d2:	440a      	add	r2, r1
 800a8d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f242 7210 	movw	r2, #10000	; 0x2710
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d902      	bls.n	800a8f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	75fb      	strb	r3, [r7, #23]
          break;
 800a8f2:	e056      	b.n	800a9a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a90c:	d0e7      	beq.n	800a8de <USB_EPStopXfer+0x82>
 800a90e:	e048      	b.n	800a9a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	015a      	lsls	r2, r3, #5
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	4413      	add	r3, r2
 800a91a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a928:	d13b      	bne.n	800a9a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	4413      	add	r3, r2
 800a934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	7812      	ldrb	r2, [r2, #0]
 800a93e:	0151      	lsls	r1, r2, #5
 800a940:	693a      	ldr	r2, [r7, #16]
 800a942:	440a      	add	r2, r1
 800a944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a948:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a94c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	015a      	lsls	r2, r3, #5
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	4413      	add	r3, r2
 800a958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	7812      	ldrb	r2, [r2, #0]
 800a962:	0151      	lsls	r1, r2, #5
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	440a      	add	r2, r1
 800a968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a96c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a970:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3301      	adds	r3, #1
 800a976:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a97e:	4293      	cmp	r3, r2
 800a980:	d902      	bls.n	800a988 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	75fb      	strb	r3, [r7, #23]
          break;
 800a986:	e00c      	b.n	800a9a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	015a      	lsls	r2, r3, #5
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	4413      	add	r3, r2
 800a992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a99c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9a0:	d0e7      	beq.n	800a972 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	371c      	adds	r7, #28
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b089      	sub	sp, #36	; 0x24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	461a      	mov	r2, r3
 800a9be:	460b      	mov	r3, r1
 800a9c0:	71fb      	strb	r3, [r7, #7]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a9ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d123      	bne.n	800aa1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a9d6:	88bb      	ldrh	r3, [r7, #4]
 800a9d8:	3303      	adds	r3, #3
 800a9da:	089b      	lsrs	r3, r3, #2
 800a9dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a9de:	2300      	movs	r3, #0
 800a9e0:	61bb      	str	r3, [r7, #24]
 800a9e2:	e018      	b.n	800aa16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a9e4:	79fb      	ldrb	r3, [r7, #7]
 800a9e6:	031a      	lsls	r2, r3, #12
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	3301      	adds	r3, #1
 800aa02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	3301      	adds	r3, #1
 800aa08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	3301      	adds	r3, #1
 800aa14:	61bb      	str	r3, [r7, #24]
 800aa16:	69ba      	ldr	r2, [r7, #24]
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d3e2      	bcc.n	800a9e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3724      	adds	r7, #36	; 0x24
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b08b      	sub	sp, #44	; 0x2c
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	4613      	mov	r3, r2
 800aa38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aa42:	88fb      	ldrh	r3, [r7, #6]
 800aa44:	089b      	lsrs	r3, r3, #2
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aa4a:	88fb      	ldrh	r3, [r7, #6]
 800aa4c:	f003 0303 	and.w	r3, r3, #3
 800aa50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aa52:	2300      	movs	r3, #0
 800aa54:	623b      	str	r3, [r7, #32]
 800aa56:	e014      	b.n	800aa82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa66:	3301      	adds	r3, #1
 800aa68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa72:	3301      	adds	r3, #1
 800aa74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa78:	3301      	adds	r3, #1
 800aa7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	623b      	str	r3, [r7, #32]
 800aa82:	6a3a      	ldr	r2, [r7, #32]
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d3e6      	bcc.n	800aa58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa8a:	8bfb      	ldrh	r3, [r7, #30]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d01e      	beq.n	800aace <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa90:	2300      	movs	r3, #0
 800aa92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f107 0310 	add.w	r3, r7, #16
 800aaa0:	6812      	ldr	r2, [r2, #0]
 800aaa2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	6a3b      	ldr	r3, [r7, #32]
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	00db      	lsls	r3, r3, #3
 800aaac:	fa22 f303 	lsr.w	r3, r2, r3
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab4:	701a      	strb	r2, [r3, #0]
      i++;
 800aab6:	6a3b      	ldr	r3, [r7, #32]
 800aab8:	3301      	adds	r3, #1
 800aaba:	623b      	str	r3, [r7, #32]
      pDest++;
 800aabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabe:	3301      	adds	r3, #1
 800aac0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aac2:	8bfb      	ldrh	r3, [r7, #30]
 800aac4:	3b01      	subs	r3, #1
 800aac6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aac8:	8bfb      	ldrh	r3, [r7, #30]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1ea      	bne.n	800aaa4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	372c      	adds	r7, #44	; 0x2c
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	785b      	ldrb	r3, [r3, #1]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d12c      	bne.n	800ab52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	015a      	lsls	r2, r3, #5
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	4413      	add	r3, r2
 800ab00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	db12      	blt.n	800ab30 <USB_EPSetStall+0x54>
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00f      	beq.n	800ab30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	0151      	lsls	r1, r2, #5
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	440a      	add	r2, r1
 800ab46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	e02b      	b.n	800abaa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	015a      	lsls	r2, r3, #5
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	db12      	blt.n	800ab8a <USB_EPSetStall+0xae>
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00f      	beq.n	800ab8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	015a      	lsls	r2, r3, #5
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4413      	add	r3, r2
 800ab72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	0151      	lsls	r1, r2, #5
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	440a      	add	r2, r1
 800ab80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	015a      	lsls	r2, r3, #5
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	4413      	add	r3, r2
 800ab92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	0151      	lsls	r1, r2, #5
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	440a      	add	r2, r1
 800aba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aba4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aba8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	785b      	ldrb	r3, [r3, #1]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d128      	bne.n	800ac26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	0151      	lsls	r1, r2, #5
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	440a      	add	r2, r1
 800abea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800abf2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	791b      	ldrb	r3, [r3, #4]
 800abf8:	2b03      	cmp	r3, #3
 800abfa:	d003      	beq.n	800ac04 <USB_EPClearStall+0x4c>
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	791b      	ldrb	r3, [r3, #4]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d138      	bne.n	800ac76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	0151      	lsls	r1, r2, #5
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	440a      	add	r2, r1
 800ac1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac22:	6013      	str	r3, [r2, #0]
 800ac24:	e027      	b.n	800ac76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	015a      	lsls	r2, r3, #5
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	0151      	lsls	r1, r2, #5
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	440a      	add	r2, r1
 800ac3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	791b      	ldrb	r3, [r3, #4]
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	d003      	beq.n	800ac56 <USB_EPClearStall+0x9e>
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	791b      	ldrb	r3, [r3, #4]
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d10f      	bne.n	800ac76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	015a      	lsls	r2, r3, #5
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	0151      	lsls	r1, r2, #5
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	440a      	add	r2, r1
 800ac6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aca2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aca6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	78fb      	ldrb	r3, [r7, #3]
 800acb2:	011b      	lsls	r3, r3, #4
 800acb4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800acb8:	68f9      	ldr	r1, [r7, #12]
 800acba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acbe:	4313      	orrs	r3, r2
 800acc0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800acea:	f023 0303 	bic.w	r3, r3, #3
 800acee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acfe:	f023 0302 	bic.w	r3, r3, #2
 800ad02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b085      	sub	sp, #20
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad2c:	f023 0303 	bic.w	r3, r3, #3
 800ad30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad40:	f043 0302 	orr.w	r3, r3, #2
 800ad44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	695b      	ldr	r3, [r3, #20]
 800ad60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	4013      	ands	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b085      	sub	sp, #20
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad96:	69db      	ldr	r3, [r3, #28]
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	0c1b      	lsrs	r3, r3, #16
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800adae:	b480      	push	{r7}
 800adb0:	b085      	sub	sp, #20
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc0:	699b      	ldr	r3, [r3, #24]
 800adc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adca:	69db      	ldr	r3, [r3, #28]
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	4013      	ands	r3, r2
 800add0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	b29b      	uxth	r3, r3
}
 800add6:	4618      	mov	r0, r3
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ade2:	b480      	push	{r7}
 800ade4:	b085      	sub	sp, #20
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	460b      	mov	r3, r1
 800adec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800adf2:	78fb      	ldrb	r3, [r7, #3]
 800adf4:	015a      	lsls	r2, r3, #5
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	4413      	add	r3, r2
 800adfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae08:	695b      	ldr	r3, [r3, #20]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae10:	68bb      	ldr	r3, [r7, #8]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b087      	sub	sp, #28
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	460b      	mov	r3, r1
 800ae28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae42:	78fb      	ldrb	r3, [r7, #3]
 800ae44:	f003 030f 	and.w	r3, r3, #15
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4e:	01db      	lsls	r3, r3, #7
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae58:	78fb      	ldrb	r3, [r7, #3]
 800ae5a:	015a      	lsls	r2, r3, #5
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	4413      	add	r3, r2
 800ae60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	4013      	ands	r3, r2
 800ae6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae6c:	68bb      	ldr	r3, [r7, #8]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	371c      	adds	r7, #28
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b083      	sub	sp, #12
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	f003 0301 	and.w	r3, r3, #1
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b085      	sub	sp, #20
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aeb4:	f023 0307 	bic.w	r3, r3, #7
 800aeb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aecc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aedc:	b480      	push	{r7}
 800aede:	b087      	sub	sp, #28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	460b      	mov	r3, r1
 800aee6:	607a      	str	r2, [r7, #4]
 800aee8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	333c      	adds	r3, #60	; 0x3c
 800aef2:	3304      	adds	r3, #4
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	4a26      	ldr	r2, [pc, #152]	; (800af94 <USB_EP0_OutStart+0xb8>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d90a      	bls.n	800af16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af10:	d101      	bne.n	800af16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800af12:	2300      	movs	r3, #0
 800af14:	e037      	b.n	800af86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af1c:	461a      	mov	r2, r3
 800af1e:	2300      	movs	r3, #0
 800af20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af44:	f043 0318 	orr.w	r3, r3, #24
 800af48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800af5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800af5e:	7afb      	ldrb	r3, [r7, #11]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d10f      	bne.n	800af84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af6a:	461a      	mov	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800af82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	371c      	adds	r7, #28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	4f54300a 	.word	0x4f54300a

0800af98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afa0:	2300      	movs	r3, #0
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3301      	adds	r3, #1
 800afa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800afb0:	d901      	bls.n	800afb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e01b      	b.n	800afee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	daf2      	bge.n	800afa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	f043 0201 	orr.w	r2, r3, #1
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3301      	adds	r3, #1
 800afd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800afda:	d901      	bls.n	800afe0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800afdc:	2303      	movs	r3, #3
 800afde:	e006      	b.n	800afee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	f003 0301 	and.w	r3, r3, #1
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d0f0      	beq.n	800afce <USB_CoreReset+0x36>

  return HAL_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
	...

0800affc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	460b      	mov	r3, r1
 800b006:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b008:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b00c:	f003 ff20 	bl	800ee50 <USBD_static_malloc>
 800b010:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d109      	bne.n	800b02c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	32b0      	adds	r2, #176	; 0xb0
 800b022:	2100      	movs	r1, #0
 800b024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b028:	2302      	movs	r3, #2
 800b02a:	e0d4      	b.n	800b1d6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b02c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b030:	2100      	movs	r1, #0
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f003 ff50 	bl	800eed8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	32b0      	adds	r2, #176	; 0xb0
 800b042:	68f9      	ldr	r1, [r7, #12]
 800b044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	32b0      	adds	r2, #176	; 0xb0
 800b052:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	7c1b      	ldrb	r3, [r3, #16]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d138      	bne.n	800b0d6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b064:	4b5e      	ldr	r3, [pc, #376]	; (800b1e0 <USBD_CDC_Init+0x1e4>)
 800b066:	7819      	ldrb	r1, [r3, #0]
 800b068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b06c:	2202      	movs	r2, #2
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f003 fdcb 	bl	800ec0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b074:	4b5a      	ldr	r3, [pc, #360]	; (800b1e0 <USBD_CDC_Init+0x1e4>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	f003 020f 	and.w	r2, r3, #15
 800b07c:	6879      	ldr	r1, [r7, #4]
 800b07e:	4613      	mov	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4413      	add	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	440b      	add	r3, r1
 800b088:	3324      	adds	r3, #36	; 0x24
 800b08a:	2201      	movs	r2, #1
 800b08c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b08e:	4b55      	ldr	r3, [pc, #340]	; (800b1e4 <USBD_CDC_Init+0x1e8>)
 800b090:	7819      	ldrb	r1, [r3, #0]
 800b092:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b096:	2202      	movs	r2, #2
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f003 fdb6 	bl	800ec0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b09e:	4b51      	ldr	r3, [pc, #324]	; (800b1e4 <USBD_CDC_Init+0x1e8>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	f003 020f 	and.w	r2, r3, #15
 800b0a6:	6879      	ldr	r1, [r7, #4]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4413      	add	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	440b      	add	r3, r1
 800b0b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b0ba:	4b4b      	ldr	r3, [pc, #300]	; (800b1e8 <USBD_CDC_Init+0x1ec>)
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	f003 020f 	and.w	r2, r3, #15
 800b0c2:	6879      	ldr	r1, [r7, #4]
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	440b      	add	r3, r1
 800b0ce:	3326      	adds	r3, #38	; 0x26
 800b0d0:	2210      	movs	r2, #16
 800b0d2:	801a      	strh	r2, [r3, #0]
 800b0d4:	e035      	b.n	800b142 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b0d6:	4b42      	ldr	r3, [pc, #264]	; (800b1e0 <USBD_CDC_Init+0x1e4>)
 800b0d8:	7819      	ldrb	r1, [r3, #0]
 800b0da:	2340      	movs	r3, #64	; 0x40
 800b0dc:	2202      	movs	r2, #2
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f003 fd93 	bl	800ec0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b0e4:	4b3e      	ldr	r3, [pc, #248]	; (800b1e0 <USBD_CDC_Init+0x1e4>)
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	f003 020f 	and.w	r2, r3, #15
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	4413      	add	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	440b      	add	r3, r1
 800b0f8:	3324      	adds	r3, #36	; 0x24
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b0fe:	4b39      	ldr	r3, [pc, #228]	; (800b1e4 <USBD_CDC_Init+0x1e8>)
 800b100:	7819      	ldrb	r1, [r3, #0]
 800b102:	2340      	movs	r3, #64	; 0x40
 800b104:	2202      	movs	r2, #2
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f003 fd7f 	bl	800ec0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b10c:	4b35      	ldr	r3, [pc, #212]	; (800b1e4 <USBD_CDC_Init+0x1e8>)
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	f003 020f 	and.w	r2, r3, #15
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	4613      	mov	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	440b      	add	r3, r1
 800b120:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b124:	2201      	movs	r2, #1
 800b126:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b128:	4b2f      	ldr	r3, [pc, #188]	; (800b1e8 <USBD_CDC_Init+0x1ec>)
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	f003 020f 	and.w	r2, r3, #15
 800b130:	6879      	ldr	r1, [r7, #4]
 800b132:	4613      	mov	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4413      	add	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	440b      	add	r3, r1
 800b13c:	3326      	adds	r3, #38	; 0x26
 800b13e:	2210      	movs	r2, #16
 800b140:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b142:	4b29      	ldr	r3, [pc, #164]	; (800b1e8 <USBD_CDC_Init+0x1ec>)
 800b144:	7819      	ldrb	r1, [r3, #0]
 800b146:	2308      	movs	r3, #8
 800b148:	2203      	movs	r2, #3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f003 fd5d 	bl	800ec0a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b150:	4b25      	ldr	r3, [pc, #148]	; (800b1e8 <USBD_CDC_Init+0x1ec>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	f003 020f 	and.w	r2, r3, #15
 800b158:	6879      	ldr	r1, [r7, #4]
 800b15a:	4613      	mov	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	440b      	add	r3, r1
 800b164:	3324      	adds	r3, #36	; 0x24
 800b166:	2201      	movs	r2, #1
 800b168:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	33b0      	adds	r3, #176	; 0xb0
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d101      	bne.n	800b1a4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	e018      	b.n	800b1d6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	7c1b      	ldrb	r3, [r3, #16]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10a      	bne.n	800b1c2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1ac:	4b0d      	ldr	r3, [pc, #52]	; (800b1e4 <USBD_CDC_Init+0x1e8>)
 800b1ae:	7819      	ldrb	r1, [r3, #0]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f003 fe14 	bl	800ede8 <USBD_LL_PrepareReceive>
 800b1c0:	e008      	b.n	800b1d4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1c2:	4b08      	ldr	r3, [pc, #32]	; (800b1e4 <USBD_CDC_Init+0x1e8>)
 800b1c4:	7819      	ldrb	r1, [r3, #0]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1cc:	2340      	movs	r3, #64	; 0x40
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f003 fe0a 	bl	800ede8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	20000093 	.word	0x20000093
 800b1e4:	20000094 	.word	0x20000094
 800b1e8:	20000095 	.word	0x20000095

0800b1ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b1f8:	4b3a      	ldr	r3, [pc, #232]	; (800b2e4 <USBD_CDC_DeInit+0xf8>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f003 fd29 	bl	800ec56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b204:	4b37      	ldr	r3, [pc, #220]	; (800b2e4 <USBD_CDC_DeInit+0xf8>)
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	f003 020f 	and.w	r2, r3, #15
 800b20c:	6879      	ldr	r1, [r7, #4]
 800b20e:	4613      	mov	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	4413      	add	r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	440b      	add	r3, r1
 800b218:	3324      	adds	r3, #36	; 0x24
 800b21a:	2200      	movs	r2, #0
 800b21c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b21e:	4b32      	ldr	r3, [pc, #200]	; (800b2e8 <USBD_CDC_DeInit+0xfc>)
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f003 fd16 	bl	800ec56 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b22a:	4b2f      	ldr	r3, [pc, #188]	; (800b2e8 <USBD_CDC_DeInit+0xfc>)
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	f003 020f 	and.w	r2, r3, #15
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	4613      	mov	r3, r2
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	4413      	add	r3, r2
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	440b      	add	r3, r1
 800b23e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b242:	2200      	movs	r2, #0
 800b244:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b246:	4b29      	ldr	r3, [pc, #164]	; (800b2ec <USBD_CDC_DeInit+0x100>)
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	4619      	mov	r1, r3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f003 fd02 	bl	800ec56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b252:	4b26      	ldr	r3, [pc, #152]	; (800b2ec <USBD_CDC_DeInit+0x100>)
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	f003 020f 	and.w	r2, r3, #15
 800b25a:	6879      	ldr	r1, [r7, #4]
 800b25c:	4613      	mov	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	440b      	add	r3, r1
 800b266:	3324      	adds	r3, #36	; 0x24
 800b268:	2200      	movs	r2, #0
 800b26a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b26c:	4b1f      	ldr	r3, [pc, #124]	; (800b2ec <USBD_CDC_DeInit+0x100>)
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	f003 020f 	and.w	r2, r3, #15
 800b274:	6879      	ldr	r1, [r7, #4]
 800b276:	4613      	mov	r3, r2
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	4413      	add	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	440b      	add	r3, r1
 800b280:	3326      	adds	r3, #38	; 0x26
 800b282:	2200      	movs	r2, #0
 800b284:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	32b0      	adds	r2, #176	; 0xb0
 800b290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d01f      	beq.n	800b2d8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	33b0      	adds	r3, #176	; 0xb0
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4413      	add	r3, r2
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	32b0      	adds	r2, #176	; 0xb0
 800b2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f003 fdd6 	bl	800ee6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	32b0      	adds	r2, #176	; 0xb0
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20000093 	.word	0x20000093
 800b2e8:	20000094 	.word	0x20000094
 800b2ec:	20000095 	.word	0x20000095

0800b2f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	32b0      	adds	r2, #176	; 0xb0
 800b304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b308:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b30a:	2300      	movs	r3, #0
 800b30c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b30e:	2300      	movs	r3, #0
 800b310:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b312:	2300      	movs	r3, #0
 800b314:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d101      	bne.n	800b320 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e0bf      	b.n	800b4a0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d050      	beq.n	800b3ce <USBD_CDC_Setup+0xde>
 800b32c:	2b20      	cmp	r3, #32
 800b32e:	f040 80af 	bne.w	800b490 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	88db      	ldrh	r3, [r3, #6]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d03a      	beq.n	800b3b0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	b25b      	sxtb	r3, r3
 800b340:	2b00      	cmp	r3, #0
 800b342:	da1b      	bge.n	800b37c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	33b0      	adds	r3, #176	; 0xb0
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b35a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b35c:	683a      	ldr	r2, [r7, #0]
 800b35e:	88d2      	ldrh	r2, [r2, #6]
 800b360:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	88db      	ldrh	r3, [r3, #6]
 800b366:	2b07      	cmp	r3, #7
 800b368:	bf28      	it	cs
 800b36a:	2307      	movcs	r3, #7
 800b36c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	89fa      	ldrh	r2, [r7, #14]
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f001 fd89 	bl	800ce8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b37a:	e090      	b.n	800b49e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	785a      	ldrb	r2, [r3, #1]
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	88db      	ldrh	r3, [r3, #6]
 800b38a:	2b3f      	cmp	r3, #63	; 0x3f
 800b38c:	d803      	bhi.n	800b396 <USBD_CDC_Setup+0xa6>
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	88db      	ldrh	r3, [r3, #6]
 800b392:	b2da      	uxtb	r2, r3
 800b394:	e000      	b.n	800b398 <USBD_CDC_Setup+0xa8>
 800b396:	2240      	movs	r2, #64	; 0x40
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b39e:	6939      	ldr	r1, [r7, #16]
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f001 fd9b 	bl	800cee4 <USBD_CtlPrepareRx>
      break;
 800b3ae:	e076      	b.n	800b49e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	33b0      	adds	r3, #176	; 0xb0
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	7850      	ldrb	r0, [r2, #1]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	4798      	blx	r3
      break;
 800b3cc:	e067      	b.n	800b49e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	785b      	ldrb	r3, [r3, #1]
 800b3d2:	2b0b      	cmp	r3, #11
 800b3d4:	d851      	bhi.n	800b47a <USBD_CDC_Setup+0x18a>
 800b3d6:	a201      	add	r2, pc, #4	; (adr r2, 800b3dc <USBD_CDC_Setup+0xec>)
 800b3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3dc:	0800b40d 	.word	0x0800b40d
 800b3e0:	0800b489 	.word	0x0800b489
 800b3e4:	0800b47b 	.word	0x0800b47b
 800b3e8:	0800b47b 	.word	0x0800b47b
 800b3ec:	0800b47b 	.word	0x0800b47b
 800b3f0:	0800b47b 	.word	0x0800b47b
 800b3f4:	0800b47b 	.word	0x0800b47b
 800b3f8:	0800b47b 	.word	0x0800b47b
 800b3fc:	0800b47b 	.word	0x0800b47b
 800b400:	0800b47b 	.word	0x0800b47b
 800b404:	0800b437 	.word	0x0800b437
 800b408:	0800b461 	.word	0x0800b461
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b03      	cmp	r3, #3
 800b416:	d107      	bne.n	800b428 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b418:	f107 030a 	add.w	r3, r7, #10
 800b41c:	2202      	movs	r2, #2
 800b41e:	4619      	mov	r1, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f001 fd33 	bl	800ce8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b426:	e032      	b.n	800b48e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b428:	6839      	ldr	r1, [r7, #0]
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f001 fcbd 	bl	800cdaa <USBD_CtlError>
            ret = USBD_FAIL;
 800b430:	2303      	movs	r3, #3
 800b432:	75fb      	strb	r3, [r7, #23]
          break;
 800b434:	e02b      	b.n	800b48e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d107      	bne.n	800b452 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b442:	f107 030d 	add.w	r3, r7, #13
 800b446:	2201      	movs	r2, #1
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f001 fd1e 	bl	800ce8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b450:	e01d      	b.n	800b48e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f001 fca8 	bl	800cdaa <USBD_CtlError>
            ret = USBD_FAIL;
 800b45a:	2303      	movs	r3, #3
 800b45c:	75fb      	strb	r3, [r7, #23]
          break;
 800b45e:	e016      	b.n	800b48e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b466:	b2db      	uxtb	r3, r3
 800b468:	2b03      	cmp	r3, #3
 800b46a:	d00f      	beq.n	800b48c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b46c:	6839      	ldr	r1, [r7, #0]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f001 fc9b 	bl	800cdaa <USBD_CtlError>
            ret = USBD_FAIL;
 800b474:	2303      	movs	r3, #3
 800b476:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b478:	e008      	b.n	800b48c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f001 fc94 	bl	800cdaa <USBD_CtlError>
          ret = USBD_FAIL;
 800b482:	2303      	movs	r3, #3
 800b484:	75fb      	strb	r3, [r7, #23]
          break;
 800b486:	e002      	b.n	800b48e <USBD_CDC_Setup+0x19e>
          break;
 800b488:	bf00      	nop
 800b48a:	e008      	b.n	800b49e <USBD_CDC_Setup+0x1ae>
          break;
 800b48c:	bf00      	nop
      }
      break;
 800b48e:	e006      	b.n	800b49e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f001 fc89 	bl	800cdaa <USBD_CtlError>
      ret = USBD_FAIL;
 800b498:	2303      	movs	r3, #3
 800b49a:	75fb      	strb	r3, [r7, #23]
      break;
 800b49c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	32b0      	adds	r2, #176	; 0xb0
 800b4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b4ce:	2303      	movs	r3, #3
 800b4d0:	e065      	b.n	800b59e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	32b0      	adds	r2, #176	; 0xb0
 800b4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b4e2:	78fb      	ldrb	r3, [r7, #3]
 800b4e4:	f003 020f 	and.w	r2, r3, #15
 800b4e8:	6879      	ldr	r1, [r7, #4]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	440b      	add	r3, r1
 800b4f4:	3318      	adds	r3, #24
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d02f      	beq.n	800b55c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b4fc:	78fb      	ldrb	r3, [r7, #3]
 800b4fe:	f003 020f 	and.w	r2, r3, #15
 800b502:	6879      	ldr	r1, [r7, #4]
 800b504:	4613      	mov	r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	440b      	add	r3, r1
 800b50e:	3318      	adds	r3, #24
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	78fb      	ldrb	r3, [r7, #3]
 800b514:	f003 010f 	and.w	r1, r3, #15
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	460b      	mov	r3, r1
 800b51c:	00db      	lsls	r3, r3, #3
 800b51e:	440b      	add	r3, r1
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	4403      	add	r3, r0
 800b524:	331c      	adds	r3, #28
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	fbb2 f1f3 	udiv	r1, r2, r3
 800b52c:	fb01 f303 	mul.w	r3, r1, r3
 800b530:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b532:	2b00      	cmp	r3, #0
 800b534:	d112      	bne.n	800b55c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b536:	78fb      	ldrb	r3, [r7, #3]
 800b538:	f003 020f 	and.w	r2, r3, #15
 800b53c:	6879      	ldr	r1, [r7, #4]
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	440b      	add	r3, r1
 800b548:	3318      	adds	r3, #24
 800b54a:	2200      	movs	r2, #0
 800b54c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b54e:	78f9      	ldrb	r1, [r7, #3]
 800b550:	2300      	movs	r3, #0
 800b552:	2200      	movs	r2, #0
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f003 fc26 	bl	800eda6 <USBD_LL_Transmit>
 800b55a:	e01f      	b.n	800b59c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2200      	movs	r2, #0
 800b560:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	33b0      	adds	r3, #176	; 0xb0
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d010      	beq.n	800b59c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	33b0      	adds	r3, #176	; 0xb0
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4413      	add	r3, r2
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b598:	78fa      	ldrb	r2, [r7, #3]
 800b59a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	32b0      	adds	r2, #176	; 0xb0
 800b5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	32b0      	adds	r2, #176	; 0xb0
 800b5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	e01a      	b.n	800b60e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5d8:	78fb      	ldrb	r3, [r7, #3]
 800b5da:	4619      	mov	r1, r3
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f003 fc24 	bl	800ee2a <USBD_LL_GetRxDataSize>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	33b0      	adds	r3, #176	; 0xb0
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	4413      	add	r3, r2
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b608:	4611      	mov	r1, r2
 800b60a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b084      	sub	sp, #16
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	32b0      	adds	r2, #176	; 0xb0
 800b628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b62c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d101      	bne.n	800b638 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b634:	2303      	movs	r3, #3
 800b636:	e025      	b.n	800b684 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	33b0      	adds	r3, #176	; 0xb0
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	4413      	add	r3, r2
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d01a      	beq.n	800b682 <USBD_CDC_EP0_RxReady+0x6c>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b652:	2bff      	cmp	r3, #255	; 0xff
 800b654:	d015      	beq.n	800b682 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	33b0      	adds	r3, #176	; 0xb0
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	4413      	add	r3, r2
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b66e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b676:	b292      	uxth	r2, r2
 800b678:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	22ff      	movs	r2, #255	; 0xff
 800b67e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3710      	adds	r7, #16
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b694:	2182      	movs	r1, #130	; 0x82
 800b696:	4818      	ldr	r0, [pc, #96]	; (800b6f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b698:	f000 fd4f 	bl	800c13a <USBD_GetEpDesc>
 800b69c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b69e:	2101      	movs	r1, #1
 800b6a0:	4815      	ldr	r0, [pc, #84]	; (800b6f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6a2:	f000 fd4a 	bl	800c13a <USBD_GetEpDesc>
 800b6a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b6a8:	2181      	movs	r1, #129	; 0x81
 800b6aa:	4813      	ldr	r0, [pc, #76]	; (800b6f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6ac:	f000 fd45 	bl	800c13a <USBD_GetEpDesc>
 800b6b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	2210      	movs	r2, #16
 800b6bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d006      	beq.n	800b6d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6cc:	711a      	strb	r2, [r3, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d006      	beq.n	800b6e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6e0:	711a      	strb	r2, [r3, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2243      	movs	r2, #67	; 0x43
 800b6ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6ec:	4b02      	ldr	r3, [pc, #8]	; (800b6f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20000050 	.word	0x20000050

0800b6fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b704:	2182      	movs	r1, #130	; 0x82
 800b706:	4818      	ldr	r0, [pc, #96]	; (800b768 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b708:	f000 fd17 	bl	800c13a <USBD_GetEpDesc>
 800b70c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b70e:	2101      	movs	r1, #1
 800b710:	4815      	ldr	r0, [pc, #84]	; (800b768 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b712:	f000 fd12 	bl	800c13a <USBD_GetEpDesc>
 800b716:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b718:	2181      	movs	r1, #129	; 0x81
 800b71a:	4813      	ldr	r0, [pc, #76]	; (800b768 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b71c:	f000 fd0d 	bl	800c13a <USBD_GetEpDesc>
 800b720:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d002      	beq.n	800b72e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	2210      	movs	r2, #16
 800b72c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d006      	beq.n	800b742 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	2200      	movs	r2, #0
 800b738:	711a      	strb	r2, [r3, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f042 0202 	orr.w	r2, r2, #2
 800b740:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d006      	beq.n	800b756 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	711a      	strb	r2, [r3, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f042 0202 	orr.w	r2, r2, #2
 800b754:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2243      	movs	r2, #67	; 0x43
 800b75a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b75c:	4b02      	ldr	r3, [pc, #8]	; (800b768 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3718      	adds	r7, #24
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	20000050 	.word	0x20000050

0800b76c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b774:	2182      	movs	r1, #130	; 0x82
 800b776:	4818      	ldr	r0, [pc, #96]	; (800b7d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b778:	f000 fcdf 	bl	800c13a <USBD_GetEpDesc>
 800b77c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b77e:	2101      	movs	r1, #1
 800b780:	4815      	ldr	r0, [pc, #84]	; (800b7d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b782:	f000 fcda 	bl	800c13a <USBD_GetEpDesc>
 800b786:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b788:	2181      	movs	r1, #129	; 0x81
 800b78a:	4813      	ldr	r0, [pc, #76]	; (800b7d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b78c:	f000 fcd5 	bl	800c13a <USBD_GetEpDesc>
 800b790:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	2210      	movs	r2, #16
 800b79c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d006      	beq.n	800b7b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7ac:	711a      	strb	r2, [r3, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d006      	beq.n	800b7c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7c0:	711a      	strb	r2, [r3, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2243      	movs	r2, #67	; 0x43
 800b7ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b7cc:	4b02      	ldr	r3, [pc, #8]	; (800b7d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3718      	adds	r7, #24
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	20000050 	.word	0x20000050

0800b7dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	220a      	movs	r2, #10
 800b7e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b7ea:	4b03      	ldr	r3, [pc, #12]	; (800b7f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr
 800b7f8:	2000000c 	.word	0x2000000c

0800b7fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d101      	bne.n	800b810 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b80c:	2303      	movs	r3, #3
 800b80e:	e009      	b.n	800b824 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	33b0      	adds	r3, #176	; 0xb0
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	4413      	add	r3, r2
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b830:	b480      	push	{r7}
 800b832:	b087      	sub	sp, #28
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	32b0      	adds	r2, #176	; 0xb0
 800b846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b84a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d101      	bne.n	800b856 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b852:	2303      	movs	r3, #3
 800b854:	e008      	b.n	800b868 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	371c      	adds	r7, #28
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	32b0      	adds	r2, #176	; 0xb0
 800b888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b88c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d101      	bne.n	800b898 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b894:	2303      	movs	r3, #3
 800b896:	e004      	b.n	800b8a2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3714      	adds	r7, #20
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
	...

0800b8b0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	32b0      	adds	r2, #176	; 0xb0
 800b8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d101      	bne.n	800b8d6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b8d2:	2303      	movs	r3, #3
 800b8d4:	e025      	b.n	800b922 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d11f      	bne.n	800b920 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b8e8:	4b10      	ldr	r3, [pc, #64]	; (800b92c <USBD_CDC_TransmitPacket+0x7c>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	f003 020f 	and.w	r2, r3, #15
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	4413      	add	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4403      	add	r3, r0
 800b902:	3318      	adds	r3, #24
 800b904:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b906:	4b09      	ldr	r3, [pc, #36]	; (800b92c <USBD_CDC_TransmitPacket+0x7c>)
 800b908:	7819      	ldrb	r1, [r3, #0]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f003 fa45 	bl	800eda6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b91c:	2300      	movs	r3, #0
 800b91e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b920:	7bfb      	ldrb	r3, [r7, #15]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	20000093 	.word	0x20000093

0800b930 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	32b0      	adds	r2, #176	; 0xb0
 800b942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b946:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	32b0      	adds	r2, #176	; 0xb0
 800b952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d101      	bne.n	800b95e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b95a:	2303      	movs	r3, #3
 800b95c:	e018      	b.n	800b990 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	7c1b      	ldrb	r3, [r3, #16]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d10a      	bne.n	800b97c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b966:	4b0c      	ldr	r3, [pc, #48]	; (800b998 <USBD_CDC_ReceivePacket+0x68>)
 800b968:	7819      	ldrb	r1, [r3, #0]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b970:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f003 fa37 	bl	800ede8 <USBD_LL_PrepareReceive>
 800b97a:	e008      	b.n	800b98e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b97c:	4b06      	ldr	r3, [pc, #24]	; (800b998 <USBD_CDC_ReceivePacket+0x68>)
 800b97e:	7819      	ldrb	r1, [r3, #0]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b986:	2340      	movs	r3, #64	; 0x40
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f003 fa2d 	bl	800ede8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	20000094 	.word	0x20000094

0800b99c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b086      	sub	sp, #24
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d101      	bne.n	800b9b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	e01f      	b.n	800b9f4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d003      	beq.n	800b9da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	79fa      	ldrb	r2, [r7, #7]
 800b9e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b9e8:	68f8      	ldr	r0, [r7, #12]
 800b9ea:	f003 f8a7 	bl	800eb3c <USBD_LL_Init>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b9f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3718      	adds	r7, #24
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba06:	2300      	movs	r3, #0
 800ba08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e025      	b.n	800ba60 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	32ae      	adds	r2, #174	; 0xae
 800ba26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00f      	beq.n	800ba50 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	32ae      	adds	r2, #174	; 0xae
 800ba3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba40:	f107 020e 	add.w	r2, r7, #14
 800ba44:	4610      	mov	r0, r2
 800ba46:	4798      	blx	r3
 800ba48:	4602      	mov	r2, r0
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ba56:	1c5a      	adds	r2, r3, #1
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f003 f8af 	bl	800ebd4 <USBD_LL_Start>
 800ba76:	4603      	mov	r3, r0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba88:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b084      	sub	sp, #16
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800baa2:	2300      	movs	r3, #0
 800baa4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baac:	2b00      	cmp	r3, #0
 800baae:	d009      	beq.n	800bac4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	78fa      	ldrb	r2, [r7, #3]
 800baba:	4611      	mov	r1, r2
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	4798      	blx	r3
 800bac0:	4603      	mov	r3, r0
 800bac2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b084      	sub	sp, #16
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
 800bad6:	460b      	mov	r3, r1
 800bad8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	78fa      	ldrb	r2, [r7, #3]
 800bae8:	4611      	mov	r1, r2
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	4798      	blx	r3
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800baf4:	2303      	movs	r3, #3
 800baf6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b084      	sub	sp, #16
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	4618      	mov	r0, r3
 800bb16:	f001 f90e 	bl	800cd36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb28:	461a      	mov	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb36:	f003 031f 	and.w	r3, r3, #31
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d01a      	beq.n	800bb74 <USBD_LL_SetupStage+0x72>
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	d822      	bhi.n	800bb88 <USBD_LL_SetupStage+0x86>
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <USBD_LL_SetupStage+0x4a>
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d00a      	beq.n	800bb60 <USBD_LL_SetupStage+0x5e>
 800bb4a:	e01d      	b.n	800bb88 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb52:	4619      	mov	r1, r3
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fb65 	bl	800c224 <USBD_StdDevReq>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb5e:	e020      	b.n	800bba2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fbcd 	bl	800c308 <USBD_StdItfReq>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	73fb      	strb	r3, [r7, #15]
      break;
 800bb72:	e016      	b.n	800bba2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fc2f 	bl	800c3e0 <USBD_StdEPReq>
 800bb82:	4603      	mov	r3, r0
 800bb84:	73fb      	strb	r3, [r7, #15]
      break;
 800bb86:	e00c      	b.n	800bba2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	4619      	mov	r1, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f003 f87c 	bl	800ec94 <USBD_LL_StallEP>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	73fb      	strb	r3, [r7, #15]
      break;
 800bba0:	bf00      	nop
  }

  return ret;
 800bba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b086      	sub	sp, #24
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	607a      	str	r2, [r7, #4]
 800bbb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bbbe:	7afb      	ldrb	r3, [r7, #11]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d16e      	bne.n	800bca2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bbca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbd2:	2b03      	cmp	r3, #3
 800bbd4:	f040 8098 	bne.w	800bd08 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	689a      	ldr	r2, [r3, #8]
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d913      	bls.n	800bc0c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	689a      	ldr	r2, [r3, #8]
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	1ad2      	subs	r2, r2, r3
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	68da      	ldr	r2, [r3, #12]
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	bf28      	it	cs
 800bbfe:	4613      	movcs	r3, r2
 800bc00:	461a      	mov	r2, r3
 800bc02:	6879      	ldr	r1, [r7, #4]
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	f001 f98a 	bl	800cf1e <USBD_CtlContinueRx>
 800bc0a:	e07d      	b.n	800bd08 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc12:	f003 031f 	and.w	r3, r3, #31
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d014      	beq.n	800bc44 <USBD_LL_DataOutStage+0x98>
 800bc1a:	2b02      	cmp	r3, #2
 800bc1c:	d81d      	bhi.n	800bc5a <USBD_LL_DataOutStage+0xae>
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d002      	beq.n	800bc28 <USBD_LL_DataOutStage+0x7c>
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d003      	beq.n	800bc2e <USBD_LL_DataOutStage+0x82>
 800bc26:	e018      	b.n	800bc5a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	75bb      	strb	r3, [r7, #22]
            break;
 800bc2c:	e018      	b.n	800bc60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	4619      	mov	r1, r3
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f000 fa64 	bl	800c106 <USBD_CoreFindIF>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	75bb      	strb	r3, [r7, #22]
            break;
 800bc42:	e00d      	b.n	800bc60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f000 fa66 	bl	800c120 <USBD_CoreFindEP>
 800bc54:	4603      	mov	r3, r0
 800bc56:	75bb      	strb	r3, [r7, #22]
            break;
 800bc58:	e002      	b.n	800bc60 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	75bb      	strb	r3, [r7, #22]
            break;
 800bc5e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bc60:	7dbb      	ldrb	r3, [r7, #22]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d119      	bne.n	800bc9a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	d113      	bne.n	800bc9a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bc72:	7dba      	ldrb	r2, [r7, #22]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	32ae      	adds	r2, #174	; 0xae
 800bc78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00b      	beq.n	800bc9a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bc82:	7dba      	ldrb	r2, [r7, #22]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bc8a:	7dba      	ldrb	r2, [r7, #22]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	32ae      	adds	r2, #174	; 0xae
 800bc90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc94:	691b      	ldr	r3, [r3, #16]
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f001 f950 	bl	800cf40 <USBD_CtlSendStatus>
 800bca0:	e032      	b.n	800bd08 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bca2:	7afb      	ldrb	r3, [r7, #11]
 800bca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	4619      	mov	r1, r3
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f000 fa37 	bl	800c120 <USBD_CoreFindEP>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcb6:	7dbb      	ldrb	r3, [r7, #22]
 800bcb8:	2bff      	cmp	r3, #255	; 0xff
 800bcba:	d025      	beq.n	800bd08 <USBD_LL_DataOutStage+0x15c>
 800bcbc:	7dbb      	ldrb	r3, [r7, #22]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d122      	bne.n	800bd08 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d117      	bne.n	800bcfe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bcce:	7dba      	ldrb	r2, [r7, #22]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	32ae      	adds	r2, #174	; 0xae
 800bcd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00f      	beq.n	800bcfe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bcde:	7dba      	ldrb	r2, [r7, #22]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bce6:	7dba      	ldrb	r2, [r7, #22]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	32ae      	adds	r2, #174	; 0xae
 800bcec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf0:	699b      	ldr	r3, [r3, #24]
 800bcf2:	7afa      	ldrb	r2, [r7, #11]
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	4798      	blx	r3
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bd04:	7dfb      	ldrb	r3, [r7, #23]
 800bd06:	e000      	b.n	800bd0a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3718      	adds	r7, #24
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b086      	sub	sp, #24
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	60f8      	str	r0, [r7, #12]
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	607a      	str	r2, [r7, #4]
 800bd1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bd20:	7afb      	ldrb	r3, [r7, #11]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d16f      	bne.n	800be06 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	3314      	adds	r3, #20
 800bd2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d15a      	bne.n	800bdec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	689a      	ldr	r2, [r3, #8]
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d914      	bls.n	800bd6c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	689a      	ldr	r2, [r3, #8]
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	1ad2      	subs	r2, r2, r3
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	461a      	mov	r2, r3
 800bd56:	6879      	ldr	r1, [r7, #4]
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f001 f8b2 	bl	800cec2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd5e:	2300      	movs	r3, #0
 800bd60:	2200      	movs	r2, #0
 800bd62:	2100      	movs	r1, #0
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f003 f83f 	bl	800ede8 <USBD_LL_PrepareReceive>
 800bd6a:	e03f      	b.n	800bdec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	68da      	ldr	r2, [r3, #12]
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d11c      	bne.n	800bdb2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	685a      	ldr	r2, [r3, #4]
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d316      	bcc.n	800bdb2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	685a      	ldr	r2, [r3, #4]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d20f      	bcs.n	800bdb2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd92:	2200      	movs	r2, #0
 800bd94:	2100      	movs	r1, #0
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f001 f893 	bl	800cec2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bda4:	2300      	movs	r3, #0
 800bda6:	2200      	movs	r2, #0
 800bda8:	2100      	movs	r1, #0
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f003 f81c 	bl	800ede8 <USBD_LL_PrepareReceive>
 800bdb0:	e01c      	b.n	800bdec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	2b03      	cmp	r3, #3
 800bdbc:	d10f      	bne.n	800bdde <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d009      	beq.n	800bdde <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdde:	2180      	movs	r1, #128	; 0x80
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f002 ff57 	bl	800ec94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f001 f8bd 	bl	800cf66 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d03a      	beq.n	800be6c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f7ff fe42 	bl	800ba80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800be04:	e032      	b.n	800be6c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be06:	7afb      	ldrb	r3, [r7, #11]
 800be08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	4619      	mov	r1, r3
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f000 f985 	bl	800c120 <USBD_CoreFindEP>
 800be16:	4603      	mov	r3, r0
 800be18:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
 800be1c:	2bff      	cmp	r3, #255	; 0xff
 800be1e:	d025      	beq.n	800be6c <USBD_LL_DataInStage+0x15a>
 800be20:	7dfb      	ldrb	r3, [r7, #23]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d122      	bne.n	800be6c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b03      	cmp	r3, #3
 800be30:	d11c      	bne.n	800be6c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800be32:	7dfa      	ldrb	r2, [r7, #23]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	32ae      	adds	r2, #174	; 0xae
 800be38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be3c:	695b      	ldr	r3, [r3, #20]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d014      	beq.n	800be6c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800be42:	7dfa      	ldrb	r2, [r7, #23]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800be4a:	7dfa      	ldrb	r2, [r7, #23]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	32ae      	adds	r2, #174	; 0xae
 800be50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be54:	695b      	ldr	r3, [r3, #20]
 800be56:	7afa      	ldrb	r2, [r7, #11]
 800be58:	4611      	mov	r1, r2
 800be5a:	68f8      	ldr	r0, [r7, #12]
 800be5c:	4798      	blx	r3
 800be5e:	4603      	mov	r3, r0
 800be60:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800be62:	7dbb      	ldrb	r3, [r7, #22]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d001      	beq.n	800be6c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800be68:	7dbb      	ldrb	r3, [r7, #22]
 800be6a:	e000      	b.n	800be6e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3718      	adds	r7, #24
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b084      	sub	sp, #16
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800be7e:	2300      	movs	r3, #0
 800be80:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2201      	movs	r2, #1
 800be86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d014      	beq.n	800bedc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00e      	beq.n	800bedc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	6852      	ldr	r2, [r2, #4]
 800beca:	b2d2      	uxtb	r2, r2
 800becc:	4611      	mov	r1, r2
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	4798      	blx	r3
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d001      	beq.n	800bedc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bed8:	2303      	movs	r3, #3
 800beda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bedc:	2340      	movs	r3, #64	; 0x40
 800bede:	2200      	movs	r2, #0
 800bee0:	2100      	movs	r1, #0
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f002 fe91 	bl	800ec0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2240      	movs	r2, #64	; 0x40
 800bef4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bef8:	2340      	movs	r3, #64	; 0x40
 800befa:	2200      	movs	r2, #0
 800befc:	2180      	movs	r1, #128	; 0x80
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f002 fe83 	bl	800ec0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2240      	movs	r2, #64	; 0x40
 800bf0e:	621a      	str	r2, [r3, #32]

  return ret;
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf1a:	b480      	push	{r7}
 800bf1c:	b083      	sub	sp, #12
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	460b      	mov	r3, r1
 800bf24:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	78fa      	ldrb	r2, [r7, #3]
 800bf2a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr

0800bf3a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf3a:	b480      	push	{r7}
 800bf3c:	b083      	sub	sp, #12
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	2b04      	cmp	r3, #4
 800bf4c:	d006      	beq.n	800bf5c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2204      	movs	r2, #4
 800bf60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	370c      	adds	r7, #12
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bf72:	b480      	push	{r7}
 800bf74:	b083      	sub	sp, #12
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	2b04      	cmp	r3, #4
 800bf84:	d106      	bne.n	800bf94 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bf8c:	b2da      	uxtb	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	370c      	adds	r7, #12
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr

0800bfa2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b082      	sub	sp, #8
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	2b03      	cmp	r3, #3
 800bfb4:	d110      	bne.n	800bfd8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00b      	beq.n	800bfd8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfc6:	69db      	ldr	r3, [r3, #28]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d005      	beq.n	800bfd8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfd2:	69db      	ldr	r3, [r3, #28]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3708      	adds	r7, #8
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b082      	sub	sp, #8
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	460b      	mov	r3, r1
 800bfec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	32ae      	adds	r2, #174	; 0xae
 800bff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d101      	bne.n	800c004 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c000:	2303      	movs	r3, #3
 800c002:	e01c      	b.n	800c03e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d115      	bne.n	800c03c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	32ae      	adds	r2, #174	; 0xae
 800c01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c01e:	6a1b      	ldr	r3, [r3, #32]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00b      	beq.n	800c03c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	32ae      	adds	r2, #174	; 0xae
 800c02e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c032:	6a1b      	ldr	r3, [r3, #32]
 800c034:	78fa      	ldrb	r2, [r7, #3]
 800c036:	4611      	mov	r1, r2
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3708      	adds	r7, #8
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b082      	sub	sp, #8
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	460b      	mov	r3, r1
 800c050:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	32ae      	adds	r2, #174	; 0xae
 800c05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d101      	bne.n	800c068 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c064:	2303      	movs	r3, #3
 800c066:	e01c      	b.n	800c0a2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	2b03      	cmp	r3, #3
 800c072:	d115      	bne.n	800c0a0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	32ae      	adds	r2, #174	; 0xae
 800c07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00b      	beq.n	800c0a0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	32ae      	adds	r2, #174	; 0xae
 800c092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c098:	78fa      	ldrb	r2, [r7, #3]
 800c09a:	4611      	mov	r1, r2
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c0aa:	b480      	push	{r7}
 800c0ac:	b083      	sub	sp, #12
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00e      	beq.n	800c0fc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	6852      	ldr	r2, [r2, #4]
 800c0ea:	b2d2      	uxtb	r2, r2
 800c0ec:	4611      	mov	r1, r2
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	4798      	blx	r3
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d001      	beq.n	800c0fc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c106:	b480      	push	{r7}
 800c108:	b083      	sub	sp, #12
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	460b      	mov	r3, r1
 800c110:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c112:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c114:	4618      	mov	r0, r3
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	460b      	mov	r3, r1
 800c12a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c12c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c12e:	4618      	mov	r0, r3
 800c130:	370c      	adds	r7, #12
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b086      	sub	sp, #24
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	460b      	mov	r3, r1
 800c144:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c14e:	2300      	movs	r3, #0
 800c150:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	885b      	ldrh	r3, [r3, #2]
 800c156:	b29a      	uxth	r2, r3
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	429a      	cmp	r2, r3
 800c160:	d920      	bls.n	800c1a4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	b29b      	uxth	r3, r3
 800c168:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c16a:	e013      	b.n	800c194 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c16c:	f107 030a 	add.w	r3, r7, #10
 800c170:	4619      	mov	r1, r3
 800c172:	6978      	ldr	r0, [r7, #20]
 800c174:	f000 f81b 	bl	800c1ae <USBD_GetNextDesc>
 800c178:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	785b      	ldrb	r3, [r3, #1]
 800c17e:	2b05      	cmp	r3, #5
 800c180:	d108      	bne.n	800c194 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	789b      	ldrb	r3, [r3, #2]
 800c18a:	78fa      	ldrb	r2, [r7, #3]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d008      	beq.n	800c1a2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c190:	2300      	movs	r3, #0
 800c192:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	885b      	ldrh	r3, [r3, #2]
 800c198:	b29a      	uxth	r2, r3
 800c19a:	897b      	ldrh	r3, [r7, #10]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d8e5      	bhi.n	800c16c <USBD_GetEpDesc+0x32>
 800c1a0:	e000      	b.n	800c1a4 <USBD_GetEpDesc+0x6a>
          break;
 800c1a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c1a4:	693b      	ldr	r3, [r7, #16]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3718      	adds	r7, #24
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c1ae:	b480      	push	{r7}
 800c1b0:	b085      	sub	sp, #20
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
 800c1b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	881a      	ldrh	r2, [r3, #0]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	4413      	add	r3, r2
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c1da:	68fb      	ldr	r3, [r7, #12]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3714      	adds	r7, #20
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b087      	sub	sp, #28
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c206:	8a3b      	ldrh	r3, [r7, #16]
 800c208:	021b      	lsls	r3, r3, #8
 800c20a:	b21a      	sxth	r2, r3
 800c20c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c210:	4313      	orrs	r3, r2
 800c212:	b21b      	sxth	r3, r3
 800c214:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c216:	89fb      	ldrh	r3, [r7, #14]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	371c      	adds	r7, #28
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c22e:	2300      	movs	r3, #0
 800c230:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c23a:	2b40      	cmp	r3, #64	; 0x40
 800c23c:	d005      	beq.n	800c24a <USBD_StdDevReq+0x26>
 800c23e:	2b40      	cmp	r3, #64	; 0x40
 800c240:	d857      	bhi.n	800c2f2 <USBD_StdDevReq+0xce>
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00f      	beq.n	800c266 <USBD_StdDevReq+0x42>
 800c246:	2b20      	cmp	r3, #32
 800c248:	d153      	bne.n	800c2f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	32ae      	adds	r2, #174	; 0xae
 800c254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	6839      	ldr	r1, [r7, #0]
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	4798      	blx	r3
 800c260:	4603      	mov	r3, r0
 800c262:	73fb      	strb	r3, [r7, #15]
      break;
 800c264:	e04a      	b.n	800c2fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	785b      	ldrb	r3, [r3, #1]
 800c26a:	2b09      	cmp	r3, #9
 800c26c:	d83b      	bhi.n	800c2e6 <USBD_StdDevReq+0xc2>
 800c26e:	a201      	add	r2, pc, #4	; (adr r2, 800c274 <USBD_StdDevReq+0x50>)
 800c270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c274:	0800c2c9 	.word	0x0800c2c9
 800c278:	0800c2dd 	.word	0x0800c2dd
 800c27c:	0800c2e7 	.word	0x0800c2e7
 800c280:	0800c2d3 	.word	0x0800c2d3
 800c284:	0800c2e7 	.word	0x0800c2e7
 800c288:	0800c2a7 	.word	0x0800c2a7
 800c28c:	0800c29d 	.word	0x0800c29d
 800c290:	0800c2e7 	.word	0x0800c2e7
 800c294:	0800c2bf 	.word	0x0800c2bf
 800c298:	0800c2b1 	.word	0x0800c2b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c29c:	6839      	ldr	r1, [r7, #0]
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 fa3c 	bl	800c71c <USBD_GetDescriptor>
          break;
 800c2a4:	e024      	b.n	800c2f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 fba1 	bl	800c9f0 <USBD_SetAddress>
          break;
 800c2ae:	e01f      	b.n	800c2f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c2b0:	6839      	ldr	r1, [r7, #0]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fbe0 	bl	800ca78 <USBD_SetConfig>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	73fb      	strb	r3, [r7, #15]
          break;
 800c2bc:	e018      	b.n	800c2f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 fc83 	bl	800cbcc <USBD_GetConfig>
          break;
 800c2c6:	e013      	b.n	800c2f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c2c8:	6839      	ldr	r1, [r7, #0]
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 fcb4 	bl	800cc38 <USBD_GetStatus>
          break;
 800c2d0:	e00e      	b.n	800c2f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c2d2:	6839      	ldr	r1, [r7, #0]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fce3 	bl	800cca0 <USBD_SetFeature>
          break;
 800c2da:	e009      	b.n	800c2f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fd07 	bl	800ccf2 <USBD_ClrFeature>
          break;
 800c2e4:	e004      	b.n	800c2f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c2e6:	6839      	ldr	r1, [r7, #0]
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 fd5e 	bl	800cdaa <USBD_CtlError>
          break;
 800c2ee:	bf00      	nop
      }
      break;
 800c2f0:	e004      	b.n	800c2fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c2f2:	6839      	ldr	r1, [r7, #0]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fd58 	bl	800cdaa <USBD_CtlError>
      break;
 800c2fa:	bf00      	nop
  }

  return ret;
 800c2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop

0800c308 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c312:	2300      	movs	r3, #0
 800c314:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c31e:	2b40      	cmp	r3, #64	; 0x40
 800c320:	d005      	beq.n	800c32e <USBD_StdItfReq+0x26>
 800c322:	2b40      	cmp	r3, #64	; 0x40
 800c324:	d852      	bhi.n	800c3cc <USBD_StdItfReq+0xc4>
 800c326:	2b00      	cmp	r3, #0
 800c328:	d001      	beq.n	800c32e <USBD_StdItfReq+0x26>
 800c32a:	2b20      	cmp	r3, #32
 800c32c:	d14e      	bne.n	800c3cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c334:	b2db      	uxtb	r3, r3
 800c336:	3b01      	subs	r3, #1
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d840      	bhi.n	800c3be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	889b      	ldrh	r3, [r3, #4]
 800c340:	b2db      	uxtb	r3, r3
 800c342:	2b01      	cmp	r3, #1
 800c344:	d836      	bhi.n	800c3b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	889b      	ldrh	r3, [r3, #4]
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	4619      	mov	r1, r3
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7ff fed9 	bl	800c106 <USBD_CoreFindIF>
 800c354:	4603      	mov	r3, r0
 800c356:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c358:	7bbb      	ldrb	r3, [r7, #14]
 800c35a:	2bff      	cmp	r3, #255	; 0xff
 800c35c:	d01d      	beq.n	800c39a <USBD_StdItfReq+0x92>
 800c35e:	7bbb      	ldrb	r3, [r7, #14]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d11a      	bne.n	800c39a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c364:	7bba      	ldrb	r2, [r7, #14]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	32ae      	adds	r2, #174	; 0xae
 800c36a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00f      	beq.n	800c394 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c374:	7bba      	ldrb	r2, [r7, #14]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c37c:	7bba      	ldrb	r2, [r7, #14]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	32ae      	adds	r2, #174	; 0xae
 800c382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c386:	689b      	ldr	r3, [r3, #8]
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	4798      	blx	r3
 800c38e:	4603      	mov	r3, r0
 800c390:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c392:	e004      	b.n	800c39e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c394:	2303      	movs	r3, #3
 800c396:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c398:	e001      	b.n	800c39e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c39a:	2303      	movs	r3, #3
 800c39c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	88db      	ldrh	r3, [r3, #6]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d110      	bne.n	800c3c8 <USBD_StdItfReq+0xc0>
 800c3a6:	7bfb      	ldrb	r3, [r7, #15]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10d      	bne.n	800c3c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 fdc7 	bl	800cf40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3b2:	e009      	b.n	800c3c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c3b4:	6839      	ldr	r1, [r7, #0]
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 fcf7 	bl	800cdaa <USBD_CtlError>
          break;
 800c3bc:	e004      	b.n	800c3c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c3be:	6839      	ldr	r1, [r7, #0]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 fcf2 	bl	800cdaa <USBD_CtlError>
          break;
 800c3c6:	e000      	b.n	800c3ca <USBD_StdItfReq+0xc2>
          break;
 800c3c8:	bf00      	nop
      }
      break;
 800c3ca:	e004      	b.n	800c3d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c3cc:	6839      	ldr	r1, [r7, #0]
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 fceb 	bl	800cdaa <USBD_CtlError>
      break;
 800c3d4:	bf00      	nop
  }

  return ret;
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	889b      	ldrh	r3, [r3, #4]
 800c3f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3fc:	2b40      	cmp	r3, #64	; 0x40
 800c3fe:	d007      	beq.n	800c410 <USBD_StdEPReq+0x30>
 800c400:	2b40      	cmp	r3, #64	; 0x40
 800c402:	f200 817f 	bhi.w	800c704 <USBD_StdEPReq+0x324>
 800c406:	2b00      	cmp	r3, #0
 800c408:	d02a      	beq.n	800c460 <USBD_StdEPReq+0x80>
 800c40a:	2b20      	cmp	r3, #32
 800c40c:	f040 817a 	bne.w	800c704 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c410:	7bbb      	ldrb	r3, [r7, #14]
 800c412:	4619      	mov	r1, r3
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f7ff fe83 	bl	800c120 <USBD_CoreFindEP>
 800c41a:	4603      	mov	r3, r0
 800c41c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c41e:	7b7b      	ldrb	r3, [r7, #13]
 800c420:	2bff      	cmp	r3, #255	; 0xff
 800c422:	f000 8174 	beq.w	800c70e <USBD_StdEPReq+0x32e>
 800c426:	7b7b      	ldrb	r3, [r7, #13]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f040 8170 	bne.w	800c70e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c42e:	7b7a      	ldrb	r2, [r7, #13]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c436:	7b7a      	ldrb	r2, [r7, #13]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	32ae      	adds	r2, #174	; 0xae
 800c43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	2b00      	cmp	r3, #0
 800c444:	f000 8163 	beq.w	800c70e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c448:	7b7a      	ldrb	r2, [r7, #13]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	32ae      	adds	r2, #174	; 0xae
 800c44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	4798      	blx	r3
 800c45a:	4603      	mov	r3, r0
 800c45c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c45e:	e156      	b.n	800c70e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	785b      	ldrb	r3, [r3, #1]
 800c464:	2b03      	cmp	r3, #3
 800c466:	d008      	beq.n	800c47a <USBD_StdEPReq+0x9a>
 800c468:	2b03      	cmp	r3, #3
 800c46a:	f300 8145 	bgt.w	800c6f8 <USBD_StdEPReq+0x318>
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f000 809b 	beq.w	800c5aa <USBD_StdEPReq+0x1ca>
 800c474:	2b01      	cmp	r3, #1
 800c476:	d03c      	beq.n	800c4f2 <USBD_StdEPReq+0x112>
 800c478:	e13e      	b.n	800c6f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c480:	b2db      	uxtb	r3, r3
 800c482:	2b02      	cmp	r3, #2
 800c484:	d002      	beq.n	800c48c <USBD_StdEPReq+0xac>
 800c486:	2b03      	cmp	r3, #3
 800c488:	d016      	beq.n	800c4b8 <USBD_StdEPReq+0xd8>
 800c48a:	e02c      	b.n	800c4e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c48c:	7bbb      	ldrb	r3, [r7, #14]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00d      	beq.n	800c4ae <USBD_StdEPReq+0xce>
 800c492:	7bbb      	ldrb	r3, [r7, #14]
 800c494:	2b80      	cmp	r3, #128	; 0x80
 800c496:	d00a      	beq.n	800c4ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c498:	7bbb      	ldrb	r3, [r7, #14]
 800c49a:	4619      	mov	r1, r3
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f002 fbf9 	bl	800ec94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4a2:	2180      	movs	r1, #128	; 0x80
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f002 fbf5 	bl	800ec94 <USBD_LL_StallEP>
 800c4aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4ac:	e020      	b.n	800c4f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 fc7a 	bl	800cdaa <USBD_CtlError>
              break;
 800c4b6:	e01b      	b.n	800c4f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	885b      	ldrh	r3, [r3, #2]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10e      	bne.n	800c4de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4c0:	7bbb      	ldrb	r3, [r7, #14]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00b      	beq.n	800c4de <USBD_StdEPReq+0xfe>
 800c4c6:	7bbb      	ldrb	r3, [r7, #14]
 800c4c8:	2b80      	cmp	r3, #128	; 0x80
 800c4ca:	d008      	beq.n	800c4de <USBD_StdEPReq+0xfe>
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	88db      	ldrh	r3, [r3, #6]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d104      	bne.n	800c4de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4d4:	7bbb      	ldrb	r3, [r7, #14]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f002 fbdb 	bl	800ec94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 fd2e 	bl	800cf40 <USBD_CtlSendStatus>

              break;
 800c4e4:	e004      	b.n	800c4f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 fc5e 	bl	800cdaa <USBD_CtlError>
              break;
 800c4ee:	bf00      	nop
          }
          break;
 800c4f0:	e107      	b.n	800c702 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d002      	beq.n	800c504 <USBD_StdEPReq+0x124>
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d016      	beq.n	800c530 <USBD_StdEPReq+0x150>
 800c502:	e04b      	b.n	800c59c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c504:	7bbb      	ldrb	r3, [r7, #14]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00d      	beq.n	800c526 <USBD_StdEPReq+0x146>
 800c50a:	7bbb      	ldrb	r3, [r7, #14]
 800c50c:	2b80      	cmp	r3, #128	; 0x80
 800c50e:	d00a      	beq.n	800c526 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c510:	7bbb      	ldrb	r3, [r7, #14]
 800c512:	4619      	mov	r1, r3
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f002 fbbd 	bl	800ec94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c51a:	2180      	movs	r1, #128	; 0x80
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f002 fbb9 	bl	800ec94 <USBD_LL_StallEP>
 800c522:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c524:	e040      	b.n	800c5a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c526:	6839      	ldr	r1, [r7, #0]
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 fc3e 	bl	800cdaa <USBD_CtlError>
              break;
 800c52e:	e03b      	b.n	800c5a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	885b      	ldrh	r3, [r3, #2]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d136      	bne.n	800c5a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c538:	7bbb      	ldrb	r3, [r7, #14]
 800c53a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d004      	beq.n	800c54c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c542:	7bbb      	ldrb	r3, [r7, #14]
 800c544:	4619      	mov	r1, r3
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f002 fbc3 	bl	800ecd2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 fcf7 	bl	800cf40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c552:	7bbb      	ldrb	r3, [r7, #14]
 800c554:	4619      	mov	r1, r3
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7ff fde2 	bl	800c120 <USBD_CoreFindEP>
 800c55c:	4603      	mov	r3, r0
 800c55e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c560:	7b7b      	ldrb	r3, [r7, #13]
 800c562:	2bff      	cmp	r3, #255	; 0xff
 800c564:	d01f      	beq.n	800c5a6 <USBD_StdEPReq+0x1c6>
 800c566:	7b7b      	ldrb	r3, [r7, #13]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d11c      	bne.n	800c5a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c56c:	7b7a      	ldrb	r2, [r7, #13]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c574:	7b7a      	ldrb	r2, [r7, #13]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	32ae      	adds	r2, #174	; 0xae
 800c57a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d010      	beq.n	800c5a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c584:	7b7a      	ldrb	r2, [r7, #13]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	32ae      	adds	r2, #174	; 0xae
 800c58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	6839      	ldr	r1, [r7, #0]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	4798      	blx	r3
 800c596:	4603      	mov	r3, r0
 800c598:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c59a:	e004      	b.n	800c5a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c59c:	6839      	ldr	r1, [r7, #0]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fc03 	bl	800cdaa <USBD_CtlError>
              break;
 800c5a4:	e000      	b.n	800c5a8 <USBD_StdEPReq+0x1c8>
              break;
 800c5a6:	bf00      	nop
          }
          break;
 800c5a8:	e0ab      	b.n	800c702 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	d002      	beq.n	800c5bc <USBD_StdEPReq+0x1dc>
 800c5b6:	2b03      	cmp	r3, #3
 800c5b8:	d032      	beq.n	800c620 <USBD_StdEPReq+0x240>
 800c5ba:	e097      	b.n	800c6ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5bc:	7bbb      	ldrb	r3, [r7, #14]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d007      	beq.n	800c5d2 <USBD_StdEPReq+0x1f2>
 800c5c2:	7bbb      	ldrb	r3, [r7, #14]
 800c5c4:	2b80      	cmp	r3, #128	; 0x80
 800c5c6:	d004      	beq.n	800c5d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c5c8:	6839      	ldr	r1, [r7, #0]
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 fbed 	bl	800cdaa <USBD_CtlError>
                break;
 800c5d0:	e091      	b.n	800c6f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	da0b      	bge.n	800c5f2 <USBD_StdEPReq+0x212>
 800c5da:	7bbb      	ldrb	r3, [r7, #14]
 800c5dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	4413      	add	r3, r2
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	3310      	adds	r3, #16
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	3304      	adds	r3, #4
 800c5f0:	e00b      	b.n	800c60a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c5f2:	7bbb      	ldrb	r3, [r7, #14]
 800c5f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	4413      	add	r3, r2
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	4413      	add	r3, r2
 800c608:	3304      	adds	r3, #4
 800c60a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	2200      	movs	r2, #0
 800c610:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	2202      	movs	r2, #2
 800c616:	4619      	mov	r1, r3
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 fc37 	bl	800ce8c <USBD_CtlSendData>
              break;
 800c61e:	e06a      	b.n	800c6f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c620:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c624:	2b00      	cmp	r3, #0
 800c626:	da11      	bge.n	800c64c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c628:	7bbb      	ldrb	r3, [r7, #14]
 800c62a:	f003 020f 	and.w	r2, r3, #15
 800c62e:	6879      	ldr	r1, [r7, #4]
 800c630:	4613      	mov	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	4413      	add	r3, r2
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	440b      	add	r3, r1
 800c63a:	3324      	adds	r3, #36	; 0x24
 800c63c:	881b      	ldrh	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d117      	bne.n	800c672 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c642:	6839      	ldr	r1, [r7, #0]
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 fbb0 	bl	800cdaa <USBD_CtlError>
                  break;
 800c64a:	e054      	b.n	800c6f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c64c:	7bbb      	ldrb	r3, [r7, #14]
 800c64e:	f003 020f 	and.w	r2, r3, #15
 800c652:	6879      	ldr	r1, [r7, #4]
 800c654:	4613      	mov	r3, r2
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	440b      	add	r3, r1
 800c65e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c662:	881b      	ldrh	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d104      	bne.n	800c672 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c668:	6839      	ldr	r1, [r7, #0]
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 fb9d 	bl	800cdaa <USBD_CtlError>
                  break;
 800c670:	e041      	b.n	800c6f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c676:	2b00      	cmp	r3, #0
 800c678:	da0b      	bge.n	800c692 <USBD_StdEPReq+0x2b2>
 800c67a:	7bbb      	ldrb	r3, [r7, #14]
 800c67c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c680:	4613      	mov	r3, r2
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	4413      	add	r3, r2
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	3310      	adds	r3, #16
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	4413      	add	r3, r2
 800c68e:	3304      	adds	r3, #4
 800c690:	e00b      	b.n	800c6aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c692:	7bbb      	ldrb	r3, [r7, #14]
 800c694:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c698:	4613      	mov	r3, r2
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	4413      	add	r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	3304      	adds	r3, #4
 800c6aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6ac:	7bbb      	ldrb	r3, [r7, #14]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d002      	beq.n	800c6b8 <USBD_StdEPReq+0x2d8>
 800c6b2:	7bbb      	ldrb	r3, [r7, #14]
 800c6b4:	2b80      	cmp	r3, #128	; 0x80
 800c6b6:	d103      	bne.n	800c6c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	601a      	str	r2, [r3, #0]
 800c6be:	e00e      	b.n	800c6de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c6c0:	7bbb      	ldrb	r3, [r7, #14]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f002 fb23 	bl	800ed10 <USBD_LL_IsStallEP>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d003      	beq.n	800c6d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	601a      	str	r2, [r3, #0]
 800c6d6:	e002      	b.n	800c6de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fbd1 	bl	800ce8c <USBD_CtlSendData>
              break;
 800c6ea:	e004      	b.n	800c6f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c6ec:	6839      	ldr	r1, [r7, #0]
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 fb5b 	bl	800cdaa <USBD_CtlError>
              break;
 800c6f4:	bf00      	nop
          }
          break;
 800c6f6:	e004      	b.n	800c702 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c6f8:	6839      	ldr	r1, [r7, #0]
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fb55 	bl	800cdaa <USBD_CtlError>
          break;
 800c700:	bf00      	nop
      }
      break;
 800c702:	e005      	b.n	800c710 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c704:	6839      	ldr	r1, [r7, #0]
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 fb4f 	bl	800cdaa <USBD_CtlError>
      break;
 800c70c:	e000      	b.n	800c710 <USBD_StdEPReq+0x330>
      break;
 800c70e:	bf00      	nop
  }

  return ret;
 800c710:	7bfb      	ldrb	r3, [r7, #15]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
	...

0800c71c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c726:	2300      	movs	r3, #0
 800c728:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c72a:	2300      	movs	r3, #0
 800c72c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c72e:	2300      	movs	r3, #0
 800c730:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	885b      	ldrh	r3, [r3, #2]
 800c736:	0a1b      	lsrs	r3, r3, #8
 800c738:	b29b      	uxth	r3, r3
 800c73a:	3b01      	subs	r3, #1
 800c73c:	2b06      	cmp	r3, #6
 800c73e:	f200 8128 	bhi.w	800c992 <USBD_GetDescriptor+0x276>
 800c742:	a201      	add	r2, pc, #4	; (adr r2, 800c748 <USBD_GetDescriptor+0x2c>)
 800c744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c748:	0800c765 	.word	0x0800c765
 800c74c:	0800c77d 	.word	0x0800c77d
 800c750:	0800c7bd 	.word	0x0800c7bd
 800c754:	0800c993 	.word	0x0800c993
 800c758:	0800c993 	.word	0x0800c993
 800c75c:	0800c933 	.word	0x0800c933
 800c760:	0800c95f 	.word	0x0800c95f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	7c12      	ldrb	r2, [r2, #16]
 800c770:	f107 0108 	add.w	r1, r7, #8
 800c774:	4610      	mov	r0, r2
 800c776:	4798      	blx	r3
 800c778:	60f8      	str	r0, [r7, #12]
      break;
 800c77a:	e112      	b.n	800c9a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	7c1b      	ldrb	r3, [r3, #16]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d10d      	bne.n	800c7a0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78c:	f107 0208 	add.w	r2, r7, #8
 800c790:	4610      	mov	r0, r2
 800c792:	4798      	blx	r3
 800c794:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3301      	adds	r3, #1
 800c79a:	2202      	movs	r2, #2
 800c79c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c79e:	e100      	b.n	800c9a2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a8:	f107 0208 	add.w	r2, r7, #8
 800c7ac:	4610      	mov	r0, r2
 800c7ae:	4798      	blx	r3
 800c7b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	2202      	movs	r2, #2
 800c7b8:	701a      	strb	r2, [r3, #0]
      break;
 800c7ba:	e0f2      	b.n	800c9a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	885b      	ldrh	r3, [r3, #2]
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	2b05      	cmp	r3, #5
 800c7c4:	f200 80ac 	bhi.w	800c920 <USBD_GetDescriptor+0x204>
 800c7c8:	a201      	add	r2, pc, #4	; (adr r2, 800c7d0 <USBD_GetDescriptor+0xb4>)
 800c7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ce:	bf00      	nop
 800c7d0:	0800c7e9 	.word	0x0800c7e9
 800c7d4:	0800c81d 	.word	0x0800c81d
 800c7d8:	0800c851 	.word	0x0800c851
 800c7dc:	0800c885 	.word	0x0800c885
 800c7e0:	0800c8b9 	.word	0x0800c8b9
 800c7e4:	0800c8ed 	.word	0x0800c8ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d00b      	beq.n	800c80c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	7c12      	ldrb	r2, [r2, #16]
 800c800:	f107 0108 	add.w	r1, r7, #8
 800c804:	4610      	mov	r0, r2
 800c806:	4798      	blx	r3
 800c808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c80a:	e091      	b.n	800c930 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c80c:	6839      	ldr	r1, [r7, #0]
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 facb 	bl	800cdaa <USBD_CtlError>
            err++;
 800c814:	7afb      	ldrb	r3, [r7, #11]
 800c816:	3301      	adds	r3, #1
 800c818:	72fb      	strb	r3, [r7, #11]
          break;
 800c81a:	e089      	b.n	800c930 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00b      	beq.n	800c840 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	7c12      	ldrb	r2, [r2, #16]
 800c834:	f107 0108 	add.w	r1, r7, #8
 800c838:	4610      	mov	r0, r2
 800c83a:	4798      	blx	r3
 800c83c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c83e:	e077      	b.n	800c930 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c840:	6839      	ldr	r1, [r7, #0]
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 fab1 	bl	800cdaa <USBD_CtlError>
            err++;
 800c848:	7afb      	ldrb	r3, [r7, #11]
 800c84a:	3301      	adds	r3, #1
 800c84c:	72fb      	strb	r3, [r7, #11]
          break;
 800c84e:	e06f      	b.n	800c930 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00b      	beq.n	800c874 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	7c12      	ldrb	r2, [r2, #16]
 800c868:	f107 0108 	add.w	r1, r7, #8
 800c86c:	4610      	mov	r0, r2
 800c86e:	4798      	blx	r3
 800c870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c872:	e05d      	b.n	800c930 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c874:	6839      	ldr	r1, [r7, #0]
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 fa97 	bl	800cdaa <USBD_CtlError>
            err++;
 800c87c:	7afb      	ldrb	r3, [r7, #11]
 800c87e:	3301      	adds	r3, #1
 800c880:	72fb      	strb	r3, [r7, #11]
          break;
 800c882:	e055      	b.n	800c930 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c88a:	691b      	ldr	r3, [r3, #16]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00b      	beq.n	800c8a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c896:	691b      	ldr	r3, [r3, #16]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	7c12      	ldrb	r2, [r2, #16]
 800c89c:	f107 0108 	add.w	r1, r7, #8
 800c8a0:	4610      	mov	r0, r2
 800c8a2:	4798      	blx	r3
 800c8a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8a6:	e043      	b.n	800c930 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8a8:	6839      	ldr	r1, [r7, #0]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 fa7d 	bl	800cdaa <USBD_CtlError>
            err++;
 800c8b0:	7afb      	ldrb	r3, [r7, #11]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c8b6:	e03b      	b.n	800c930 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8be:	695b      	ldr	r3, [r3, #20]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d00b      	beq.n	800c8dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ca:	695b      	ldr	r3, [r3, #20]
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	7c12      	ldrb	r2, [r2, #16]
 800c8d0:	f107 0108 	add.w	r1, r7, #8
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	4798      	blx	r3
 800c8d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8da:	e029      	b.n	800c930 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8dc:	6839      	ldr	r1, [r7, #0]
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 fa63 	bl	800cdaa <USBD_CtlError>
            err++;
 800c8e4:	7afb      	ldrb	r3, [r7, #11]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8ea:	e021      	b.n	800c930 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8f2:	699b      	ldr	r3, [r3, #24]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d00b      	beq.n	800c910 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8fe:	699b      	ldr	r3, [r3, #24]
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	7c12      	ldrb	r2, [r2, #16]
 800c904:	f107 0108 	add.w	r1, r7, #8
 800c908:	4610      	mov	r0, r2
 800c90a:	4798      	blx	r3
 800c90c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c90e:	e00f      	b.n	800c930 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fa49 	bl	800cdaa <USBD_CtlError>
            err++;
 800c918:	7afb      	ldrb	r3, [r7, #11]
 800c91a:	3301      	adds	r3, #1
 800c91c:	72fb      	strb	r3, [r7, #11]
          break;
 800c91e:	e007      	b.n	800c930 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c920:	6839      	ldr	r1, [r7, #0]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fa41 	bl	800cdaa <USBD_CtlError>
          err++;
 800c928:	7afb      	ldrb	r3, [r7, #11]
 800c92a:	3301      	adds	r3, #1
 800c92c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c92e:	bf00      	nop
      }
      break;
 800c930:	e037      	b.n	800c9a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	7c1b      	ldrb	r3, [r3, #16]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d109      	bne.n	800c94e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c942:	f107 0208 	add.w	r2, r7, #8
 800c946:	4610      	mov	r0, r2
 800c948:	4798      	blx	r3
 800c94a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c94c:	e029      	b.n	800c9a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c94e:	6839      	ldr	r1, [r7, #0]
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 fa2a 	bl	800cdaa <USBD_CtlError>
        err++;
 800c956:	7afb      	ldrb	r3, [r7, #11]
 800c958:	3301      	adds	r3, #1
 800c95a:	72fb      	strb	r3, [r7, #11]
      break;
 800c95c:	e021      	b.n	800c9a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	7c1b      	ldrb	r3, [r3, #16]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10d      	bne.n	800c982 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c96e:	f107 0208 	add.w	r2, r7, #8
 800c972:	4610      	mov	r0, r2
 800c974:	4798      	blx	r3
 800c976:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	3301      	adds	r3, #1
 800c97c:	2207      	movs	r2, #7
 800c97e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c980:	e00f      	b.n	800c9a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fa10 	bl	800cdaa <USBD_CtlError>
        err++;
 800c98a:	7afb      	ldrb	r3, [r7, #11]
 800c98c:	3301      	adds	r3, #1
 800c98e:	72fb      	strb	r3, [r7, #11]
      break;
 800c990:	e007      	b.n	800c9a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c992:	6839      	ldr	r1, [r7, #0]
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 fa08 	bl	800cdaa <USBD_CtlError>
      err++;
 800c99a:	7afb      	ldrb	r3, [r7, #11]
 800c99c:	3301      	adds	r3, #1
 800c99e:	72fb      	strb	r3, [r7, #11]
      break;
 800c9a0:	bf00      	nop
  }

  if (err != 0U)
 800c9a2:	7afb      	ldrb	r3, [r7, #11]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d11e      	bne.n	800c9e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	88db      	ldrh	r3, [r3, #6]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d016      	beq.n	800c9de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c9b0:	893b      	ldrh	r3, [r7, #8]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00e      	beq.n	800c9d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	88da      	ldrh	r2, [r3, #6]
 800c9ba:	893b      	ldrh	r3, [r7, #8]
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	bf28      	it	cs
 800c9c0:	4613      	movcs	r3, r2
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c9c6:	893b      	ldrh	r3, [r7, #8]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	68f9      	ldr	r1, [r7, #12]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 fa5d 	bl	800ce8c <USBD_CtlSendData>
 800c9d2:	e009      	b.n	800c9e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c9d4:	6839      	ldr	r1, [r7, #0]
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 f9e7 	bl	800cdaa <USBD_CtlError>
 800c9dc:	e004      	b.n	800c9e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 faae 	bl	800cf40 <USBD_CtlSendStatus>
 800c9e4:	e000      	b.n	800c9e8 <USBD_GetDescriptor+0x2cc>
    return;
 800c9e6:	bf00      	nop
  }
}
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop

0800c9f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	889b      	ldrh	r3, [r3, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d131      	bne.n	800ca66 <USBD_SetAddress+0x76>
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	88db      	ldrh	r3, [r3, #6]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d12d      	bne.n	800ca66 <USBD_SetAddress+0x76>
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	885b      	ldrh	r3, [r3, #2]
 800ca0e:	2b7f      	cmp	r3, #127	; 0x7f
 800ca10:	d829      	bhi.n	800ca66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	885b      	ldrh	r3, [r3, #2]
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b03      	cmp	r3, #3
 800ca28:	d104      	bne.n	800ca34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca2a:	6839      	ldr	r1, [r7, #0]
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 f9bc 	bl	800cdaa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca32:	e01d      	b.n	800ca70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	7bfa      	ldrb	r2, [r7, #15]
 800ca38:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca3c:	7bfb      	ldrb	r3, [r7, #15]
 800ca3e:	4619      	mov	r1, r3
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f002 f991 	bl	800ed68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 fa7a 	bl	800cf40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca4c:	7bfb      	ldrb	r3, [r7, #15]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d004      	beq.n	800ca5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2202      	movs	r2, #2
 800ca56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca5a:	e009      	b.n	800ca70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca64:	e004      	b.n	800ca70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca66:	6839      	ldr	r1, [r7, #0]
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 f99e 	bl	800cdaa <USBD_CtlError>
  }
}
 800ca6e:	bf00      	nop
 800ca70:	bf00      	nop
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	885b      	ldrh	r3, [r3, #2]
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	4b4e      	ldr	r3, [pc, #312]	; (800cbc8 <USBD_SetConfig+0x150>)
 800ca8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca90:	4b4d      	ldr	r3, [pc, #308]	; (800cbc8 <USBD_SetConfig+0x150>)
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d905      	bls.n	800caa4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ca98:	6839      	ldr	r1, [r7, #0]
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 f985 	bl	800cdaa <USBD_CtlError>
    return USBD_FAIL;
 800caa0:	2303      	movs	r3, #3
 800caa2:	e08c      	b.n	800cbbe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	2b02      	cmp	r3, #2
 800caae:	d002      	beq.n	800cab6 <USBD_SetConfig+0x3e>
 800cab0:	2b03      	cmp	r3, #3
 800cab2:	d029      	beq.n	800cb08 <USBD_SetConfig+0x90>
 800cab4:	e075      	b.n	800cba2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cab6:	4b44      	ldr	r3, [pc, #272]	; (800cbc8 <USBD_SetConfig+0x150>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d020      	beq.n	800cb00 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cabe:	4b42      	ldr	r3, [pc, #264]	; (800cbc8 <USBD_SetConfig+0x150>)
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	461a      	mov	r2, r3
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cac8:	4b3f      	ldr	r3, [pc, #252]	; (800cbc8 <USBD_SetConfig+0x150>)
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	4619      	mov	r1, r3
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f7fe ffe1 	bl	800ba96 <USBD_SetClassConfig>
 800cad4:	4603      	mov	r3, r0
 800cad6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cad8:	7bfb      	ldrb	r3, [r7, #15]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d008      	beq.n	800caf0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cade:	6839      	ldr	r1, [r7, #0]
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 f962 	bl	800cdaa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2202      	movs	r2, #2
 800caea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800caee:	e065      	b.n	800cbbc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 fa25 	bl	800cf40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2203      	movs	r2, #3
 800cafa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cafe:	e05d      	b.n	800cbbc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 fa1d 	bl	800cf40 <USBD_CtlSendStatus>
      break;
 800cb06:	e059      	b.n	800cbbc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cb08:	4b2f      	ldr	r3, [pc, #188]	; (800cbc8 <USBD_SetConfig+0x150>)
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d112      	bne.n	800cb36 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2202      	movs	r2, #2
 800cb14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cb18:	4b2b      	ldr	r3, [pc, #172]	; (800cbc8 <USBD_SetConfig+0x150>)
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb22:	4b29      	ldr	r3, [pc, #164]	; (800cbc8 <USBD_SetConfig+0x150>)
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	4619      	mov	r1, r3
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7fe ffd0 	bl	800bace <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 fa06 	bl	800cf40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb34:	e042      	b.n	800cbbc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cb36:	4b24      	ldr	r3, [pc, #144]	; (800cbc8 <USBD_SetConfig+0x150>)
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d02a      	beq.n	800cb9a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7fe ffbe 	bl	800bace <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb52:	4b1d      	ldr	r3, [pc, #116]	; (800cbc8 <USBD_SetConfig+0x150>)
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	461a      	mov	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb5c:	4b1a      	ldr	r3, [pc, #104]	; (800cbc8 <USBD_SetConfig+0x150>)
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	4619      	mov	r1, r3
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f7fe ff97 	bl	800ba96 <USBD_SetClassConfig>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb6c:	7bfb      	ldrb	r3, [r7, #15]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d00f      	beq.n	800cb92 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 f918 	bl	800cdaa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	4619      	mov	r1, r3
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f7fe ffa3 	bl	800bace <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2202      	movs	r2, #2
 800cb8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cb90:	e014      	b.n	800cbbc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 f9d4 	bl	800cf40 <USBD_CtlSendStatus>
      break;
 800cb98:	e010      	b.n	800cbbc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 f9d0 	bl	800cf40 <USBD_CtlSendStatus>
      break;
 800cba0:	e00c      	b.n	800cbbc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cba2:	6839      	ldr	r1, [r7, #0]
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 f900 	bl	800cdaa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cbaa:	4b07      	ldr	r3, [pc, #28]	; (800cbc8 <USBD_SetConfig+0x150>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7fe ff8c 	bl	800bace <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cbb6:	2303      	movs	r3, #3
 800cbb8:	73fb      	strb	r3, [r7, #15]
      break;
 800cbba:	bf00      	nop
  }

  return ret;
 800cbbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	200007c8 	.word	0x200007c8

0800cbcc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	88db      	ldrh	r3, [r3, #6]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d004      	beq.n	800cbe8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cbde:	6839      	ldr	r1, [r7, #0]
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 f8e2 	bl	800cdaa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cbe6:	e023      	b.n	800cc30 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	dc02      	bgt.n	800cbfa <USBD_GetConfig+0x2e>
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	dc03      	bgt.n	800cc00 <USBD_GetConfig+0x34>
 800cbf8:	e015      	b.n	800cc26 <USBD_GetConfig+0x5a>
 800cbfa:	2b03      	cmp	r3, #3
 800cbfc:	d00b      	beq.n	800cc16 <USBD_GetConfig+0x4a>
 800cbfe:	e012      	b.n	800cc26 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	3308      	adds	r3, #8
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f93c 	bl	800ce8c <USBD_CtlSendData>
        break;
 800cc14:	e00c      	b.n	800cc30 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	3304      	adds	r3, #4
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 f934 	bl	800ce8c <USBD_CtlSendData>
        break;
 800cc24:	e004      	b.n	800cc30 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc26:	6839      	ldr	r1, [r7, #0]
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 f8be 	bl	800cdaa <USBD_CtlError>
        break;
 800cc2e:	bf00      	nop
}
 800cc30:	bf00      	nop
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	2b02      	cmp	r3, #2
 800cc4e:	d81e      	bhi.n	800cc8e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	88db      	ldrh	r3, [r3, #6]
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	d004      	beq.n	800cc62 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc58:	6839      	ldr	r1, [r7, #0]
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f8a5 	bl	800cdaa <USBD_CtlError>
        break;
 800cc60:	e01a      	b.n	800cc98 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2201      	movs	r2, #1
 800cc66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d005      	beq.n	800cc7e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	f043 0202 	orr.w	r2, r3, #2
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	330c      	adds	r3, #12
 800cc82:	2202      	movs	r2, #2
 800cc84:	4619      	mov	r1, r3
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 f900 	bl	800ce8c <USBD_CtlSendData>
      break;
 800cc8c:	e004      	b.n	800cc98 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cc8e:	6839      	ldr	r1, [r7, #0]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 f88a 	bl	800cdaa <USBD_CtlError>
      break;
 800cc96:	bf00      	nop
  }
}
 800cc98:	bf00      	nop
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	885b      	ldrh	r3, [r3, #2]
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d107      	bne.n	800ccc2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 f940 	bl	800cf40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ccc0:	e013      	b.n	800ccea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	885b      	ldrh	r3, [r3, #2]
 800ccc6:	2b02      	cmp	r3, #2
 800ccc8:	d10b      	bne.n	800cce2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	889b      	ldrh	r3, [r3, #4]
 800ccce:	0a1b      	lsrs	r3, r3, #8
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	b2da      	uxtb	r2, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 f930 	bl	800cf40 <USBD_CtlSendStatus>
}
 800cce0:	e003      	b.n	800ccea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cce2:	6839      	ldr	r1, [r7, #0]
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 f860 	bl	800cdaa <USBD_CtlError>
}
 800ccea:	bf00      	nop
 800ccec:	3708      	adds	r7, #8
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b082      	sub	sp, #8
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	3b01      	subs	r3, #1
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	d80b      	bhi.n	800cd22 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	885b      	ldrh	r3, [r3, #2]
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d10c      	bne.n	800cd2c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2200      	movs	r2, #0
 800cd16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 f910 	bl	800cf40 <USBD_CtlSendStatus>
      }
      break;
 800cd20:	e004      	b.n	800cd2c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd22:	6839      	ldr	r1, [r7, #0]
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 f840 	bl	800cdaa <USBD_CtlError>
      break;
 800cd2a:	e000      	b.n	800cd2e <USBD_ClrFeature+0x3c>
      break;
 800cd2c:	bf00      	nop
  }
}
 800cd2e:	bf00      	nop
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}

0800cd36 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b084      	sub	sp, #16
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
 800cd3e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	781a      	ldrb	r2, [r3, #0]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	781a      	ldrb	r2, [r3, #0]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f7ff fa41 	bl	800c1e8 <SWAPBYTE>
 800cd66:	4603      	mov	r3, r0
 800cd68:	461a      	mov	r2, r3
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	3301      	adds	r3, #1
 800cd72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	3301      	adds	r3, #1
 800cd78:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f7ff fa34 	bl	800c1e8 <SWAPBYTE>
 800cd80:	4603      	mov	r3, r0
 800cd82:	461a      	mov	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	3301      	adds	r3, #1
 800cd92:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f7ff fa27 	bl	800c1e8 <SWAPBYTE>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	80da      	strh	r2, [r3, #6]
}
 800cda2:	bf00      	nop
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b082      	sub	sp, #8
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
 800cdb2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdb4:	2180      	movs	r1, #128	; 0x80
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f001 ff6c 	bl	800ec94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f001 ff68 	bl	800ec94 <USBD_LL_StallEP>
}
 800cdc4:	bf00      	nop
 800cdc6:	3708      	adds	r7, #8
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d036      	beq.n	800ce50 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cde6:	6938      	ldr	r0, [r7, #16]
 800cde8:	f000 f836 	bl	800ce58 <USBD_GetLen>
 800cdec:	4603      	mov	r3, r0
 800cdee:	3301      	adds	r3, #1
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	005b      	lsls	r3, r3, #1
 800cdf4:	b29a      	uxth	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cdfa:	7dfb      	ldrb	r3, [r7, #23]
 800cdfc:	68ba      	ldr	r2, [r7, #8]
 800cdfe:	4413      	add	r3, r2
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	7812      	ldrb	r2, [r2, #0]
 800ce04:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce06:	7dfb      	ldrb	r3, [r7, #23]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce0c:	7dfb      	ldrb	r3, [r7, #23]
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	4413      	add	r3, r2
 800ce12:	2203      	movs	r2, #3
 800ce14:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce16:	7dfb      	ldrb	r3, [r7, #23]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce1c:	e013      	b.n	800ce46 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ce1e:	7dfb      	ldrb	r3, [r7, #23]
 800ce20:	68ba      	ldr	r2, [r7, #8]
 800ce22:	4413      	add	r3, r2
 800ce24:	693a      	ldr	r2, [r7, #16]
 800ce26:	7812      	ldrb	r2, [r2, #0]
 800ce28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	613b      	str	r3, [r7, #16]
    idx++;
 800ce30:	7dfb      	ldrb	r3, [r7, #23]
 800ce32:	3301      	adds	r3, #1
 800ce34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce36:	7dfb      	ldrb	r3, [r7, #23]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce40:	7dfb      	ldrb	r3, [r7, #23]
 800ce42:	3301      	adds	r3, #1
 800ce44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d1e7      	bne.n	800ce1e <USBD_GetString+0x52>
 800ce4e:	e000      	b.n	800ce52 <USBD_GetString+0x86>
    return;
 800ce50:	bf00      	nop
  }
}
 800ce52:	3718      	adds	r7, #24
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce60:	2300      	movs	r3, #0
 800ce62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce68:	e005      	b.n	800ce76 <USBD_GetLen+0x1e>
  {
    len++;
 800ce6a:	7bfb      	ldrb	r3, [r7, #15]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	3301      	adds	r3, #1
 800ce74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d1f5      	bne.n	800ce6a <USBD_GetLen+0x12>
  }

  return len;
 800ce7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3714      	adds	r7, #20
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2202      	movs	r2, #2
 800ce9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	68ba      	ldr	r2, [r7, #8]
 800ceb0:	2100      	movs	r1, #0
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	f001 ff77 	bl	800eda6 <USBD_LL_Transmit>

  return USBD_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b084      	sub	sp, #16
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	60f8      	str	r0, [r7, #12]
 800ceca:	60b9      	str	r1, [r7, #8]
 800cecc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	68ba      	ldr	r2, [r7, #8]
 800ced2:	2100      	movs	r1, #0
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f001 ff66 	bl	800eda6 <USBD_LL_Transmit>

  return USBD_OK;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2203      	movs	r2, #3
 800cef4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	2100      	movs	r1, #0
 800cf0e:	68f8      	ldr	r0, [r7, #12]
 800cf10:	f001 ff6a 	bl	800ede8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3710      	adds	r7, #16
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b084      	sub	sp, #16
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	60f8      	str	r0, [r7, #12]
 800cf26:	60b9      	str	r1, [r7, #8]
 800cf28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	68ba      	ldr	r2, [r7, #8]
 800cf2e:	2100      	movs	r1, #0
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f001 ff59 	bl	800ede8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf36:	2300      	movs	r3, #0
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3710      	adds	r7, #16
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2204      	movs	r2, #4
 800cf4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf50:	2300      	movs	r3, #0
 800cf52:	2200      	movs	r2, #0
 800cf54:	2100      	movs	r1, #0
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f001 ff25 	bl	800eda6 <USBD_LL_Transmit>

  return USBD_OK;
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}

0800cf66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf66:	b580      	push	{r7, lr}
 800cf68:	b082      	sub	sp, #8
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2205      	movs	r2, #5
 800cf72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf76:	2300      	movs	r3, #0
 800cf78:	2200      	movs	r2, #0
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f001 ff33 	bl	800ede8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	4603      	mov	r3, r0
 800cf94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cf96:	2300      	movs	r3, #0
 800cf98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cf9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf9e:	2b84      	cmp	r3, #132	; 0x84
 800cfa0:	d005      	beq.n	800cfae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cfa2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	3303      	adds	r3, #3
 800cfac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cfae:	68fb      	ldr	r3, [r7, #12]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3714      	adds	r7, #20
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cfc0:	f000 faf6 	bl	800d5b0 <vTaskStartScheduler>
  
  return osOK;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cfca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfcc:	b089      	sub	sp, #36	; 0x24
 800cfce:	af04      	add	r7, sp, #16
 800cfd0:	6078      	str	r0, [r7, #4]
 800cfd2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	695b      	ldr	r3, [r3, #20]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d020      	beq.n	800d01e <osThreadCreate+0x54>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	699b      	ldr	r3, [r3, #24]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d01c      	beq.n	800d01e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	685c      	ldr	r4, [r3, #4]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	691e      	ldr	r6, [r3, #16]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7ff ffc8 	bl	800cf8c <makeFreeRtosPriority>
 800cffc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	695b      	ldr	r3, [r3, #20]
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d006:	9202      	str	r2, [sp, #8]
 800d008:	9301      	str	r3, [sp, #4]
 800d00a:	9100      	str	r1, [sp, #0]
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	4632      	mov	r2, r6
 800d010:	4629      	mov	r1, r5
 800d012:	4620      	mov	r0, r4
 800d014:	f000 f8ed 	bl	800d1f2 <xTaskCreateStatic>
 800d018:	4603      	mov	r3, r0
 800d01a:	60fb      	str	r3, [r7, #12]
 800d01c:	e01c      	b.n	800d058 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	685c      	ldr	r4, [r3, #4]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d02a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d032:	4618      	mov	r0, r3
 800d034:	f7ff ffaa 	bl	800cf8c <makeFreeRtosPriority>
 800d038:	4602      	mov	r2, r0
 800d03a:	f107 030c 	add.w	r3, r7, #12
 800d03e:	9301      	str	r3, [sp, #4]
 800d040:	9200      	str	r2, [sp, #0]
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	4632      	mov	r2, r6
 800d046:	4629      	mov	r1, r5
 800d048:	4620      	mov	r0, r4
 800d04a:	f000 f92f 	bl	800d2ac <xTaskCreate>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b01      	cmp	r3, #1
 800d052:	d001      	beq.n	800d058 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d054:	2300      	movs	r3, #0
 800d056:	e000      	b.n	800d05a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d058:	68fb      	ldr	r3, [r7, #12]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3714      	adds	r7, #20
 800d05e:	46bd      	mov	sp, r7
 800d060:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d062 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b084      	sub	sp, #16
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d001      	beq.n	800d078 <osDelay+0x16>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	e000      	b.n	800d07a <osDelay+0x18>
 800d078:	2301      	movs	r3, #1
 800d07a:	4618      	mov	r0, r3
 800d07c:	f000 fa64 	bl	800d548 <vTaskDelay>
  
  return osOK;
 800d080:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d082:	4618      	mov	r0, r3
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d08a:	b480      	push	{r7}
 800d08c:	b083      	sub	sp, #12
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f103 0208 	add.w	r2, r3, #8
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f103 0208 	add.w	r2, r3, #8
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f103 0208 	add.w	r2, r3, #8
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d0be:	bf00      	nop
 800d0c0:	370c      	adds	r7, #12
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr

0800d0ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d0ca:	b480      	push	{r7}
 800d0cc:	b083      	sub	sp, #12
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d0d8:	bf00      	nop
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b085      	sub	sp, #20
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	689a      	ldr	r2, [r3, #8]
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	683a      	ldr	r2, [r7, #0]
 800d108:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	683a      	ldr	r2, [r7, #0]
 800d10e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	1c5a      	adds	r2, r3, #1
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	601a      	str	r2, [r3, #0]
}
 800d120:	bf00      	nop
 800d122:	3714      	adds	r7, #20
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr

0800d12c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d142:	d103      	bne.n	800d14c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	691b      	ldr	r3, [r3, #16]
 800d148:	60fb      	str	r3, [r7, #12]
 800d14a:	e00c      	b.n	800d166 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	3308      	adds	r3, #8
 800d150:	60fb      	str	r3, [r7, #12]
 800d152:	e002      	b.n	800d15a <vListInsert+0x2e>
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	60fb      	str	r3, [r7, #12]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68ba      	ldr	r2, [r7, #8]
 800d162:	429a      	cmp	r2, r3
 800d164:	d2f6      	bcs.n	800d154 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	685a      	ldr	r2, [r3, #4]
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	683a      	ldr	r2, [r7, #0]
 800d174:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	683a      	ldr	r2, [r7, #0]
 800d180:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	1c5a      	adds	r2, r3, #1
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	601a      	str	r2, [r3, #0]
}
 800d192:	bf00      	nop
 800d194:	3714      	adds	r7, #20
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr

0800d19e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d19e:	b480      	push	{r7}
 800d1a0:	b085      	sub	sp, #20
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	691b      	ldr	r3, [r3, #16]
 800d1aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	6892      	ldr	r2, [r2, #8]
 800d1b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	6852      	ldr	r2, [r2, #4]
 800d1be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d103      	bne.n	800d1d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	689a      	ldr	r2, [r3, #8]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	1e5a      	subs	r2, r3, #1
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3714      	adds	r7, #20
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr

0800d1f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b08e      	sub	sp, #56	; 0x38
 800d1f6:	af04      	add	r7, sp, #16
 800d1f8:	60f8      	str	r0, [r7, #12]
 800d1fa:	60b9      	str	r1, [r7, #8]
 800d1fc:	607a      	str	r2, [r7, #4]
 800d1fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d202:	2b00      	cmp	r3, #0
 800d204:	d10a      	bne.n	800d21c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20a:	f383 8811 	msr	BASEPRI, r3
 800d20e:	f3bf 8f6f 	isb	sy
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d218:	bf00      	nop
 800d21a:	e7fe      	b.n	800d21a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d10a      	bne.n	800d238 <xTaskCreateStatic+0x46>
	__asm volatile
 800d222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d226:	f383 8811 	msr	BASEPRI, r3
 800d22a:	f3bf 8f6f 	isb	sy
 800d22e:	f3bf 8f4f 	dsb	sy
 800d232:	61fb      	str	r3, [r7, #28]
}
 800d234:	bf00      	nop
 800d236:	e7fe      	b.n	800d236 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d238:	23a0      	movs	r3, #160	; 0xa0
 800d23a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	2ba0      	cmp	r3, #160	; 0xa0
 800d240:	d00a      	beq.n	800d258 <xTaskCreateStatic+0x66>
	__asm volatile
 800d242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d246:	f383 8811 	msr	BASEPRI, r3
 800d24a:	f3bf 8f6f 	isb	sy
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	61bb      	str	r3, [r7, #24]
}
 800d254:	bf00      	nop
 800d256:	e7fe      	b.n	800d256 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d258:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d01e      	beq.n	800d29e <xTaskCreateStatic+0xac>
 800d260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d262:	2b00      	cmp	r3, #0
 800d264:	d01b      	beq.n	800d29e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d268:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d26e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	2202      	movs	r2, #2
 800d274:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d278:	2300      	movs	r3, #0
 800d27a:	9303      	str	r3, [sp, #12]
 800d27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27e:	9302      	str	r3, [sp, #8]
 800d280:	f107 0314 	add.w	r3, r7, #20
 800d284:	9301      	str	r3, [sp, #4]
 800d286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d288:	9300      	str	r3, [sp, #0]
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	68b9      	ldr	r1, [r7, #8]
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f000 f851 	bl	800d338 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d298:	f000 f8ec 	bl	800d474 <prvAddNewTaskToReadyList>
 800d29c:	e001      	b.n	800d2a2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d2a2:	697b      	ldr	r3, [r7, #20]
	}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3728      	adds	r7, #40	; 0x28
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b08c      	sub	sp, #48	; 0x30
 800d2b0:	af04      	add	r7, sp, #16
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	603b      	str	r3, [r7, #0]
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d2bc:	88fb      	ldrh	r3, [r7, #6]
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f000 fef1 	bl	800e0a8 <pvPortMalloc>
 800d2c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d00e      	beq.n	800d2ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d2ce:	20a0      	movs	r0, #160	; 0xa0
 800d2d0:	f000 feea 	bl	800e0a8 <pvPortMalloc>
 800d2d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d2d6:	69fb      	ldr	r3, [r7, #28]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d003      	beq.n	800d2e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d2dc:	69fb      	ldr	r3, [r7, #28]
 800d2de:	697a      	ldr	r2, [r7, #20]
 800d2e0:	631a      	str	r2, [r3, #48]	; 0x30
 800d2e2:	e005      	b.n	800d2f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d2e4:	6978      	ldr	r0, [r7, #20]
 800d2e6:	f000 ffab 	bl	800e240 <vPortFree>
 800d2ea:	e001      	b.n	800d2f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d017      	beq.n	800d326 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d2fe:	88fa      	ldrh	r2, [r7, #6]
 800d300:	2300      	movs	r3, #0
 800d302:	9303      	str	r3, [sp, #12]
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	9302      	str	r3, [sp, #8]
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	9301      	str	r3, [sp, #4]
 800d30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30e:	9300      	str	r3, [sp, #0]
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	68b9      	ldr	r1, [r7, #8]
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	f000 f80f 	bl	800d338 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d31a:	69f8      	ldr	r0, [r7, #28]
 800d31c:	f000 f8aa 	bl	800d474 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d320:	2301      	movs	r3, #1
 800d322:	61bb      	str	r3, [r7, #24]
 800d324:	e002      	b.n	800d32c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d326:	f04f 33ff 	mov.w	r3, #4294967295
 800d32a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d32c:	69bb      	ldr	r3, [r7, #24]
	}
 800d32e:	4618      	mov	r0, r3
 800d330:	3720      	adds	r7, #32
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
	...

0800d338 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b088      	sub	sp, #32
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	60b9      	str	r1, [r7, #8]
 800d342:	607a      	str	r2, [r7, #4]
 800d344:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d350:	3b01      	subs	r3, #1
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	4413      	add	r3, r2
 800d356:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	f023 0307 	bic.w	r3, r3, #7
 800d35e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	f003 0307 	and.w	r3, r3, #7
 800d366:	2b00      	cmp	r3, #0
 800d368:	d00a      	beq.n	800d380 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36e:	f383 8811 	msr	BASEPRI, r3
 800d372:	f3bf 8f6f 	isb	sy
 800d376:	f3bf 8f4f 	dsb	sy
 800d37a:	617b      	str	r3, [r7, #20]
}
 800d37c:	bf00      	nop
 800d37e:	e7fe      	b.n	800d37e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d01f      	beq.n	800d3c6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d386:	2300      	movs	r3, #0
 800d388:	61fb      	str	r3, [r7, #28]
 800d38a:	e012      	b.n	800d3b2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d38c:	68ba      	ldr	r2, [r7, #8]
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	4413      	add	r3, r2
 800d392:	7819      	ldrb	r1, [r3, #0]
 800d394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	4413      	add	r3, r2
 800d39a:	3334      	adds	r3, #52	; 0x34
 800d39c:	460a      	mov	r2, r1
 800d39e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d3a0:	68ba      	ldr	r2, [r7, #8]
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d006      	beq.n	800d3ba <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	61fb      	str	r3, [r7, #28]
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	2b0f      	cmp	r3, #15
 800d3b6:	d9e9      	bls.n	800d38c <prvInitialiseNewTask+0x54>
 800d3b8:	e000      	b.n	800d3bc <prvInitialiseNewTask+0x84>
			{
				break;
 800d3ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d3c4:	e003      	b.n	800d3ce <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d0:	2b06      	cmp	r3, #6
 800d3d2:	d901      	bls.n	800d3d8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d3d4:	2306      	movs	r3, #6
 800d3d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ec:	3304      	adds	r3, #4
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7ff fe6b 	bl	800d0ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f6:	3318      	adds	r3, #24
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7ff fe66 	bl	800d0ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d402:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d406:	f1c3 0207 	rsb	r2, r3, #7
 800d40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d412:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d416:	2200      	movs	r2, #0
 800d418:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41e:	2200      	movs	r2, #0
 800d420:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d426:	334c      	adds	r3, #76	; 0x4c
 800d428:	224c      	movs	r2, #76	; 0x4c
 800d42a:	2100      	movs	r1, #0
 800d42c:	4618      	mov	r0, r3
 800d42e:	f001 fd53 	bl	800eed8 <memset>
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	4a0c      	ldr	r2, [pc, #48]	; (800d468 <prvInitialiseNewTask+0x130>)
 800d436:	651a      	str	r2, [r3, #80]	; 0x50
 800d438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43a:	4a0c      	ldr	r2, [pc, #48]	; (800d46c <prvInitialiseNewTask+0x134>)
 800d43c:	655a      	str	r2, [r3, #84]	; 0x54
 800d43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d440:	4a0b      	ldr	r2, [pc, #44]	; (800d470 <prvInitialiseNewTask+0x138>)
 800d442:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d444:	683a      	ldr	r2, [r7, #0]
 800d446:	68f9      	ldr	r1, [r7, #12]
 800d448:	69b8      	ldr	r0, [r7, #24]
 800d44a:	f000 fc1f 	bl	800dc8c <pxPortInitialiseStack>
 800d44e:	4602      	mov	r2, r0
 800d450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d452:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d456:	2b00      	cmp	r3, #0
 800d458:	d002      	beq.n	800d460 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d45e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d460:	bf00      	nop
 800d462:	3720      	adds	r7, #32
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	20006100 	.word	0x20006100
 800d46c:	20006168 	.word	0x20006168
 800d470:	200061d0 	.word	0x200061d0

0800d474 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d47c:	f000 fd32 	bl	800dee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d480:	4b2a      	ldr	r3, [pc, #168]	; (800d52c <prvAddNewTaskToReadyList+0xb8>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	3301      	adds	r3, #1
 800d486:	4a29      	ldr	r2, [pc, #164]	; (800d52c <prvAddNewTaskToReadyList+0xb8>)
 800d488:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d48a:	4b29      	ldr	r3, [pc, #164]	; (800d530 <prvAddNewTaskToReadyList+0xbc>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d109      	bne.n	800d4a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d492:	4a27      	ldr	r2, [pc, #156]	; (800d530 <prvAddNewTaskToReadyList+0xbc>)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d498:	4b24      	ldr	r3, [pc, #144]	; (800d52c <prvAddNewTaskToReadyList+0xb8>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d110      	bne.n	800d4c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d4a0:	f000 facc 	bl	800da3c <prvInitialiseTaskLists>
 800d4a4:	e00d      	b.n	800d4c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d4a6:	4b23      	ldr	r3, [pc, #140]	; (800d534 <prvAddNewTaskToReadyList+0xc0>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d109      	bne.n	800d4c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d4ae:	4b20      	ldr	r3, [pc, #128]	; (800d530 <prvAddNewTaskToReadyList+0xbc>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d802      	bhi.n	800d4c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d4bc:	4a1c      	ldr	r2, [pc, #112]	; (800d530 <prvAddNewTaskToReadyList+0xbc>)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d4c2:	4b1d      	ldr	r3, [pc, #116]	; (800d538 <prvAddNewTaskToReadyList+0xc4>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	4a1b      	ldr	r2, [pc, #108]	; (800d538 <prvAddNewTaskToReadyList+0xc4>)
 800d4ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	409a      	lsls	r2, r3
 800d4d4:	4b19      	ldr	r3, [pc, #100]	; (800d53c <prvAddNewTaskToReadyList+0xc8>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	4a18      	ldr	r2, [pc, #96]	; (800d53c <prvAddNewTaskToReadyList+0xc8>)
 800d4dc:	6013      	str	r3, [r2, #0]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	4413      	add	r3, r2
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	4a15      	ldr	r2, [pc, #84]	; (800d540 <prvAddNewTaskToReadyList+0xcc>)
 800d4ec:	441a      	add	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	3304      	adds	r3, #4
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	4610      	mov	r0, r2
 800d4f6:	f7ff fdf5 	bl	800d0e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d4fa:	f000 fd23 	bl	800df44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d4fe:	4b0d      	ldr	r3, [pc, #52]	; (800d534 <prvAddNewTaskToReadyList+0xc0>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00e      	beq.n	800d524 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d506:	4b0a      	ldr	r3, [pc, #40]	; (800d530 <prvAddNewTaskToReadyList+0xbc>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d510:	429a      	cmp	r2, r3
 800d512:	d207      	bcs.n	800d524 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d514:	4b0b      	ldr	r3, [pc, #44]	; (800d544 <prvAddNewTaskToReadyList+0xd0>)
 800d516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d51a:	601a      	str	r2, [r3, #0]
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d524:	bf00      	nop
 800d526:	3708      	adds	r7, #8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	200008cc 	.word	0x200008cc
 800d530:	200007cc 	.word	0x200007cc
 800d534:	200008d8 	.word	0x200008d8
 800d538:	200008e8 	.word	0x200008e8
 800d53c:	200008d4 	.word	0x200008d4
 800d540:	200007d0 	.word	0x200007d0
 800d544:	e000ed04 	.word	0xe000ed04

0800d548 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d550:	2300      	movs	r3, #0
 800d552:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d017      	beq.n	800d58a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d55a:	4b13      	ldr	r3, [pc, #76]	; (800d5a8 <vTaskDelay+0x60>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d00a      	beq.n	800d578 <vTaskDelay+0x30>
	__asm volatile
 800d562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d566:	f383 8811 	msr	BASEPRI, r3
 800d56a:	f3bf 8f6f 	isb	sy
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	60bb      	str	r3, [r7, #8]
}
 800d574:	bf00      	nop
 800d576:	e7fe      	b.n	800d576 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d578:	f000 f884 	bl	800d684 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d57c:	2100      	movs	r1, #0
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 fb1e 	bl	800dbc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d584:	f000 f88c 	bl	800d6a0 <xTaskResumeAll>
 800d588:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d107      	bne.n	800d5a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d590:	4b06      	ldr	r3, [pc, #24]	; (800d5ac <vTaskDelay+0x64>)
 800d592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d596:	601a      	str	r2, [r3, #0]
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d5a0:	bf00      	nop
 800d5a2:	3710      	adds	r7, #16
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	200008f4 	.word	0x200008f4
 800d5ac:	e000ed04 	.word	0xe000ed04

0800d5b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b08a      	sub	sp, #40	; 0x28
 800d5b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d5be:	463a      	mov	r2, r7
 800d5c0:	1d39      	adds	r1, r7, #4
 800d5c2:	f107 0308 	add.w	r3, r7, #8
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7f6 fed8 	bl	800437c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d5cc:	6839      	ldr	r1, [r7, #0]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	68ba      	ldr	r2, [r7, #8]
 800d5d2:	9202      	str	r2, [sp, #8]
 800d5d4:	9301      	str	r3, [sp, #4]
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	2300      	movs	r3, #0
 800d5dc:	460a      	mov	r2, r1
 800d5de:	4921      	ldr	r1, [pc, #132]	; (800d664 <vTaskStartScheduler+0xb4>)
 800d5e0:	4821      	ldr	r0, [pc, #132]	; (800d668 <vTaskStartScheduler+0xb8>)
 800d5e2:	f7ff fe06 	bl	800d1f2 <xTaskCreateStatic>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	4a20      	ldr	r2, [pc, #128]	; (800d66c <vTaskStartScheduler+0xbc>)
 800d5ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d5ec:	4b1f      	ldr	r3, [pc, #124]	; (800d66c <vTaskStartScheduler+0xbc>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d002      	beq.n	800d5fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	617b      	str	r3, [r7, #20]
 800d5f8:	e001      	b.n	800d5fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	2b01      	cmp	r3, #1
 800d602:	d11b      	bne.n	800d63c <vTaskStartScheduler+0x8c>
	__asm volatile
 800d604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d608:	f383 8811 	msr	BASEPRI, r3
 800d60c:	f3bf 8f6f 	isb	sy
 800d610:	f3bf 8f4f 	dsb	sy
 800d614:	613b      	str	r3, [r7, #16]
}
 800d616:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d618:	4b15      	ldr	r3, [pc, #84]	; (800d670 <vTaskStartScheduler+0xc0>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	334c      	adds	r3, #76	; 0x4c
 800d61e:	4a15      	ldr	r2, [pc, #84]	; (800d674 <vTaskStartScheduler+0xc4>)
 800d620:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d622:	4b15      	ldr	r3, [pc, #84]	; (800d678 <vTaskStartScheduler+0xc8>)
 800d624:	f04f 32ff 	mov.w	r2, #4294967295
 800d628:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d62a:	4b14      	ldr	r3, [pc, #80]	; (800d67c <vTaskStartScheduler+0xcc>)
 800d62c:	2201      	movs	r2, #1
 800d62e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d630:	4b13      	ldr	r3, [pc, #76]	; (800d680 <vTaskStartScheduler+0xd0>)
 800d632:	2200      	movs	r2, #0
 800d634:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d636:	f000 fbb3 	bl	800dda0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d63a:	e00e      	b.n	800d65a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d642:	d10a      	bne.n	800d65a <vTaskStartScheduler+0xaa>
	__asm volatile
 800d644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d648:	f383 8811 	msr	BASEPRI, r3
 800d64c:	f3bf 8f6f 	isb	sy
 800d650:	f3bf 8f4f 	dsb	sy
 800d654:	60fb      	str	r3, [r7, #12]
}
 800d656:	bf00      	nop
 800d658:	e7fe      	b.n	800d658 <vTaskStartScheduler+0xa8>
}
 800d65a:	bf00      	nop
 800d65c:	3718      	adds	r7, #24
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	08010380 	.word	0x08010380
 800d668:	0800da0d 	.word	0x0800da0d
 800d66c:	200008f0 	.word	0x200008f0
 800d670:	200007cc 	.word	0x200007cc
 800d674:	2000014c 	.word	0x2000014c
 800d678:	200008ec 	.word	0x200008ec
 800d67c:	200008d8 	.word	0x200008d8
 800d680:	200008d0 	.word	0x200008d0

0800d684 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d684:	b480      	push	{r7}
 800d686:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d688:	4b04      	ldr	r3, [pc, #16]	; (800d69c <vTaskSuspendAll+0x18>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	3301      	adds	r3, #1
 800d68e:	4a03      	ldr	r2, [pc, #12]	; (800d69c <vTaskSuspendAll+0x18>)
 800d690:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d692:	bf00      	nop
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr
 800d69c:	200008f4 	.word	0x200008f4

0800d6a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d6ae:	4b41      	ldr	r3, [pc, #260]	; (800d7b4 <xTaskResumeAll+0x114>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d10a      	bne.n	800d6cc <xTaskResumeAll+0x2c>
	__asm volatile
 800d6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ba:	f383 8811 	msr	BASEPRI, r3
 800d6be:	f3bf 8f6f 	isb	sy
 800d6c2:	f3bf 8f4f 	dsb	sy
 800d6c6:	603b      	str	r3, [r7, #0]
}
 800d6c8:	bf00      	nop
 800d6ca:	e7fe      	b.n	800d6ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d6cc:	f000 fc0a 	bl	800dee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d6d0:	4b38      	ldr	r3, [pc, #224]	; (800d7b4 <xTaskResumeAll+0x114>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	4a37      	ldr	r2, [pc, #220]	; (800d7b4 <xTaskResumeAll+0x114>)
 800d6d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6da:	4b36      	ldr	r3, [pc, #216]	; (800d7b4 <xTaskResumeAll+0x114>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d161      	bne.n	800d7a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d6e2:	4b35      	ldr	r3, [pc, #212]	; (800d7b8 <xTaskResumeAll+0x118>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d05d      	beq.n	800d7a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d6ea:	e02e      	b.n	800d74a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ec:	4b33      	ldr	r3, [pc, #204]	; (800d7bc <xTaskResumeAll+0x11c>)
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	3318      	adds	r3, #24
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff fd50 	bl	800d19e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	3304      	adds	r3, #4
 800d702:	4618      	mov	r0, r3
 800d704:	f7ff fd4b 	bl	800d19e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d70c:	2201      	movs	r2, #1
 800d70e:	409a      	lsls	r2, r3
 800d710:	4b2b      	ldr	r3, [pc, #172]	; (800d7c0 <xTaskResumeAll+0x120>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4313      	orrs	r3, r2
 800d716:	4a2a      	ldr	r2, [pc, #168]	; (800d7c0 <xTaskResumeAll+0x120>)
 800d718:	6013      	str	r3, [r2, #0]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d71e:	4613      	mov	r3, r2
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	4413      	add	r3, r2
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	4a27      	ldr	r2, [pc, #156]	; (800d7c4 <xTaskResumeAll+0x124>)
 800d728:	441a      	add	r2, r3
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	3304      	adds	r3, #4
 800d72e:	4619      	mov	r1, r3
 800d730:	4610      	mov	r0, r2
 800d732:	f7ff fcd7 	bl	800d0e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d73a:	4b23      	ldr	r3, [pc, #140]	; (800d7c8 <xTaskResumeAll+0x128>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d740:	429a      	cmp	r2, r3
 800d742:	d302      	bcc.n	800d74a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d744:	4b21      	ldr	r3, [pc, #132]	; (800d7cc <xTaskResumeAll+0x12c>)
 800d746:	2201      	movs	r2, #1
 800d748:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d74a:	4b1c      	ldr	r3, [pc, #112]	; (800d7bc <xTaskResumeAll+0x11c>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d1cc      	bne.n	800d6ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d001      	beq.n	800d75c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d758:	f000 fa12 	bl	800db80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d75c:	4b1c      	ldr	r3, [pc, #112]	; (800d7d0 <xTaskResumeAll+0x130>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d010      	beq.n	800d78a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d768:	f000 f836 	bl	800d7d8 <xTaskIncrementTick>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d002      	beq.n	800d778 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d772:	4b16      	ldr	r3, [pc, #88]	; (800d7cc <xTaskResumeAll+0x12c>)
 800d774:	2201      	movs	r2, #1
 800d776:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	3b01      	subs	r3, #1
 800d77c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d1f1      	bne.n	800d768 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d784:	4b12      	ldr	r3, [pc, #72]	; (800d7d0 <xTaskResumeAll+0x130>)
 800d786:	2200      	movs	r2, #0
 800d788:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d78a:	4b10      	ldr	r3, [pc, #64]	; (800d7cc <xTaskResumeAll+0x12c>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d009      	beq.n	800d7a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d792:	2301      	movs	r3, #1
 800d794:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d796:	4b0f      	ldr	r3, [pc, #60]	; (800d7d4 <xTaskResumeAll+0x134>)
 800d798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d79c:	601a      	str	r2, [r3, #0]
 800d79e:	f3bf 8f4f 	dsb	sy
 800d7a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d7a6:	f000 fbcd 	bl	800df44 <vPortExitCritical>

	return xAlreadyYielded;
 800d7aa:	68bb      	ldr	r3, [r7, #8]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	200008f4 	.word	0x200008f4
 800d7b8:	200008cc 	.word	0x200008cc
 800d7bc:	2000088c 	.word	0x2000088c
 800d7c0:	200008d4 	.word	0x200008d4
 800d7c4:	200007d0 	.word	0x200007d0
 800d7c8:	200007cc 	.word	0x200007cc
 800d7cc:	200008e0 	.word	0x200008e0
 800d7d0:	200008dc 	.word	0x200008dc
 800d7d4:	e000ed04 	.word	0xe000ed04

0800d7d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b086      	sub	sp, #24
 800d7dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7e2:	4b4e      	ldr	r3, [pc, #312]	; (800d91c <xTaskIncrementTick+0x144>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	f040 808e 	bne.w	800d908 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d7ec:	4b4c      	ldr	r3, [pc, #304]	; (800d920 <xTaskIncrementTick+0x148>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d7f4:	4a4a      	ldr	r2, [pc, #296]	; (800d920 <xTaskIncrementTick+0x148>)
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d120      	bne.n	800d842 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d800:	4b48      	ldr	r3, [pc, #288]	; (800d924 <xTaskIncrementTick+0x14c>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00a      	beq.n	800d820 <xTaskIncrementTick+0x48>
	__asm volatile
 800d80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80e:	f383 8811 	msr	BASEPRI, r3
 800d812:	f3bf 8f6f 	isb	sy
 800d816:	f3bf 8f4f 	dsb	sy
 800d81a:	603b      	str	r3, [r7, #0]
}
 800d81c:	bf00      	nop
 800d81e:	e7fe      	b.n	800d81e <xTaskIncrementTick+0x46>
 800d820:	4b40      	ldr	r3, [pc, #256]	; (800d924 <xTaskIncrementTick+0x14c>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	60fb      	str	r3, [r7, #12]
 800d826:	4b40      	ldr	r3, [pc, #256]	; (800d928 <xTaskIncrementTick+0x150>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4a3e      	ldr	r2, [pc, #248]	; (800d924 <xTaskIncrementTick+0x14c>)
 800d82c:	6013      	str	r3, [r2, #0]
 800d82e:	4a3e      	ldr	r2, [pc, #248]	; (800d928 <xTaskIncrementTick+0x150>)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6013      	str	r3, [r2, #0]
 800d834:	4b3d      	ldr	r3, [pc, #244]	; (800d92c <xTaskIncrementTick+0x154>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	3301      	adds	r3, #1
 800d83a:	4a3c      	ldr	r2, [pc, #240]	; (800d92c <xTaskIncrementTick+0x154>)
 800d83c:	6013      	str	r3, [r2, #0]
 800d83e:	f000 f99f 	bl	800db80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d842:	4b3b      	ldr	r3, [pc, #236]	; (800d930 <xTaskIncrementTick+0x158>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	693a      	ldr	r2, [r7, #16]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d348      	bcc.n	800d8de <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d84c:	4b35      	ldr	r3, [pc, #212]	; (800d924 <xTaskIncrementTick+0x14c>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d104      	bne.n	800d860 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d856:	4b36      	ldr	r3, [pc, #216]	; (800d930 <xTaskIncrementTick+0x158>)
 800d858:	f04f 32ff 	mov.w	r2, #4294967295
 800d85c:	601a      	str	r2, [r3, #0]
					break;
 800d85e:	e03e      	b.n	800d8de <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d860:	4b30      	ldr	r3, [pc, #192]	; (800d924 <xTaskIncrementTick+0x14c>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d870:	693a      	ldr	r2, [r7, #16]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	429a      	cmp	r2, r3
 800d876:	d203      	bcs.n	800d880 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d878:	4a2d      	ldr	r2, [pc, #180]	; (800d930 <xTaskIncrementTick+0x158>)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d87e:	e02e      	b.n	800d8de <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	3304      	adds	r3, #4
 800d884:	4618      	mov	r0, r3
 800d886:	f7ff fc8a 	bl	800d19e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d004      	beq.n	800d89c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	3318      	adds	r3, #24
 800d896:	4618      	mov	r0, r3
 800d898:	f7ff fc81 	bl	800d19e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	409a      	lsls	r2, r3
 800d8a4:	4b23      	ldr	r3, [pc, #140]	; (800d934 <xTaskIncrementTick+0x15c>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	4a22      	ldr	r2, [pc, #136]	; (800d934 <xTaskIncrementTick+0x15c>)
 800d8ac:	6013      	str	r3, [r2, #0]
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	4413      	add	r3, r2
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4a1f      	ldr	r2, [pc, #124]	; (800d938 <xTaskIncrementTick+0x160>)
 800d8bc:	441a      	add	r2, r3
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	3304      	adds	r3, #4
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	4610      	mov	r0, r2
 800d8c6:	f7ff fc0d 	bl	800d0e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ce:	4b1b      	ldr	r3, [pc, #108]	; (800d93c <xTaskIncrementTick+0x164>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d3b9      	bcc.n	800d84c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8dc:	e7b6      	b.n	800d84c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d8de:	4b17      	ldr	r3, [pc, #92]	; (800d93c <xTaskIncrementTick+0x164>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8e4:	4914      	ldr	r1, [pc, #80]	; (800d938 <xTaskIncrementTick+0x160>)
 800d8e6:	4613      	mov	r3, r2
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	4413      	add	r3, r2
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	440b      	add	r3, r1
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d901      	bls.n	800d8fa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d8fa:	4b11      	ldr	r3, [pc, #68]	; (800d940 <xTaskIncrementTick+0x168>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d007      	beq.n	800d912 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d902:	2301      	movs	r3, #1
 800d904:	617b      	str	r3, [r7, #20]
 800d906:	e004      	b.n	800d912 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d908:	4b0e      	ldr	r3, [pc, #56]	; (800d944 <xTaskIncrementTick+0x16c>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	3301      	adds	r3, #1
 800d90e:	4a0d      	ldr	r2, [pc, #52]	; (800d944 <xTaskIncrementTick+0x16c>)
 800d910:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d912:	697b      	ldr	r3, [r7, #20]
}
 800d914:	4618      	mov	r0, r3
 800d916:	3718      	adds	r7, #24
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	200008f4 	.word	0x200008f4
 800d920:	200008d0 	.word	0x200008d0
 800d924:	20000884 	.word	0x20000884
 800d928:	20000888 	.word	0x20000888
 800d92c:	200008e4 	.word	0x200008e4
 800d930:	200008ec 	.word	0x200008ec
 800d934:	200008d4 	.word	0x200008d4
 800d938:	200007d0 	.word	0x200007d0
 800d93c:	200007cc 	.word	0x200007cc
 800d940:	200008e0 	.word	0x200008e0
 800d944:	200008dc 	.word	0x200008dc

0800d948 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d948:	b480      	push	{r7}
 800d94a:	b087      	sub	sp, #28
 800d94c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d94e:	4b29      	ldr	r3, [pc, #164]	; (800d9f4 <vTaskSwitchContext+0xac>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d003      	beq.n	800d95e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d956:	4b28      	ldr	r3, [pc, #160]	; (800d9f8 <vTaskSwitchContext+0xb0>)
 800d958:	2201      	movs	r2, #1
 800d95a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d95c:	e044      	b.n	800d9e8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800d95e:	4b26      	ldr	r3, [pc, #152]	; (800d9f8 <vTaskSwitchContext+0xb0>)
 800d960:	2200      	movs	r2, #0
 800d962:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d964:	4b25      	ldr	r3, [pc, #148]	; (800d9fc <vTaskSwitchContext+0xb4>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	fab3 f383 	clz	r3, r3
 800d970:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d972:	7afb      	ldrb	r3, [r7, #11]
 800d974:	f1c3 031f 	rsb	r3, r3, #31
 800d978:	617b      	str	r3, [r7, #20]
 800d97a:	4921      	ldr	r1, [pc, #132]	; (800da00 <vTaskSwitchContext+0xb8>)
 800d97c:	697a      	ldr	r2, [r7, #20]
 800d97e:	4613      	mov	r3, r2
 800d980:	009b      	lsls	r3, r3, #2
 800d982:	4413      	add	r3, r2
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	440b      	add	r3, r1
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d10a      	bne.n	800d9a4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	607b      	str	r3, [r7, #4]
}
 800d9a0:	bf00      	nop
 800d9a2:	e7fe      	b.n	800d9a2 <vTaskSwitchContext+0x5a>
 800d9a4:	697a      	ldr	r2, [r7, #20]
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	4413      	add	r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4a14      	ldr	r2, [pc, #80]	; (800da00 <vTaskSwitchContext+0xb8>)
 800d9b0:	4413      	add	r3, r2
 800d9b2:	613b      	str	r3, [r7, #16]
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	685a      	ldr	r2, [r3, #4]
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	605a      	str	r2, [r3, #4]
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	685a      	ldr	r2, [r3, #4]
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	3308      	adds	r3, #8
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d104      	bne.n	800d9d4 <vTaskSwitchContext+0x8c>
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	685a      	ldr	r2, [r3, #4]
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	605a      	str	r2, [r3, #4]
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	4a0a      	ldr	r2, [pc, #40]	; (800da04 <vTaskSwitchContext+0xbc>)
 800d9dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d9de:	4b09      	ldr	r3, [pc, #36]	; (800da04 <vTaskSwitchContext+0xbc>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	334c      	adds	r3, #76	; 0x4c
 800d9e4:	4a08      	ldr	r2, [pc, #32]	; (800da08 <vTaskSwitchContext+0xc0>)
 800d9e6:	6013      	str	r3, [r2, #0]
}
 800d9e8:	bf00      	nop
 800d9ea:	371c      	adds	r7, #28
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr
 800d9f4:	200008f4 	.word	0x200008f4
 800d9f8:	200008e0 	.word	0x200008e0
 800d9fc:	200008d4 	.word	0x200008d4
 800da00:	200007d0 	.word	0x200007d0
 800da04:	200007cc 	.word	0x200007cc
 800da08:	2000014c 	.word	0x2000014c

0800da0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800da14:	f000 f852 	bl	800dabc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800da18:	4b06      	ldr	r3, [pc, #24]	; (800da34 <prvIdleTask+0x28>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d9f9      	bls.n	800da14 <prvIdleTask+0x8>
			{
				taskYIELD();
 800da20:	4b05      	ldr	r3, [pc, #20]	; (800da38 <prvIdleTask+0x2c>)
 800da22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da26:	601a      	str	r2, [r3, #0]
 800da28:	f3bf 8f4f 	dsb	sy
 800da2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800da30:	e7f0      	b.n	800da14 <prvIdleTask+0x8>
 800da32:	bf00      	nop
 800da34:	200007d0 	.word	0x200007d0
 800da38:	e000ed04 	.word	0xe000ed04

0800da3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da42:	2300      	movs	r3, #0
 800da44:	607b      	str	r3, [r7, #4]
 800da46:	e00c      	b.n	800da62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	4613      	mov	r3, r2
 800da4c:	009b      	lsls	r3, r3, #2
 800da4e:	4413      	add	r3, r2
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	4a12      	ldr	r2, [pc, #72]	; (800da9c <prvInitialiseTaskLists+0x60>)
 800da54:	4413      	add	r3, r2
 800da56:	4618      	mov	r0, r3
 800da58:	f7ff fb17 	bl	800d08a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	3301      	adds	r3, #1
 800da60:	607b      	str	r3, [r7, #4]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2b06      	cmp	r3, #6
 800da66:	d9ef      	bls.n	800da48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800da68:	480d      	ldr	r0, [pc, #52]	; (800daa0 <prvInitialiseTaskLists+0x64>)
 800da6a:	f7ff fb0e 	bl	800d08a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800da6e:	480d      	ldr	r0, [pc, #52]	; (800daa4 <prvInitialiseTaskLists+0x68>)
 800da70:	f7ff fb0b 	bl	800d08a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800da74:	480c      	ldr	r0, [pc, #48]	; (800daa8 <prvInitialiseTaskLists+0x6c>)
 800da76:	f7ff fb08 	bl	800d08a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800da7a:	480c      	ldr	r0, [pc, #48]	; (800daac <prvInitialiseTaskLists+0x70>)
 800da7c:	f7ff fb05 	bl	800d08a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da80:	480b      	ldr	r0, [pc, #44]	; (800dab0 <prvInitialiseTaskLists+0x74>)
 800da82:	f7ff fb02 	bl	800d08a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800da86:	4b0b      	ldr	r3, [pc, #44]	; (800dab4 <prvInitialiseTaskLists+0x78>)
 800da88:	4a05      	ldr	r2, [pc, #20]	; (800daa0 <prvInitialiseTaskLists+0x64>)
 800da8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da8c:	4b0a      	ldr	r3, [pc, #40]	; (800dab8 <prvInitialiseTaskLists+0x7c>)
 800da8e:	4a05      	ldr	r2, [pc, #20]	; (800daa4 <prvInitialiseTaskLists+0x68>)
 800da90:	601a      	str	r2, [r3, #0]
}
 800da92:	bf00      	nop
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	200007d0 	.word	0x200007d0
 800daa0:	2000085c 	.word	0x2000085c
 800daa4:	20000870 	.word	0x20000870
 800daa8:	2000088c 	.word	0x2000088c
 800daac:	200008a0 	.word	0x200008a0
 800dab0:	200008b8 	.word	0x200008b8
 800dab4:	20000884 	.word	0x20000884
 800dab8:	20000888 	.word	0x20000888

0800dabc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dac2:	e019      	b.n	800daf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dac4:	f000 fa0e 	bl	800dee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dac8:	4b10      	ldr	r3, [pc, #64]	; (800db0c <prvCheckTasksWaitingTermination+0x50>)
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	3304      	adds	r3, #4
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7ff fb62 	bl	800d19e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dada:	4b0d      	ldr	r3, [pc, #52]	; (800db10 <prvCheckTasksWaitingTermination+0x54>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	3b01      	subs	r3, #1
 800dae0:	4a0b      	ldr	r2, [pc, #44]	; (800db10 <prvCheckTasksWaitingTermination+0x54>)
 800dae2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dae4:	4b0b      	ldr	r3, [pc, #44]	; (800db14 <prvCheckTasksWaitingTermination+0x58>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	3b01      	subs	r3, #1
 800daea:	4a0a      	ldr	r2, [pc, #40]	; (800db14 <prvCheckTasksWaitingTermination+0x58>)
 800daec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800daee:	f000 fa29 	bl	800df44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 f810 	bl	800db18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800daf8:	4b06      	ldr	r3, [pc, #24]	; (800db14 <prvCheckTasksWaitingTermination+0x58>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1e1      	bne.n	800dac4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800db00:	bf00      	nop
 800db02:	bf00      	nop
 800db04:	3708      	adds	r7, #8
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	200008a0 	.word	0x200008a0
 800db10:	200008cc 	.word	0x200008cc
 800db14:	200008b4 	.word	0x200008b4

0800db18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	334c      	adds	r3, #76	; 0x4c
 800db24:	4618      	mov	r0, r3
 800db26:	f001 f9df 	bl	800eee8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800db30:	2b00      	cmp	r3, #0
 800db32:	d108      	bne.n	800db46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db38:	4618      	mov	r0, r3
 800db3a:	f000 fb81 	bl	800e240 <vPortFree>
				vPortFree( pxTCB );
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 fb7e 	bl	800e240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800db44:	e018      	b.n	800db78 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d103      	bne.n	800db58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 fb75 	bl	800e240 <vPortFree>
	}
 800db56:	e00f      	b.n	800db78 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800db5e:	2b02      	cmp	r3, #2
 800db60:	d00a      	beq.n	800db78 <prvDeleteTCB+0x60>
	__asm volatile
 800db62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db66:	f383 8811 	msr	BASEPRI, r3
 800db6a:	f3bf 8f6f 	isb	sy
 800db6e:	f3bf 8f4f 	dsb	sy
 800db72:	60fb      	str	r3, [r7, #12]
}
 800db74:	bf00      	nop
 800db76:	e7fe      	b.n	800db76 <prvDeleteTCB+0x5e>
	}
 800db78:	bf00      	nop
 800db7a:	3710      	adds	r7, #16
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db86:	4b0c      	ldr	r3, [pc, #48]	; (800dbb8 <prvResetNextTaskUnblockTime+0x38>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d104      	bne.n	800db9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800db90:	4b0a      	ldr	r3, [pc, #40]	; (800dbbc <prvResetNextTaskUnblockTime+0x3c>)
 800db92:	f04f 32ff 	mov.w	r2, #4294967295
 800db96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800db98:	e008      	b.n	800dbac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db9a:	4b07      	ldr	r3, [pc, #28]	; (800dbb8 <prvResetNextTaskUnblockTime+0x38>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	68db      	ldr	r3, [r3, #12]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	4a04      	ldr	r2, [pc, #16]	; (800dbbc <prvResetNextTaskUnblockTime+0x3c>)
 800dbaa:	6013      	str	r3, [r2, #0]
}
 800dbac:	bf00      	nop
 800dbae:	370c      	adds	r7, #12
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr
 800dbb8:	20000884 	.word	0x20000884
 800dbbc:	200008ec 	.word	0x200008ec

0800dbc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dbca:	4b29      	ldr	r3, [pc, #164]	; (800dc70 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbd0:	4b28      	ldr	r3, [pc, #160]	; (800dc74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	3304      	adds	r3, #4
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7ff fae1 	bl	800d19e <uxListRemove>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d10b      	bne.n	800dbfa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dbe2:	4b24      	ldr	r3, [pc, #144]	; (800dc74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe8:	2201      	movs	r2, #1
 800dbea:	fa02 f303 	lsl.w	r3, r2, r3
 800dbee:	43da      	mvns	r2, r3
 800dbf0:	4b21      	ldr	r3, [pc, #132]	; (800dc78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4013      	ands	r3, r2
 800dbf6:	4a20      	ldr	r2, [pc, #128]	; (800dc78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbf8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc00:	d10a      	bne.n	800dc18 <prvAddCurrentTaskToDelayedList+0x58>
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d007      	beq.n	800dc18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc08:	4b1a      	ldr	r3, [pc, #104]	; (800dc74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	4619      	mov	r1, r3
 800dc10:	481a      	ldr	r0, [pc, #104]	; (800dc7c <prvAddCurrentTaskToDelayedList+0xbc>)
 800dc12:	f7ff fa67 	bl	800d0e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc16:	e026      	b.n	800dc66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc18:	68fa      	ldr	r2, [r7, #12]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc20:	4b14      	ldr	r3, [pc, #80]	; (800dc74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	68ba      	ldr	r2, [r7, #8]
 800dc26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc28:	68ba      	ldr	r2, [r7, #8]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d209      	bcs.n	800dc44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc30:	4b13      	ldr	r3, [pc, #76]	; (800dc80 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	4b0f      	ldr	r3, [pc, #60]	; (800dc74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	3304      	adds	r3, #4
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	4610      	mov	r0, r2
 800dc3e:	f7ff fa75 	bl	800d12c <vListInsert>
}
 800dc42:	e010      	b.n	800dc66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc44:	4b0f      	ldr	r3, [pc, #60]	; (800dc84 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	4b0a      	ldr	r3, [pc, #40]	; (800dc74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	3304      	adds	r3, #4
 800dc4e:	4619      	mov	r1, r3
 800dc50:	4610      	mov	r0, r2
 800dc52:	f7ff fa6b 	bl	800d12c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc56:	4b0c      	ldr	r3, [pc, #48]	; (800dc88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	68ba      	ldr	r2, [r7, #8]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d202      	bcs.n	800dc66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dc60:	4a09      	ldr	r2, [pc, #36]	; (800dc88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	6013      	str	r3, [r2, #0]
}
 800dc66:	bf00      	nop
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	200008d0 	.word	0x200008d0
 800dc74:	200007cc 	.word	0x200007cc
 800dc78:	200008d4 	.word	0x200008d4
 800dc7c:	200008b8 	.word	0x200008b8
 800dc80:	20000888 	.word	0x20000888
 800dc84:	20000884 	.word	0x20000884
 800dc88:	200008ec 	.word	0x200008ec

0800dc8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b085      	sub	sp, #20
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	3b04      	subs	r3, #4
 800dc9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	3b04      	subs	r3, #4
 800dcaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	f023 0201 	bic.w	r2, r3, #1
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	3b04      	subs	r3, #4
 800dcba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dcbc:	4a0c      	ldr	r2, [pc, #48]	; (800dcf0 <pxPortInitialiseStack+0x64>)
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	3b14      	subs	r3, #20
 800dcc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	3b04      	subs	r3, #4
 800dcd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f06f 0202 	mvn.w	r2, #2
 800dcda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	3b20      	subs	r3, #32
 800dce0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dce2:	68fb      	ldr	r3, [r7, #12]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3714      	adds	r7, #20
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr
 800dcf0:	0800dcf5 	.word	0x0800dcf5

0800dcf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b085      	sub	sp, #20
 800dcf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dcfe:	4b12      	ldr	r3, [pc, #72]	; (800dd48 <prvTaskExitError+0x54>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd06:	d00a      	beq.n	800dd1e <prvTaskExitError+0x2a>
	__asm volatile
 800dd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0c:	f383 8811 	msr	BASEPRI, r3
 800dd10:	f3bf 8f6f 	isb	sy
 800dd14:	f3bf 8f4f 	dsb	sy
 800dd18:	60fb      	str	r3, [r7, #12]
}
 800dd1a:	bf00      	nop
 800dd1c:	e7fe      	b.n	800dd1c <prvTaskExitError+0x28>
	__asm volatile
 800dd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd22:	f383 8811 	msr	BASEPRI, r3
 800dd26:	f3bf 8f6f 	isb	sy
 800dd2a:	f3bf 8f4f 	dsb	sy
 800dd2e:	60bb      	str	r3, [r7, #8]
}
 800dd30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd32:	bf00      	nop
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d0fc      	beq.n	800dd34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd3a:	bf00      	nop
 800dd3c:	bf00      	nop
 800dd3e:	3714      	adds	r7, #20
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr
 800dd48:	20000098 	.word	0x20000098
 800dd4c:	00000000 	.word	0x00000000

0800dd50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd50:	4b07      	ldr	r3, [pc, #28]	; (800dd70 <pxCurrentTCBConst2>)
 800dd52:	6819      	ldr	r1, [r3, #0]
 800dd54:	6808      	ldr	r0, [r1, #0]
 800dd56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5a:	f380 8809 	msr	PSP, r0
 800dd5e:	f3bf 8f6f 	isb	sy
 800dd62:	f04f 0000 	mov.w	r0, #0
 800dd66:	f380 8811 	msr	BASEPRI, r0
 800dd6a:	4770      	bx	lr
 800dd6c:	f3af 8000 	nop.w

0800dd70 <pxCurrentTCBConst2>:
 800dd70:	200007cc 	.word	0x200007cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd74:	bf00      	nop
 800dd76:	bf00      	nop

0800dd78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd78:	4808      	ldr	r0, [pc, #32]	; (800dd9c <prvPortStartFirstTask+0x24>)
 800dd7a:	6800      	ldr	r0, [r0, #0]
 800dd7c:	6800      	ldr	r0, [r0, #0]
 800dd7e:	f380 8808 	msr	MSP, r0
 800dd82:	f04f 0000 	mov.w	r0, #0
 800dd86:	f380 8814 	msr	CONTROL, r0
 800dd8a:	b662      	cpsie	i
 800dd8c:	b661      	cpsie	f
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	f3bf 8f6f 	isb	sy
 800dd96:	df00      	svc	0
 800dd98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd9a:	bf00      	nop
 800dd9c:	e000ed08 	.word	0xe000ed08

0800dda0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dda6:	4b46      	ldr	r3, [pc, #280]	; (800dec0 <xPortStartScheduler+0x120>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4a46      	ldr	r2, [pc, #280]	; (800dec4 <xPortStartScheduler+0x124>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d10a      	bne.n	800ddc6 <xPortStartScheduler+0x26>
	__asm volatile
 800ddb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	613b      	str	r3, [r7, #16]
}
 800ddc2:	bf00      	nop
 800ddc4:	e7fe      	b.n	800ddc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ddc6:	4b3e      	ldr	r3, [pc, #248]	; (800dec0 <xPortStartScheduler+0x120>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4a3f      	ldr	r2, [pc, #252]	; (800dec8 <xPortStartScheduler+0x128>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d10a      	bne.n	800dde6 <xPortStartScheduler+0x46>
	__asm volatile
 800ddd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	60fb      	str	r3, [r7, #12]
}
 800dde2:	bf00      	nop
 800dde4:	e7fe      	b.n	800dde4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dde6:	4b39      	ldr	r3, [pc, #228]	; (800decc <xPortStartScheduler+0x12c>)
 800dde8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	22ff      	movs	r2, #255	; 0xff
 800ddf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de00:	78fb      	ldrb	r3, [r7, #3]
 800de02:	b2db      	uxtb	r3, r3
 800de04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	4b31      	ldr	r3, [pc, #196]	; (800ded0 <xPortStartScheduler+0x130>)
 800de0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de0e:	4b31      	ldr	r3, [pc, #196]	; (800ded4 <xPortStartScheduler+0x134>)
 800de10:	2207      	movs	r2, #7
 800de12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de14:	e009      	b.n	800de2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800de16:	4b2f      	ldr	r3, [pc, #188]	; (800ded4 <xPortStartScheduler+0x134>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	3b01      	subs	r3, #1
 800de1c:	4a2d      	ldr	r2, [pc, #180]	; (800ded4 <xPortStartScheduler+0x134>)
 800de1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de20:	78fb      	ldrb	r3, [r7, #3]
 800de22:	b2db      	uxtb	r3, r3
 800de24:	005b      	lsls	r3, r3, #1
 800de26:	b2db      	uxtb	r3, r3
 800de28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de2a:	78fb      	ldrb	r3, [r7, #3]
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de32:	2b80      	cmp	r3, #128	; 0x80
 800de34:	d0ef      	beq.n	800de16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de36:	4b27      	ldr	r3, [pc, #156]	; (800ded4 <xPortStartScheduler+0x134>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f1c3 0307 	rsb	r3, r3, #7
 800de3e:	2b04      	cmp	r3, #4
 800de40:	d00a      	beq.n	800de58 <xPortStartScheduler+0xb8>
	__asm volatile
 800de42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de46:	f383 8811 	msr	BASEPRI, r3
 800de4a:	f3bf 8f6f 	isb	sy
 800de4e:	f3bf 8f4f 	dsb	sy
 800de52:	60bb      	str	r3, [r7, #8]
}
 800de54:	bf00      	nop
 800de56:	e7fe      	b.n	800de56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de58:	4b1e      	ldr	r3, [pc, #120]	; (800ded4 <xPortStartScheduler+0x134>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	021b      	lsls	r3, r3, #8
 800de5e:	4a1d      	ldr	r2, [pc, #116]	; (800ded4 <xPortStartScheduler+0x134>)
 800de60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de62:	4b1c      	ldr	r3, [pc, #112]	; (800ded4 <xPortStartScheduler+0x134>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de6a:	4a1a      	ldr	r2, [pc, #104]	; (800ded4 <xPortStartScheduler+0x134>)
 800de6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	b2da      	uxtb	r2, r3
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de76:	4b18      	ldr	r3, [pc, #96]	; (800ded8 <xPortStartScheduler+0x138>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	4a17      	ldr	r2, [pc, #92]	; (800ded8 <xPortStartScheduler+0x138>)
 800de7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de82:	4b15      	ldr	r3, [pc, #84]	; (800ded8 <xPortStartScheduler+0x138>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	4a14      	ldr	r2, [pc, #80]	; (800ded8 <xPortStartScheduler+0x138>)
 800de88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800de8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de8e:	f000 f8dd 	bl	800e04c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800de92:	4b12      	ldr	r3, [pc, #72]	; (800dedc <xPortStartScheduler+0x13c>)
 800de94:	2200      	movs	r2, #0
 800de96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800de98:	f000 f8fc 	bl	800e094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800de9c:	4b10      	ldr	r3, [pc, #64]	; (800dee0 <xPortStartScheduler+0x140>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a0f      	ldr	r2, [pc, #60]	; (800dee0 <xPortStartScheduler+0x140>)
 800dea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dea6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dea8:	f7ff ff66 	bl	800dd78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800deac:	f7ff fd4c 	bl	800d948 <vTaskSwitchContext>
	prvTaskExitError();
 800deb0:	f7ff ff20 	bl	800dcf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3718      	adds	r7, #24
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	e000ed00 	.word	0xe000ed00
 800dec4:	410fc271 	.word	0x410fc271
 800dec8:	410fc270 	.word	0x410fc270
 800decc:	e000e400 	.word	0xe000e400
 800ded0:	200008f8 	.word	0x200008f8
 800ded4:	200008fc 	.word	0x200008fc
 800ded8:	e000ed20 	.word	0xe000ed20
 800dedc:	20000098 	.word	0x20000098
 800dee0:	e000ef34 	.word	0xe000ef34

0800dee4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
	__asm volatile
 800deea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deee:	f383 8811 	msr	BASEPRI, r3
 800def2:	f3bf 8f6f 	isb	sy
 800def6:	f3bf 8f4f 	dsb	sy
 800defa:	607b      	str	r3, [r7, #4]
}
 800defc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800defe:	4b0f      	ldr	r3, [pc, #60]	; (800df3c <vPortEnterCritical+0x58>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	3301      	adds	r3, #1
 800df04:	4a0d      	ldr	r2, [pc, #52]	; (800df3c <vPortEnterCritical+0x58>)
 800df06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df08:	4b0c      	ldr	r3, [pc, #48]	; (800df3c <vPortEnterCritical+0x58>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d10f      	bne.n	800df30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df10:	4b0b      	ldr	r3, [pc, #44]	; (800df40 <vPortEnterCritical+0x5c>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	b2db      	uxtb	r3, r3
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00a      	beq.n	800df30 <vPortEnterCritical+0x4c>
	__asm volatile
 800df1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	603b      	str	r3, [r7, #0]
}
 800df2c:	bf00      	nop
 800df2e:	e7fe      	b.n	800df2e <vPortEnterCritical+0x4a>
	}
}
 800df30:	bf00      	nop
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr
 800df3c:	20000098 	.word	0x20000098
 800df40:	e000ed04 	.word	0xe000ed04

0800df44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df4a:	4b12      	ldr	r3, [pc, #72]	; (800df94 <vPortExitCritical+0x50>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d10a      	bne.n	800df68 <vPortExitCritical+0x24>
	__asm volatile
 800df52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df56:	f383 8811 	msr	BASEPRI, r3
 800df5a:	f3bf 8f6f 	isb	sy
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	607b      	str	r3, [r7, #4]
}
 800df64:	bf00      	nop
 800df66:	e7fe      	b.n	800df66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800df68:	4b0a      	ldr	r3, [pc, #40]	; (800df94 <vPortExitCritical+0x50>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	3b01      	subs	r3, #1
 800df6e:	4a09      	ldr	r2, [pc, #36]	; (800df94 <vPortExitCritical+0x50>)
 800df70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df72:	4b08      	ldr	r3, [pc, #32]	; (800df94 <vPortExitCritical+0x50>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d105      	bne.n	800df86 <vPortExitCritical+0x42>
 800df7a:	2300      	movs	r3, #0
 800df7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800df84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df86:	bf00      	nop
 800df88:	370c      	adds	r7, #12
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	20000098 	.word	0x20000098
	...

0800dfa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dfa0:	f3ef 8009 	mrs	r0, PSP
 800dfa4:	f3bf 8f6f 	isb	sy
 800dfa8:	4b15      	ldr	r3, [pc, #84]	; (800e000 <pxCurrentTCBConst>)
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	f01e 0f10 	tst.w	lr, #16
 800dfb0:	bf08      	it	eq
 800dfb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dfb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfba:	6010      	str	r0, [r2, #0]
 800dfbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dfc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dfc4:	f380 8811 	msr	BASEPRI, r0
 800dfc8:	f3bf 8f4f 	dsb	sy
 800dfcc:	f3bf 8f6f 	isb	sy
 800dfd0:	f7ff fcba 	bl	800d948 <vTaskSwitchContext>
 800dfd4:	f04f 0000 	mov.w	r0, #0
 800dfd8:	f380 8811 	msr	BASEPRI, r0
 800dfdc:	bc09      	pop	{r0, r3}
 800dfde:	6819      	ldr	r1, [r3, #0]
 800dfe0:	6808      	ldr	r0, [r1, #0]
 800dfe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe6:	f01e 0f10 	tst.w	lr, #16
 800dfea:	bf08      	it	eq
 800dfec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dff0:	f380 8809 	msr	PSP, r0
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	4770      	bx	lr
 800dffa:	bf00      	nop
 800dffc:	f3af 8000 	nop.w

0800e000 <pxCurrentTCBConst>:
 800e000:	200007cc 	.word	0x200007cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e004:	bf00      	nop
 800e006:	bf00      	nop

0800e008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
	__asm volatile
 800e00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e012:	f383 8811 	msr	BASEPRI, r3
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	607b      	str	r3, [r7, #4]
}
 800e020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e022:	f7ff fbd9 	bl	800d7d8 <xTaskIncrementTick>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d003      	beq.n	800e034 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e02c:	4b06      	ldr	r3, [pc, #24]	; (800e048 <SysTick_Handler+0x40>)
 800e02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e032:	601a      	str	r2, [r3, #0]
 800e034:	2300      	movs	r3, #0
 800e036:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	f383 8811 	msr	BASEPRI, r3
}
 800e03e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	e000ed04 	.word	0xe000ed04

0800e04c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e04c:	b480      	push	{r7}
 800e04e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e050:	4b0b      	ldr	r3, [pc, #44]	; (800e080 <vPortSetupTimerInterrupt+0x34>)
 800e052:	2200      	movs	r2, #0
 800e054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e056:	4b0b      	ldr	r3, [pc, #44]	; (800e084 <vPortSetupTimerInterrupt+0x38>)
 800e058:	2200      	movs	r2, #0
 800e05a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e05c:	4b0a      	ldr	r3, [pc, #40]	; (800e088 <vPortSetupTimerInterrupt+0x3c>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a0a      	ldr	r2, [pc, #40]	; (800e08c <vPortSetupTimerInterrupt+0x40>)
 800e062:	fba2 2303 	umull	r2, r3, r2, r3
 800e066:	099b      	lsrs	r3, r3, #6
 800e068:	4a09      	ldr	r2, [pc, #36]	; (800e090 <vPortSetupTimerInterrupt+0x44>)
 800e06a:	3b01      	subs	r3, #1
 800e06c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e06e:	4b04      	ldr	r3, [pc, #16]	; (800e080 <vPortSetupTimerInterrupt+0x34>)
 800e070:	2207      	movs	r2, #7
 800e072:	601a      	str	r2, [r3, #0]
}
 800e074:	bf00      	nop
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	e000e010 	.word	0xe000e010
 800e084:	e000e018 	.word	0xe000e018
 800e088:	20000000 	.word	0x20000000
 800e08c:	10624dd3 	.word	0x10624dd3
 800e090:	e000e014 	.word	0xe000e014

0800e094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e0a4 <vPortEnableVFP+0x10>
 800e098:	6801      	ldr	r1, [r0, #0]
 800e09a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e09e:	6001      	str	r1, [r0, #0]
 800e0a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e0a2:	bf00      	nop
 800e0a4:	e000ed88 	.word	0xe000ed88

0800e0a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b08a      	sub	sp, #40	; 0x28
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e0b4:	f7ff fae6 	bl	800d684 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e0b8:	4b5b      	ldr	r3, [pc, #364]	; (800e228 <pvPortMalloc+0x180>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d101      	bne.n	800e0c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e0c0:	f000 f920 	bl	800e304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e0c4:	4b59      	ldr	r3, [pc, #356]	; (800e22c <pvPortMalloc+0x184>)
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	4013      	ands	r3, r2
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	f040 8093 	bne.w	800e1f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d01d      	beq.n	800e114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e0d8:	2208      	movs	r2, #8
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	4413      	add	r3, r2
 800e0de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f003 0307 	and.w	r3, r3, #7
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d014      	beq.n	800e114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f023 0307 	bic.w	r3, r3, #7
 800e0f0:	3308      	adds	r3, #8
 800e0f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f003 0307 	and.w	r3, r3, #7
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00a      	beq.n	800e114 <pvPortMalloc+0x6c>
	__asm volatile
 800e0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	617b      	str	r3, [r7, #20]
}
 800e110:	bf00      	nop
 800e112:	e7fe      	b.n	800e112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d06e      	beq.n	800e1f8 <pvPortMalloc+0x150>
 800e11a:	4b45      	ldr	r3, [pc, #276]	; (800e230 <pvPortMalloc+0x188>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	429a      	cmp	r2, r3
 800e122:	d869      	bhi.n	800e1f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e124:	4b43      	ldr	r3, [pc, #268]	; (800e234 <pvPortMalloc+0x18c>)
 800e126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e128:	4b42      	ldr	r3, [pc, #264]	; (800e234 <pvPortMalloc+0x18c>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e12e:	e004      	b.n	800e13a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	429a      	cmp	r2, r3
 800e142:	d903      	bls.n	800e14c <pvPortMalloc+0xa4>
 800e144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1f1      	bne.n	800e130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e14c:	4b36      	ldr	r3, [pc, #216]	; (800e228 <pvPortMalloc+0x180>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e152:	429a      	cmp	r2, r3
 800e154:	d050      	beq.n	800e1f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e156:	6a3b      	ldr	r3, [r7, #32]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2208      	movs	r2, #8
 800e15c:	4413      	add	r3, r2
 800e15e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	6a3b      	ldr	r3, [r7, #32]
 800e166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16a:	685a      	ldr	r2, [r3, #4]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	1ad2      	subs	r2, r2, r3
 800e170:	2308      	movs	r3, #8
 800e172:	005b      	lsls	r3, r3, #1
 800e174:	429a      	cmp	r2, r3
 800e176:	d91f      	bls.n	800e1b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4413      	add	r3, r2
 800e17e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e180:	69bb      	ldr	r3, [r7, #24]
 800e182:	f003 0307 	and.w	r3, r3, #7
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00a      	beq.n	800e1a0 <pvPortMalloc+0xf8>
	__asm volatile
 800e18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e18e:	f383 8811 	msr	BASEPRI, r3
 800e192:	f3bf 8f6f 	isb	sy
 800e196:	f3bf 8f4f 	dsb	sy
 800e19a:	613b      	str	r3, [r7, #16]
}
 800e19c:	bf00      	nop
 800e19e:	e7fe      	b.n	800e19e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	685a      	ldr	r2, [r3, #4]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	1ad2      	subs	r2, r2, r3
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e1b2:	69b8      	ldr	r0, [r7, #24]
 800e1b4:	f000 f908 	bl	800e3c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e1b8:	4b1d      	ldr	r3, [pc, #116]	; (800e230 <pvPortMalloc+0x188>)
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	1ad3      	subs	r3, r2, r3
 800e1c2:	4a1b      	ldr	r2, [pc, #108]	; (800e230 <pvPortMalloc+0x188>)
 800e1c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e1c6:	4b1a      	ldr	r3, [pc, #104]	; (800e230 <pvPortMalloc+0x188>)
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	4b1b      	ldr	r3, [pc, #108]	; (800e238 <pvPortMalloc+0x190>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d203      	bcs.n	800e1da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e1d2:	4b17      	ldr	r3, [pc, #92]	; (800e230 <pvPortMalloc+0x188>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4a18      	ldr	r2, [pc, #96]	; (800e238 <pvPortMalloc+0x190>)
 800e1d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1dc:	685a      	ldr	r2, [r3, #4]
 800e1de:	4b13      	ldr	r3, [pc, #76]	; (800e22c <pvPortMalloc+0x184>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	431a      	orrs	r2, r3
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e1ee:	4b13      	ldr	r3, [pc, #76]	; (800e23c <pvPortMalloc+0x194>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	4a11      	ldr	r2, [pc, #68]	; (800e23c <pvPortMalloc+0x194>)
 800e1f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e1f8:	f7ff fa52 	bl	800d6a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	f003 0307 	and.w	r3, r3, #7
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00a      	beq.n	800e21c <pvPortMalloc+0x174>
	__asm volatile
 800e206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20a:	f383 8811 	msr	BASEPRI, r3
 800e20e:	f3bf 8f6f 	isb	sy
 800e212:	f3bf 8f4f 	dsb	sy
 800e216:	60fb      	str	r3, [r7, #12]
}
 800e218:	bf00      	nop
 800e21a:	e7fe      	b.n	800e21a <pvPortMalloc+0x172>
	return pvReturn;
 800e21c:	69fb      	ldr	r3, [r7, #28]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3728      	adds	r7, #40	; 0x28
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	20004508 	.word	0x20004508
 800e22c:	2000451c 	.word	0x2000451c
 800e230:	2000450c 	.word	0x2000450c
 800e234:	20004500 	.word	0x20004500
 800e238:	20004510 	.word	0x20004510
 800e23c:	20004514 	.word	0x20004514

0800e240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b086      	sub	sp, #24
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d04d      	beq.n	800e2ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e252:	2308      	movs	r3, #8
 800e254:	425b      	negs	r3, r3
 800e256:	697a      	ldr	r2, [r7, #20]
 800e258:	4413      	add	r3, r2
 800e25a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	685a      	ldr	r2, [r3, #4]
 800e264:	4b24      	ldr	r3, [pc, #144]	; (800e2f8 <vPortFree+0xb8>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4013      	ands	r3, r2
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10a      	bne.n	800e284 <vPortFree+0x44>
	__asm volatile
 800e26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e272:	f383 8811 	msr	BASEPRI, r3
 800e276:	f3bf 8f6f 	isb	sy
 800e27a:	f3bf 8f4f 	dsb	sy
 800e27e:	60fb      	str	r3, [r7, #12]
}
 800e280:	bf00      	nop
 800e282:	e7fe      	b.n	800e282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d00a      	beq.n	800e2a2 <vPortFree+0x62>
	__asm volatile
 800e28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e290:	f383 8811 	msr	BASEPRI, r3
 800e294:	f3bf 8f6f 	isb	sy
 800e298:	f3bf 8f4f 	dsb	sy
 800e29c:	60bb      	str	r3, [r7, #8]
}
 800e29e:	bf00      	nop
 800e2a0:	e7fe      	b.n	800e2a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	685a      	ldr	r2, [r3, #4]
 800e2a6:	4b14      	ldr	r3, [pc, #80]	; (800e2f8 <vPortFree+0xb8>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4013      	ands	r3, r2
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d01e      	beq.n	800e2ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d11a      	bne.n	800e2ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	685a      	ldr	r2, [r3, #4]
 800e2bc:	4b0e      	ldr	r3, [pc, #56]	; (800e2f8 <vPortFree+0xb8>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	43db      	mvns	r3, r3
 800e2c2:	401a      	ands	r2, r3
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e2c8:	f7ff f9dc 	bl	800d684 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	685a      	ldr	r2, [r3, #4]
 800e2d0:	4b0a      	ldr	r3, [pc, #40]	; (800e2fc <vPortFree+0xbc>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	4a09      	ldr	r2, [pc, #36]	; (800e2fc <vPortFree+0xbc>)
 800e2d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e2da:	6938      	ldr	r0, [r7, #16]
 800e2dc:	f000 f874 	bl	800e3c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e2e0:	4b07      	ldr	r3, [pc, #28]	; (800e300 <vPortFree+0xc0>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	4a06      	ldr	r2, [pc, #24]	; (800e300 <vPortFree+0xc0>)
 800e2e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e2ea:	f7ff f9d9 	bl	800d6a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e2ee:	bf00      	nop
 800e2f0:	3718      	adds	r7, #24
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	2000451c 	.word	0x2000451c
 800e2fc:	2000450c 	.word	0x2000450c
 800e300:	20004518 	.word	0x20004518

0800e304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e304:	b480      	push	{r7}
 800e306:	b085      	sub	sp, #20
 800e308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e30a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e30e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e310:	4b27      	ldr	r3, [pc, #156]	; (800e3b0 <prvHeapInit+0xac>)
 800e312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f003 0307 	and.w	r3, r3, #7
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00c      	beq.n	800e338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	3307      	adds	r3, #7
 800e322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f023 0307 	bic.w	r3, r3, #7
 800e32a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e32c:	68ba      	ldr	r2, [r7, #8]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	1ad3      	subs	r3, r2, r3
 800e332:	4a1f      	ldr	r2, [pc, #124]	; (800e3b0 <prvHeapInit+0xac>)
 800e334:	4413      	add	r3, r2
 800e336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e33c:	4a1d      	ldr	r2, [pc, #116]	; (800e3b4 <prvHeapInit+0xb0>)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e342:	4b1c      	ldr	r3, [pc, #112]	; (800e3b4 <prvHeapInit+0xb0>)
 800e344:	2200      	movs	r2, #0
 800e346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	68ba      	ldr	r2, [r7, #8]
 800e34c:	4413      	add	r3, r2
 800e34e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e350:	2208      	movs	r2, #8
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	1a9b      	subs	r3, r3, r2
 800e356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f023 0307 	bic.w	r3, r3, #7
 800e35e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	4a15      	ldr	r2, [pc, #84]	; (800e3b8 <prvHeapInit+0xb4>)
 800e364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e366:	4b14      	ldr	r3, [pc, #80]	; (800e3b8 <prvHeapInit+0xb4>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2200      	movs	r2, #0
 800e36c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e36e:	4b12      	ldr	r3, [pc, #72]	; (800e3b8 <prvHeapInit+0xb4>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2200      	movs	r2, #0
 800e374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	68fa      	ldr	r2, [r7, #12]
 800e37e:	1ad2      	subs	r2, r2, r3
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e384:	4b0c      	ldr	r3, [pc, #48]	; (800e3b8 <prvHeapInit+0xb4>)
 800e386:	681a      	ldr	r2, [r3, #0]
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	4a0a      	ldr	r2, [pc, #40]	; (800e3bc <prvHeapInit+0xb8>)
 800e392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	4a09      	ldr	r2, [pc, #36]	; (800e3c0 <prvHeapInit+0xbc>)
 800e39a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e39c:	4b09      	ldr	r3, [pc, #36]	; (800e3c4 <prvHeapInit+0xc0>)
 800e39e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e3a2:	601a      	str	r2, [r3, #0]
}
 800e3a4:	bf00      	nop
 800e3a6:	3714      	adds	r7, #20
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	20000900 	.word	0x20000900
 800e3b4:	20004500 	.word	0x20004500
 800e3b8:	20004508 	.word	0x20004508
 800e3bc:	20004510 	.word	0x20004510
 800e3c0:	2000450c 	.word	0x2000450c
 800e3c4:	2000451c 	.word	0x2000451c

0800e3c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e3d0:	4b28      	ldr	r3, [pc, #160]	; (800e474 <prvInsertBlockIntoFreeList+0xac>)
 800e3d2:	60fb      	str	r3, [r7, #12]
 800e3d4:	e002      	b.n	800e3dc <prvInsertBlockIntoFreeList+0x14>
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	60fb      	str	r3, [r7, #12]
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d8f7      	bhi.n	800e3d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	68ba      	ldr	r2, [r7, #8]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d108      	bne.n	800e40a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	685a      	ldr	r2, [r3, #4]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	441a      	add	r2, r3
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	68ba      	ldr	r2, [r7, #8]
 800e414:	441a      	add	r2, r3
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d118      	bne.n	800e450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	4b15      	ldr	r3, [pc, #84]	; (800e478 <prvInsertBlockIntoFreeList+0xb0>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	429a      	cmp	r2, r3
 800e428:	d00d      	beq.n	800e446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	685a      	ldr	r2, [r3, #4]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	441a      	add	r2, r3
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	e008      	b.n	800e458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e446:	4b0c      	ldr	r3, [pc, #48]	; (800e478 <prvInsertBlockIntoFreeList+0xb0>)
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	601a      	str	r2, [r3, #0]
 800e44e:	e003      	b.n	800e458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d002      	beq.n	800e466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e466:	bf00      	nop
 800e468:	3714      	adds	r7, #20
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	20004500 	.word	0x20004500
 800e478:	20004508 	.word	0x20004508

0800e47c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e480:	2200      	movs	r2, #0
 800e482:	4912      	ldr	r1, [pc, #72]	; (800e4cc <MX_USB_DEVICE_Init+0x50>)
 800e484:	4812      	ldr	r0, [pc, #72]	; (800e4d0 <MX_USB_DEVICE_Init+0x54>)
 800e486:	f7fd fa89 	bl	800b99c <USBD_Init>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d001      	beq.n	800e494 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e490:	f7f6 fa0a 	bl	80048a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e494:	490f      	ldr	r1, [pc, #60]	; (800e4d4 <MX_USB_DEVICE_Init+0x58>)
 800e496:	480e      	ldr	r0, [pc, #56]	; (800e4d0 <MX_USB_DEVICE_Init+0x54>)
 800e498:	f7fd fab0 	bl	800b9fc <USBD_RegisterClass>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e4a2:	f7f6 fa01 	bl	80048a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e4a6:	490c      	ldr	r1, [pc, #48]	; (800e4d8 <MX_USB_DEVICE_Init+0x5c>)
 800e4a8:	4809      	ldr	r0, [pc, #36]	; (800e4d0 <MX_USB_DEVICE_Init+0x54>)
 800e4aa:	f7fd f9a7 	bl	800b7fc <USBD_CDC_RegisterInterface>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d001      	beq.n	800e4b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e4b4:	f7f6 f9f8 	bl	80048a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e4b8:	4805      	ldr	r0, [pc, #20]	; (800e4d0 <MX_USB_DEVICE_Init+0x54>)
 800e4ba:	f7fd fad5 	bl	800ba68 <USBD_Start>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d001      	beq.n	800e4c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e4c4:	f7f6 f9f0 	bl	80048a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e4c8:	bf00      	nop
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	200000b0 	.word	0x200000b0
 800e4d0:	20004520 	.word	0x20004520
 800e4d4:	20000018 	.word	0x20000018
 800e4d8:	2000009c 	.word	0x2000009c

0800e4dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	4905      	ldr	r1, [pc, #20]	; (800e4f8 <CDC_Init_FS+0x1c>)
 800e4e4:	4805      	ldr	r0, [pc, #20]	; (800e4fc <CDC_Init_FS+0x20>)
 800e4e6:	f7fd f9a3 	bl	800b830 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e4ea:	4905      	ldr	r1, [pc, #20]	; (800e500 <CDC_Init_FS+0x24>)
 800e4ec:	4803      	ldr	r0, [pc, #12]	; (800e4fc <CDC_Init_FS+0x20>)
 800e4ee:	f7fd f9c1 	bl	800b874 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e4f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	20004ffc 	.word	0x20004ffc
 800e4fc:	20004520 	.word	0x20004520
 800e500:	200047fc 	.word	0x200047fc

0800e504 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e504:	b480      	push	{r7}
 800e506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e508:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr

0800e514 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	4603      	mov	r3, r0
 800e51c:	6039      	str	r1, [r7, #0]
 800e51e:	71fb      	strb	r3, [r7, #7]
 800e520:	4613      	mov	r3, r2
 800e522:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e524:	79fb      	ldrb	r3, [r7, #7]
 800e526:	2b23      	cmp	r3, #35	; 0x23
 800e528:	d84a      	bhi.n	800e5c0 <CDC_Control_FS+0xac>
 800e52a:	a201      	add	r2, pc, #4	; (adr r2, 800e530 <CDC_Control_FS+0x1c>)
 800e52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e530:	0800e5c1 	.word	0x0800e5c1
 800e534:	0800e5c1 	.word	0x0800e5c1
 800e538:	0800e5c1 	.word	0x0800e5c1
 800e53c:	0800e5c1 	.word	0x0800e5c1
 800e540:	0800e5c1 	.word	0x0800e5c1
 800e544:	0800e5c1 	.word	0x0800e5c1
 800e548:	0800e5c1 	.word	0x0800e5c1
 800e54c:	0800e5c1 	.word	0x0800e5c1
 800e550:	0800e5c1 	.word	0x0800e5c1
 800e554:	0800e5c1 	.word	0x0800e5c1
 800e558:	0800e5c1 	.word	0x0800e5c1
 800e55c:	0800e5c1 	.word	0x0800e5c1
 800e560:	0800e5c1 	.word	0x0800e5c1
 800e564:	0800e5c1 	.word	0x0800e5c1
 800e568:	0800e5c1 	.word	0x0800e5c1
 800e56c:	0800e5c1 	.word	0x0800e5c1
 800e570:	0800e5c1 	.word	0x0800e5c1
 800e574:	0800e5c1 	.word	0x0800e5c1
 800e578:	0800e5c1 	.word	0x0800e5c1
 800e57c:	0800e5c1 	.word	0x0800e5c1
 800e580:	0800e5c1 	.word	0x0800e5c1
 800e584:	0800e5c1 	.word	0x0800e5c1
 800e588:	0800e5c1 	.word	0x0800e5c1
 800e58c:	0800e5c1 	.word	0x0800e5c1
 800e590:	0800e5c1 	.word	0x0800e5c1
 800e594:	0800e5c1 	.word	0x0800e5c1
 800e598:	0800e5c1 	.word	0x0800e5c1
 800e59c:	0800e5c1 	.word	0x0800e5c1
 800e5a0:	0800e5c1 	.word	0x0800e5c1
 800e5a4:	0800e5c1 	.word	0x0800e5c1
 800e5a8:	0800e5c1 	.word	0x0800e5c1
 800e5ac:	0800e5c1 	.word	0x0800e5c1
 800e5b0:	0800e5c1 	.word	0x0800e5c1
 800e5b4:	0800e5c1 	.word	0x0800e5c1
 800e5b8:	0800e5c1 	.word	0x0800e5c1
 800e5bc:	0800e5c1 	.word	0x0800e5c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e5c0:	bf00      	nop
  }

  return (USBD_OK);
 800e5c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	370c      	adds	r7, #12
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr

0800e5d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e5da:	6879      	ldr	r1, [r7, #4]
 800e5dc:	4808      	ldr	r0, [pc, #32]	; (800e600 <CDC_Receive_FS+0x30>)
 800e5de:	f7fd f949 	bl	800b874 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e5e2:	4807      	ldr	r0, [pc, #28]	; (800e600 <CDC_Receive_FS+0x30>)
 800e5e4:	f7fd f9a4 	bl	800b930 <USBD_CDC_ReceivePacket>
  Command_State_Machine(Buf, *Len);
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7f3 feb2 	bl	8002358 <Command_State_Machine>
  return (USBD_OK);
 800e5f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	20004520 	.word	0x20004520

0800e604 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	460b      	mov	r3, r1
 800e60e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e610:	2300      	movs	r3, #0
 800e612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e614:	4b0d      	ldr	r3, [pc, #52]	; (800e64c <CDC_Transmit_FS+0x48>)
 800e616:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e61a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e622:	2b00      	cmp	r3, #0
 800e624:	d001      	beq.n	800e62a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e626:	2301      	movs	r3, #1
 800e628:	e00b      	b.n	800e642 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e62a:	887b      	ldrh	r3, [r7, #2]
 800e62c:	461a      	mov	r2, r3
 800e62e:	6879      	ldr	r1, [r7, #4]
 800e630:	4806      	ldr	r0, [pc, #24]	; (800e64c <CDC_Transmit_FS+0x48>)
 800e632:	f7fd f8fd 	bl	800b830 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e636:	4805      	ldr	r0, [pc, #20]	; (800e64c <CDC_Transmit_FS+0x48>)
 800e638:	f7fd f93a 	bl	800b8b0 <USBD_CDC_TransmitPacket>
 800e63c:	4603      	mov	r3, r0
 800e63e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e640:	7bfb      	ldrb	r3, [r7, #15]
}
 800e642:	4618      	mov	r0, r3
 800e644:	3710      	adds	r7, #16
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	20004520 	.word	0x20004520

0800e650 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e650:	b480      	push	{r7}
 800e652:	b087      	sub	sp, #28
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	4613      	mov	r3, r2
 800e65c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e65e:	2300      	movs	r3, #0
 800e660:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e662:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e666:	4618      	mov	r0, r3
 800e668:	371c      	adds	r7, #28
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr
	...

0800e674 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e674:	b480      	push	{r7}
 800e676:	b083      	sub	sp, #12
 800e678:	af00      	add	r7, sp, #0
 800e67a:	4603      	mov	r3, r0
 800e67c:	6039      	str	r1, [r7, #0]
 800e67e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	2212      	movs	r2, #18
 800e684:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e686:	4b03      	ldr	r3, [pc, #12]	; (800e694 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e688:	4618      	mov	r0, r3
 800e68a:	370c      	adds	r7, #12
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr
 800e694:	200000cc 	.word	0x200000cc

0800e698 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e698:	b480      	push	{r7}
 800e69a:	b083      	sub	sp, #12
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	4603      	mov	r3, r0
 800e6a0:	6039      	str	r1, [r7, #0]
 800e6a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	2204      	movs	r2, #4
 800e6a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e6aa:	4b03      	ldr	r3, [pc, #12]	; (800e6b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	370c      	adds	r7, #12
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr
 800e6b8:	200000e0 	.word	0x200000e0

0800e6bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	6039      	str	r1, [r7, #0]
 800e6c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6c8:	79fb      	ldrb	r3, [r7, #7]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d105      	bne.n	800e6da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e6ce:	683a      	ldr	r2, [r7, #0]
 800e6d0:	4907      	ldr	r1, [pc, #28]	; (800e6f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e6d2:	4808      	ldr	r0, [pc, #32]	; (800e6f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e6d4:	f7fe fb7a 	bl	800cdcc <USBD_GetString>
 800e6d8:	e004      	b.n	800e6e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e6da:	683a      	ldr	r2, [r7, #0]
 800e6dc:	4904      	ldr	r1, [pc, #16]	; (800e6f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e6de:	4805      	ldr	r0, [pc, #20]	; (800e6f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e6e0:	f7fe fb74 	bl	800cdcc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6e4:	4b02      	ldr	r3, [pc, #8]	; (800e6f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	200057fc 	.word	0x200057fc
 800e6f4:	08010388 	.word	0x08010388

0800e6f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	4603      	mov	r3, r0
 800e700:	6039      	str	r1, [r7, #0]
 800e702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e704:	683a      	ldr	r2, [r7, #0]
 800e706:	4904      	ldr	r1, [pc, #16]	; (800e718 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e708:	4804      	ldr	r0, [pc, #16]	; (800e71c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e70a:	f7fe fb5f 	bl	800cdcc <USBD_GetString>
  return USBD_StrDesc;
 800e70e:	4b02      	ldr	r3, [pc, #8]	; (800e718 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e710:	4618      	mov	r0, r3
 800e712:	3708      	adds	r7, #8
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}
 800e718:	200057fc 	.word	0x200057fc
 800e71c:	080103a0 	.word	0x080103a0

0800e720 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	4603      	mov	r3, r0
 800e728:	6039      	str	r1, [r7, #0]
 800e72a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	221a      	movs	r2, #26
 800e730:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e732:	f000 f843 	bl	800e7bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e736:	4b02      	ldr	r3, [pc, #8]	; (800e740 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	200000e4 	.word	0x200000e4

0800e744 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	4603      	mov	r3, r0
 800e74c:	6039      	str	r1, [r7, #0]
 800e74e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e750:	79fb      	ldrb	r3, [r7, #7]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d105      	bne.n	800e762 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e756:	683a      	ldr	r2, [r7, #0]
 800e758:	4907      	ldr	r1, [pc, #28]	; (800e778 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e75a:	4808      	ldr	r0, [pc, #32]	; (800e77c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e75c:	f7fe fb36 	bl	800cdcc <USBD_GetString>
 800e760:	e004      	b.n	800e76c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e762:	683a      	ldr	r2, [r7, #0]
 800e764:	4904      	ldr	r1, [pc, #16]	; (800e778 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e766:	4805      	ldr	r0, [pc, #20]	; (800e77c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e768:	f7fe fb30 	bl	800cdcc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e76c:	4b02      	ldr	r3, [pc, #8]	; (800e778 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3708      	adds	r7, #8
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	200057fc 	.word	0x200057fc
 800e77c:	080103b4 	.word	0x080103b4

0800e780 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	4603      	mov	r3, r0
 800e788:	6039      	str	r1, [r7, #0]
 800e78a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e78c:	79fb      	ldrb	r3, [r7, #7]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d105      	bne.n	800e79e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e792:	683a      	ldr	r2, [r7, #0]
 800e794:	4907      	ldr	r1, [pc, #28]	; (800e7b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e796:	4808      	ldr	r0, [pc, #32]	; (800e7b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e798:	f7fe fb18 	bl	800cdcc <USBD_GetString>
 800e79c:	e004      	b.n	800e7a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e79e:	683a      	ldr	r2, [r7, #0]
 800e7a0:	4904      	ldr	r1, [pc, #16]	; (800e7b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7a2:	4805      	ldr	r0, [pc, #20]	; (800e7b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7a4:	f7fe fb12 	bl	800cdcc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7a8:	4b02      	ldr	r3, [pc, #8]	; (800e7b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3708      	adds	r7, #8
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	200057fc 	.word	0x200057fc
 800e7b8:	080103c0 	.word	0x080103c0

0800e7bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b084      	sub	sp, #16
 800e7c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e7c2:	4b0f      	ldr	r3, [pc, #60]	; (800e800 <Get_SerialNum+0x44>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e7c8:	4b0e      	ldr	r3, [pc, #56]	; (800e804 <Get_SerialNum+0x48>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e7ce:	4b0e      	ldr	r3, [pc, #56]	; (800e808 <Get_SerialNum+0x4c>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4413      	add	r3, r2
 800e7da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d009      	beq.n	800e7f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e7e2:	2208      	movs	r2, #8
 800e7e4:	4909      	ldr	r1, [pc, #36]	; (800e80c <Get_SerialNum+0x50>)
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	f000 f814 	bl	800e814 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e7ec:	2204      	movs	r2, #4
 800e7ee:	4908      	ldr	r1, [pc, #32]	; (800e810 <Get_SerialNum+0x54>)
 800e7f0:	68b8      	ldr	r0, [r7, #8]
 800e7f2:	f000 f80f 	bl	800e814 <IntToUnicode>
  }
}
 800e7f6:	bf00      	nop
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	1fff7a10 	.word	0x1fff7a10
 800e804:	1fff7a14 	.word	0x1fff7a14
 800e808:	1fff7a18 	.word	0x1fff7a18
 800e80c:	200000e6 	.word	0x200000e6
 800e810:	200000f6 	.word	0x200000f6

0800e814 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e814:	b480      	push	{r7}
 800e816:	b087      	sub	sp, #28
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	4613      	mov	r3, r2
 800e820:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e822:	2300      	movs	r3, #0
 800e824:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e826:	2300      	movs	r3, #0
 800e828:	75fb      	strb	r3, [r7, #23]
 800e82a:	e027      	b.n	800e87c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	0f1b      	lsrs	r3, r3, #28
 800e830:	2b09      	cmp	r3, #9
 800e832:	d80b      	bhi.n	800e84c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	0f1b      	lsrs	r3, r3, #28
 800e838:	b2da      	uxtb	r2, r3
 800e83a:	7dfb      	ldrb	r3, [r7, #23]
 800e83c:	005b      	lsls	r3, r3, #1
 800e83e:	4619      	mov	r1, r3
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	440b      	add	r3, r1
 800e844:	3230      	adds	r2, #48	; 0x30
 800e846:	b2d2      	uxtb	r2, r2
 800e848:	701a      	strb	r2, [r3, #0]
 800e84a:	e00a      	b.n	800e862 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	0f1b      	lsrs	r3, r3, #28
 800e850:	b2da      	uxtb	r2, r3
 800e852:	7dfb      	ldrb	r3, [r7, #23]
 800e854:	005b      	lsls	r3, r3, #1
 800e856:	4619      	mov	r1, r3
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	440b      	add	r3, r1
 800e85c:	3237      	adds	r2, #55	; 0x37
 800e85e:	b2d2      	uxtb	r2, r2
 800e860:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	011b      	lsls	r3, r3, #4
 800e866:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e868:	7dfb      	ldrb	r3, [r7, #23]
 800e86a:	005b      	lsls	r3, r3, #1
 800e86c:	3301      	adds	r3, #1
 800e86e:	68ba      	ldr	r2, [r7, #8]
 800e870:	4413      	add	r3, r2
 800e872:	2200      	movs	r2, #0
 800e874:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e876:	7dfb      	ldrb	r3, [r7, #23]
 800e878:	3301      	adds	r3, #1
 800e87a:	75fb      	strb	r3, [r7, #23]
 800e87c:	7dfa      	ldrb	r2, [r7, #23]
 800e87e:	79fb      	ldrb	r3, [r7, #7]
 800e880:	429a      	cmp	r2, r3
 800e882:	d3d3      	bcc.n	800e82c <IntToUnicode+0x18>
  }
}
 800e884:	bf00      	nop
 800e886:	bf00      	nop
 800e888:	371c      	adds	r7, #28
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr
	...

0800e894 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b08a      	sub	sp, #40	; 0x28
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e89c:	f107 0314 	add.w	r3, r7, #20
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	601a      	str	r2, [r3, #0]
 800e8a4:	605a      	str	r2, [r3, #4]
 800e8a6:	609a      	str	r2, [r3, #8]
 800e8a8:	60da      	str	r2, [r3, #12]
 800e8aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8b4:	d147      	bne.n	800e946 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	613b      	str	r3, [r7, #16]
 800e8ba:	4b25      	ldr	r3, [pc, #148]	; (800e950 <HAL_PCD_MspInit+0xbc>)
 800e8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8be:	4a24      	ldr	r2, [pc, #144]	; (800e950 <HAL_PCD_MspInit+0xbc>)
 800e8c0:	f043 0301 	orr.w	r3, r3, #1
 800e8c4:	6313      	str	r3, [r2, #48]	; 0x30
 800e8c6:	4b22      	ldr	r3, [pc, #136]	; (800e950 <HAL_PCD_MspInit+0xbc>)
 800e8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ca:	f003 0301 	and.w	r3, r3, #1
 800e8ce:	613b      	str	r3, [r7, #16]
 800e8d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800e8d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800e8e0:	f107 0314 	add.w	r3, r7, #20
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	481b      	ldr	r0, [pc, #108]	; (800e954 <HAL_PCD_MspInit+0xc0>)
 800e8e8:	f7f8 fcd0 	bl	800728c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800e8ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e8f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8f2:	2302      	movs	r3, #2
 800e8f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e8fe:	230a      	movs	r3, #10
 800e900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e902:	f107 0314 	add.w	r3, r7, #20
 800e906:	4619      	mov	r1, r3
 800e908:	4812      	ldr	r0, [pc, #72]	; (800e954 <HAL_PCD_MspInit+0xc0>)
 800e90a:	f7f8 fcbf 	bl	800728c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e90e:	4b10      	ldr	r3, [pc, #64]	; (800e950 <HAL_PCD_MspInit+0xbc>)
 800e910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e912:	4a0f      	ldr	r2, [pc, #60]	; (800e950 <HAL_PCD_MspInit+0xbc>)
 800e914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e918:	6353      	str	r3, [r2, #52]	; 0x34
 800e91a:	2300      	movs	r3, #0
 800e91c:	60fb      	str	r3, [r7, #12]
 800e91e:	4b0c      	ldr	r3, [pc, #48]	; (800e950 <HAL_PCD_MspInit+0xbc>)
 800e920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e922:	4a0b      	ldr	r2, [pc, #44]	; (800e950 <HAL_PCD_MspInit+0xbc>)
 800e924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e928:	6453      	str	r3, [r2, #68]	; 0x44
 800e92a:	4b09      	ldr	r3, [pc, #36]	; (800e950 <HAL_PCD_MspInit+0xbc>)
 800e92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e92e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e936:	2200      	movs	r2, #0
 800e938:	2105      	movs	r1, #5
 800e93a:	2043      	movs	r0, #67	; 0x43
 800e93c:	f7f8 fc7c 	bl	8007238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e940:	2043      	movs	r0, #67	; 0x43
 800e942:	f7f8 fc95 	bl	8007270 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e946:	bf00      	nop
 800e948:	3728      	adds	r7, #40	; 0x28
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	40023800 	.word	0x40023800
 800e954:	40020000 	.word	0x40020000

0800e958 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800e96c:	4619      	mov	r1, r3
 800e96e:	4610      	mov	r0, r2
 800e970:	f7fd f8c7 	bl	800bb02 <USBD_LL_SetupStage>
}
 800e974:	bf00      	nop
 800e976:	3708      	adds	r7, #8
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	460b      	mov	r3, r1
 800e986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800e98e:	78fa      	ldrb	r2, [r7, #3]
 800e990:	6879      	ldr	r1, [r7, #4]
 800e992:	4613      	mov	r3, r2
 800e994:	00db      	lsls	r3, r3, #3
 800e996:	4413      	add	r3, r2
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	440b      	add	r3, r1
 800e99c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	78fb      	ldrb	r3, [r7, #3]
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	f7fd f901 	bl	800bbac <USBD_LL_DataOutStage>
}
 800e9aa:	bf00      	nop
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b082      	sub	sp, #8
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800e9c4:	78fa      	ldrb	r2, [r7, #3]
 800e9c6:	6879      	ldr	r1, [r7, #4]
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	00db      	lsls	r3, r3, #3
 800e9cc:	4413      	add	r3, r2
 800e9ce:	009b      	lsls	r3, r3, #2
 800e9d0:	440b      	add	r3, r1
 800e9d2:	3320      	adds	r3, #32
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	78fb      	ldrb	r3, [r7, #3]
 800e9d8:	4619      	mov	r1, r3
 800e9da:	f7fd f99a 	bl	800bd12 <USBD_LL_DataInStage>
}
 800e9de:	bf00      	nop
 800e9e0:	3708      	adds	r7, #8
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9e6:	b580      	push	{r7, lr}
 800e9e8:	b082      	sub	sp, #8
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7fd fad4 	bl	800bfa2 <USBD_LL_SOF>
}
 800e9fa:	bf00      	nop
 800e9fc:	3708      	adds	r7, #8
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b084      	sub	sp, #16
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	79db      	ldrb	r3, [r3, #7]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d102      	bne.n	800ea1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ea16:	2300      	movs	r3, #0
 800ea18:	73fb      	strb	r3, [r7, #15]
 800ea1a:	e008      	b.n	800ea2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	79db      	ldrb	r3, [r3, #7]
 800ea20:	2b02      	cmp	r3, #2
 800ea22:	d102      	bne.n	800ea2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ea24:	2301      	movs	r3, #1
 800ea26:	73fb      	strb	r3, [r7, #15]
 800ea28:	e001      	b.n	800ea2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ea2a:	f7f5 ff3d 	bl	80048a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ea34:	7bfa      	ldrb	r2, [r7, #15]
 800ea36:	4611      	mov	r1, r2
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7fd fa6e 	bl	800bf1a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7fd fa16 	bl	800be76 <USBD_LL_Reset>
}
 800ea4a:	bf00      	nop
 800ea4c:	3710      	adds	r7, #16
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
	...

0800ea54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7fd fa69 	bl	800bf3a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	6812      	ldr	r2, [r2, #0]
 800ea76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea7a:	f043 0301 	orr.w	r3, r3, #1
 800ea7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	7adb      	ldrb	r3, [r3, #11]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d005      	beq.n	800ea94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea88:	4b04      	ldr	r3, [pc, #16]	; (800ea9c <HAL_PCD_SuspendCallback+0x48>)
 800ea8a:	691b      	ldr	r3, [r3, #16]
 800ea8c:	4a03      	ldr	r2, [pc, #12]	; (800ea9c <HAL_PCD_SuspendCallback+0x48>)
 800ea8e:	f043 0306 	orr.w	r3, r3, #6
 800ea92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ea94:	bf00      	nop
 800ea96:	3708      	adds	r7, #8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	e000ed00 	.word	0xe000ed00

0800eaa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fd fa5f 	bl	800bf72 <USBD_LL_Resume>
}
 800eab4:	bf00      	nop
 800eab6:	3708      	adds	r7, #8
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	460b      	mov	r3, r1
 800eac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eace:	78fa      	ldrb	r2, [r7, #3]
 800ead0:	4611      	mov	r1, r2
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7fd fab7 	bl	800c046 <USBD_LL_IsoOUTIncomplete>
}
 800ead8:	bf00      	nop
 800eada:	3708      	adds	r7, #8
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	460b      	mov	r3, r1
 800eaea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eaf2:	78fa      	ldrb	r2, [r7, #3]
 800eaf4:	4611      	mov	r1, r2
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7fd fa73 	bl	800bfe2 <USBD_LL_IsoINIncomplete>
}
 800eafc:	bf00      	nop
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7fd fac9 	bl	800c0aa <USBD_LL_DevConnected>
}
 800eb18:	bf00      	nop
 800eb1a:	3708      	adds	r7, #8
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7fd fac6 	bl	800c0c0 <USBD_LL_DevDisconnected>
}
 800eb34:	bf00      	nop
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d13c      	bne.n	800ebc6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eb4c:	4a20      	ldr	r2, [pc, #128]	; (800ebd0 <USBD_LL_Init+0x94>)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4a1e      	ldr	r2, [pc, #120]	; (800ebd0 <USBD_LL_Init+0x94>)
 800eb58:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eb5c:	4b1c      	ldr	r3, [pc, #112]	; (800ebd0 <USBD_LL_Init+0x94>)
 800eb5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eb62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800eb64:	4b1a      	ldr	r3, [pc, #104]	; (800ebd0 <USBD_LL_Init+0x94>)
 800eb66:	2204      	movs	r2, #4
 800eb68:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eb6a:	4b19      	ldr	r3, [pc, #100]	; (800ebd0 <USBD_LL_Init+0x94>)
 800eb6c:	2202      	movs	r2, #2
 800eb6e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eb70:	4b17      	ldr	r3, [pc, #92]	; (800ebd0 <USBD_LL_Init+0x94>)
 800eb72:	2200      	movs	r2, #0
 800eb74:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb76:	4b16      	ldr	r3, [pc, #88]	; (800ebd0 <USBD_LL_Init+0x94>)
 800eb78:	2202      	movs	r2, #2
 800eb7a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eb7c:	4b14      	ldr	r3, [pc, #80]	; (800ebd0 <USBD_LL_Init+0x94>)
 800eb7e:	2200      	movs	r2, #0
 800eb80:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eb82:	4b13      	ldr	r3, [pc, #76]	; (800ebd0 <USBD_LL_Init+0x94>)
 800eb84:	2200      	movs	r2, #0
 800eb86:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eb88:	4b11      	ldr	r3, [pc, #68]	; (800ebd0 <USBD_LL_Init+0x94>)
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eb8e:	4b10      	ldr	r3, [pc, #64]	; (800ebd0 <USBD_LL_Init+0x94>)
 800eb90:	2200      	movs	r2, #0
 800eb92:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eb94:	4b0e      	ldr	r3, [pc, #56]	; (800ebd0 <USBD_LL_Init+0x94>)
 800eb96:	2200      	movs	r2, #0
 800eb98:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eb9a:	480d      	ldr	r0, [pc, #52]	; (800ebd0 <USBD_LL_Init+0x94>)
 800eb9c:	f7f8 fd43 	bl	8007626 <HAL_PCD_Init>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d001      	beq.n	800ebaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800eba6:	f7f5 fe7f 	bl	80048a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ebaa:	2180      	movs	r1, #128	; 0x80
 800ebac:	4808      	ldr	r0, [pc, #32]	; (800ebd0 <USBD_LL_Init+0x94>)
 800ebae:	f7f9 ff6e 	bl	8008a8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ebb2:	2240      	movs	r2, #64	; 0x40
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	4806      	ldr	r0, [pc, #24]	; (800ebd0 <USBD_LL_Init+0x94>)
 800ebb8:	f7f9 ff22 	bl	8008a00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ebbc:	2280      	movs	r2, #128	; 0x80
 800ebbe:	2101      	movs	r1, #1
 800ebc0:	4803      	ldr	r0, [pc, #12]	; (800ebd0 <USBD_LL_Init+0x94>)
 800ebc2:	f7f9 ff1d 	bl	8008a00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	200059fc 	.word	0x200059fc

0800ebd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7f8 fe2a 	bl	8007844 <HAL_PCD_Start>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebf4:	7bfb      	ldrb	r3, [r7, #15]
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f000 f942 	bl	800ee80 <USBD_Get_USB_Status>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3710      	adds	r7, #16
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ec0a:	b580      	push	{r7, lr}
 800ec0c:	b084      	sub	sp, #16
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
 800ec12:	4608      	mov	r0, r1
 800ec14:	4611      	mov	r1, r2
 800ec16:	461a      	mov	r2, r3
 800ec18:	4603      	mov	r3, r0
 800ec1a:	70fb      	strb	r3, [r7, #3]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	70bb      	strb	r3, [r7, #2]
 800ec20:	4613      	mov	r3, r2
 800ec22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec24:	2300      	movs	r3, #0
 800ec26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec32:	78bb      	ldrb	r3, [r7, #2]
 800ec34:	883a      	ldrh	r2, [r7, #0]
 800ec36:	78f9      	ldrb	r1, [r7, #3]
 800ec38:	f7f9 fafe 	bl	8008238 <HAL_PCD_EP_Open>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec40:	7bfb      	ldrb	r3, [r7, #15]
 800ec42:	4618      	mov	r0, r3
 800ec44:	f000 f91c 	bl	800ee80 <USBD_Get_USB_Status>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3710      	adds	r7, #16
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}

0800ec56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b084      	sub	sp, #16
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
 800ec5e:	460b      	mov	r3, r1
 800ec60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec62:	2300      	movs	r3, #0
 800ec64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec66:	2300      	movs	r3, #0
 800ec68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec70:	78fa      	ldrb	r2, [r7, #3]
 800ec72:	4611      	mov	r1, r2
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7f9 fb47 	bl	8008308 <HAL_PCD_EP_Close>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec7e:	7bfb      	ldrb	r3, [r7, #15]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f000 f8fd 	bl	800ee80 <USBD_Get_USB_Status>
 800ec86:	4603      	mov	r3, r0
 800ec88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3710      	adds	r7, #16
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eca0:	2300      	movs	r3, #0
 800eca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eca4:	2300      	movs	r3, #0
 800eca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecae:	78fa      	ldrb	r2, [r7, #3]
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7f9 fbff 	bl	80084b6 <HAL_PCD_EP_SetStall>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecbc:	7bfb      	ldrb	r3, [r7, #15]
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f000 f8de 	bl	800ee80 <USBD_Get_USB_Status>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3710      	adds	r7, #16
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b084      	sub	sp, #16
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
 800ecda:	460b      	mov	r3, r1
 800ecdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecde:	2300      	movs	r3, #0
 800ece0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ece2:	2300      	movs	r3, #0
 800ece4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecec:	78fa      	ldrb	r2, [r7, #3]
 800ecee:	4611      	mov	r1, r2
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7f9 fc43 	bl	800857c <HAL_PCD_EP_ClrStall>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecfa:	7bfb      	ldrb	r3, [r7, #15]
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f000 f8bf 	bl	800ee80 <USBD_Get_USB_Status>
 800ed02:	4603      	mov	r3, r0
 800ed04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3710      	adds	r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed10:	b480      	push	{r7}
 800ed12:	b085      	sub	sp, #20
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	460b      	mov	r3, r1
 800ed1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ed24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	da0b      	bge.n	800ed44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ed2c:	78fb      	ldrb	r3, [r7, #3]
 800ed2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed32:	68f9      	ldr	r1, [r7, #12]
 800ed34:	4613      	mov	r3, r2
 800ed36:	00db      	lsls	r3, r3, #3
 800ed38:	4413      	add	r3, r2
 800ed3a:	009b      	lsls	r3, r3, #2
 800ed3c:	440b      	add	r3, r1
 800ed3e:	3316      	adds	r3, #22
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	e00b      	b.n	800ed5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed44:	78fb      	ldrb	r3, [r7, #3]
 800ed46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed4a:	68f9      	ldr	r1, [r7, #12]
 800ed4c:	4613      	mov	r3, r2
 800ed4e:	00db      	lsls	r3, r3, #3
 800ed50:	4413      	add	r3, r2
 800ed52:	009b      	lsls	r3, r3, #2
 800ed54:	440b      	add	r3, r1
 800ed56:	f203 2356 	addw	r3, r3, #598	; 0x256
 800ed5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3714      	adds	r7, #20
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr

0800ed68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	460b      	mov	r3, r1
 800ed72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed74:	2300      	movs	r3, #0
 800ed76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed82:	78fa      	ldrb	r2, [r7, #3]
 800ed84:	4611      	mov	r1, r2
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7f9 fa32 	bl	80081f0 <HAL_PCD_SetAddress>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed90:	7bfb      	ldrb	r3, [r7, #15]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f000 f874 	bl	800ee80 <USBD_Get_USB_Status>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3710      	adds	r7, #16
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b086      	sub	sp, #24
 800edaa:	af00      	add	r7, sp, #0
 800edac:	60f8      	str	r0, [r7, #12]
 800edae:	607a      	str	r2, [r7, #4]
 800edb0:	603b      	str	r3, [r7, #0]
 800edb2:	460b      	mov	r3, r1
 800edb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edb6:	2300      	movs	r3, #0
 800edb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edba:	2300      	movs	r3, #0
 800edbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800edc4:	7af9      	ldrb	r1, [r7, #11]
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	f7f9 fb3a 	bl	8008442 <HAL_PCD_EP_Transmit>
 800edce:	4603      	mov	r3, r0
 800edd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edd2:	7dfb      	ldrb	r3, [r7, #23]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f000 f853 	bl	800ee80 <USBD_Get_USB_Status>
 800edda:	4603      	mov	r3, r0
 800eddc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800edde:	7dbb      	ldrb	r3, [r7, #22]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3718      	adds	r7, #24
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b086      	sub	sp, #24
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	607a      	str	r2, [r7, #4]
 800edf2:	603b      	str	r3, [r7, #0]
 800edf4:	460b      	mov	r3, r1
 800edf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edf8:	2300      	movs	r3, #0
 800edfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edfc:	2300      	movs	r3, #0
 800edfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ee06:	7af9      	ldrb	r1, [r7, #11]
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	f7f9 fac6 	bl	800839c <HAL_PCD_EP_Receive>
 800ee10:	4603      	mov	r3, r0
 800ee12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee14:	7dfb      	ldrb	r3, [r7, #23]
 800ee16:	4618      	mov	r0, r3
 800ee18:	f000 f832 	bl	800ee80 <USBD_Get_USB_Status>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee20:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3718      	adds	r7, #24
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}

0800ee2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b082      	sub	sp, #8
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
 800ee32:	460b      	mov	r3, r1
 800ee34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee3c:	78fa      	ldrb	r2, [r7, #3]
 800ee3e:	4611      	mov	r1, r2
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7f9 fae6 	bl	8008412 <HAL_PCD_EP_GetRxCount>
 800ee46:	4603      	mov	r3, r0
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee58:	4b03      	ldr	r3, [pc, #12]	; (800ee68 <USBD_static_malloc+0x18>)
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	370c      	adds	r7, #12
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee64:	4770      	bx	lr
 800ee66:	bf00      	nop
 800ee68:	20005ee0 	.word	0x20005ee0

0800ee6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]

}
 800ee74:	bf00      	nop
 800ee76:	370c      	adds	r7, #12
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr

0800ee80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b085      	sub	sp, #20
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	4603      	mov	r3, r0
 800ee88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ee8e:	79fb      	ldrb	r3, [r7, #7]
 800ee90:	2b03      	cmp	r3, #3
 800ee92:	d817      	bhi.n	800eec4 <USBD_Get_USB_Status+0x44>
 800ee94:	a201      	add	r2, pc, #4	; (adr r2, 800ee9c <USBD_Get_USB_Status+0x1c>)
 800ee96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee9a:	bf00      	nop
 800ee9c:	0800eead 	.word	0x0800eead
 800eea0:	0800eeb3 	.word	0x0800eeb3
 800eea4:	0800eeb9 	.word	0x0800eeb9
 800eea8:	0800eebf 	.word	0x0800eebf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eeac:	2300      	movs	r3, #0
 800eeae:	73fb      	strb	r3, [r7, #15]
    break;
 800eeb0:	e00b      	b.n	800eeca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eeb2:	2303      	movs	r3, #3
 800eeb4:	73fb      	strb	r3, [r7, #15]
    break;
 800eeb6:	e008      	b.n	800eeca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eeb8:	2301      	movs	r3, #1
 800eeba:	73fb      	strb	r3, [r7, #15]
    break;
 800eebc:	e005      	b.n	800eeca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eebe:	2303      	movs	r3, #3
 800eec0:	73fb      	strb	r3, [r7, #15]
    break;
 800eec2:	e002      	b.n	800eeca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eec4:	2303      	movs	r3, #3
 800eec6:	73fb      	strb	r3, [r7, #15]
    break;
 800eec8:	bf00      	nop
  }
  return usb_status;
 800eeca:	7bfb      	ldrb	r3, [r7, #15]
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3714      	adds	r7, #20
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <memset>:
 800eed8:	4402      	add	r2, r0
 800eeda:	4603      	mov	r3, r0
 800eedc:	4293      	cmp	r3, r2
 800eede:	d100      	bne.n	800eee2 <memset+0xa>
 800eee0:	4770      	bx	lr
 800eee2:	f803 1b01 	strb.w	r1, [r3], #1
 800eee6:	e7f9      	b.n	800eedc <memset+0x4>

0800eee8 <_reclaim_reent>:
 800eee8:	4b29      	ldr	r3, [pc, #164]	; (800ef90 <_reclaim_reent+0xa8>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4283      	cmp	r3, r0
 800eeee:	b570      	push	{r4, r5, r6, lr}
 800eef0:	4604      	mov	r4, r0
 800eef2:	d04b      	beq.n	800ef8c <_reclaim_reent+0xa4>
 800eef4:	69c3      	ldr	r3, [r0, #28]
 800eef6:	b143      	cbz	r3, 800ef0a <_reclaim_reent+0x22>
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d144      	bne.n	800ef88 <_reclaim_reent+0xa0>
 800eefe:	69e3      	ldr	r3, [r4, #28]
 800ef00:	6819      	ldr	r1, [r3, #0]
 800ef02:	b111      	cbz	r1, 800ef0a <_reclaim_reent+0x22>
 800ef04:	4620      	mov	r0, r4
 800ef06:	f000 f871 	bl	800efec <_free_r>
 800ef0a:	6961      	ldr	r1, [r4, #20]
 800ef0c:	b111      	cbz	r1, 800ef14 <_reclaim_reent+0x2c>
 800ef0e:	4620      	mov	r0, r4
 800ef10:	f000 f86c 	bl	800efec <_free_r>
 800ef14:	69e1      	ldr	r1, [r4, #28]
 800ef16:	b111      	cbz	r1, 800ef1e <_reclaim_reent+0x36>
 800ef18:	4620      	mov	r0, r4
 800ef1a:	f000 f867 	bl	800efec <_free_r>
 800ef1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ef20:	b111      	cbz	r1, 800ef28 <_reclaim_reent+0x40>
 800ef22:	4620      	mov	r0, r4
 800ef24:	f000 f862 	bl	800efec <_free_r>
 800ef28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef2a:	b111      	cbz	r1, 800ef32 <_reclaim_reent+0x4a>
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	f000 f85d 	bl	800efec <_free_r>
 800ef32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ef34:	b111      	cbz	r1, 800ef3c <_reclaim_reent+0x54>
 800ef36:	4620      	mov	r0, r4
 800ef38:	f000 f858 	bl	800efec <_free_r>
 800ef3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ef3e:	b111      	cbz	r1, 800ef46 <_reclaim_reent+0x5e>
 800ef40:	4620      	mov	r0, r4
 800ef42:	f000 f853 	bl	800efec <_free_r>
 800ef46:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ef48:	b111      	cbz	r1, 800ef50 <_reclaim_reent+0x68>
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f000 f84e 	bl	800efec <_free_r>
 800ef50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ef52:	b111      	cbz	r1, 800ef5a <_reclaim_reent+0x72>
 800ef54:	4620      	mov	r0, r4
 800ef56:	f000 f849 	bl	800efec <_free_r>
 800ef5a:	6a23      	ldr	r3, [r4, #32]
 800ef5c:	b1b3      	cbz	r3, 800ef8c <_reclaim_reent+0xa4>
 800ef5e:	4620      	mov	r0, r4
 800ef60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef64:	4718      	bx	r3
 800ef66:	5949      	ldr	r1, [r1, r5]
 800ef68:	b941      	cbnz	r1, 800ef7c <_reclaim_reent+0x94>
 800ef6a:	3504      	adds	r5, #4
 800ef6c:	69e3      	ldr	r3, [r4, #28]
 800ef6e:	2d80      	cmp	r5, #128	; 0x80
 800ef70:	68d9      	ldr	r1, [r3, #12]
 800ef72:	d1f8      	bne.n	800ef66 <_reclaim_reent+0x7e>
 800ef74:	4620      	mov	r0, r4
 800ef76:	f000 f839 	bl	800efec <_free_r>
 800ef7a:	e7c0      	b.n	800eefe <_reclaim_reent+0x16>
 800ef7c:	680e      	ldr	r6, [r1, #0]
 800ef7e:	4620      	mov	r0, r4
 800ef80:	f000 f834 	bl	800efec <_free_r>
 800ef84:	4631      	mov	r1, r6
 800ef86:	e7ef      	b.n	800ef68 <_reclaim_reent+0x80>
 800ef88:	2500      	movs	r5, #0
 800ef8a:	e7ef      	b.n	800ef6c <_reclaim_reent+0x84>
 800ef8c:	bd70      	pop	{r4, r5, r6, pc}
 800ef8e:	bf00      	nop
 800ef90:	2000014c 	.word	0x2000014c

0800ef94 <__errno>:
 800ef94:	4b01      	ldr	r3, [pc, #4]	; (800ef9c <__errno+0x8>)
 800ef96:	6818      	ldr	r0, [r3, #0]
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	2000014c 	.word	0x2000014c

0800efa0 <__libc_init_array>:
 800efa0:	b570      	push	{r4, r5, r6, lr}
 800efa2:	4d0d      	ldr	r5, [pc, #52]	; (800efd8 <__libc_init_array+0x38>)
 800efa4:	4c0d      	ldr	r4, [pc, #52]	; (800efdc <__libc_init_array+0x3c>)
 800efa6:	1b64      	subs	r4, r4, r5
 800efa8:	10a4      	asrs	r4, r4, #2
 800efaa:	2600      	movs	r6, #0
 800efac:	42a6      	cmp	r6, r4
 800efae:	d109      	bne.n	800efc4 <__libc_init_array+0x24>
 800efb0:	4d0b      	ldr	r5, [pc, #44]	; (800efe0 <__libc_init_array+0x40>)
 800efb2:	4c0c      	ldr	r4, [pc, #48]	; (800efe4 <__libc_init_array+0x44>)
 800efb4:	f001 f9c4 	bl	8010340 <_init>
 800efb8:	1b64      	subs	r4, r4, r5
 800efba:	10a4      	asrs	r4, r4, #2
 800efbc:	2600      	movs	r6, #0
 800efbe:	42a6      	cmp	r6, r4
 800efc0:	d105      	bne.n	800efce <__libc_init_array+0x2e>
 800efc2:	bd70      	pop	{r4, r5, r6, pc}
 800efc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800efc8:	4798      	blx	r3
 800efca:	3601      	adds	r6, #1
 800efcc:	e7ee      	b.n	800efac <__libc_init_array+0xc>
 800efce:	f855 3b04 	ldr.w	r3, [r5], #4
 800efd2:	4798      	blx	r3
 800efd4:	3601      	adds	r6, #1
 800efd6:	e7f2      	b.n	800efbe <__libc_init_array+0x1e>
 800efd8:	080107fc 	.word	0x080107fc
 800efdc:	080107fc 	.word	0x080107fc
 800efe0:	080107fc 	.word	0x080107fc
 800efe4:	08010800 	.word	0x08010800

0800efe8 <__retarget_lock_acquire_recursive>:
 800efe8:	4770      	bx	lr

0800efea <__retarget_lock_release_recursive>:
 800efea:	4770      	bx	lr

0800efec <_free_r>:
 800efec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efee:	2900      	cmp	r1, #0
 800eff0:	d044      	beq.n	800f07c <_free_r+0x90>
 800eff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eff6:	9001      	str	r0, [sp, #4]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f1a1 0404 	sub.w	r4, r1, #4
 800effe:	bfb8      	it	lt
 800f000:	18e4      	addlt	r4, r4, r3
 800f002:	f000 f83f 	bl	800f084 <__malloc_lock>
 800f006:	4a1e      	ldr	r2, [pc, #120]	; (800f080 <_free_r+0x94>)
 800f008:	9801      	ldr	r0, [sp, #4]
 800f00a:	6813      	ldr	r3, [r2, #0]
 800f00c:	b933      	cbnz	r3, 800f01c <_free_r+0x30>
 800f00e:	6063      	str	r3, [r4, #4]
 800f010:	6014      	str	r4, [r2, #0]
 800f012:	b003      	add	sp, #12
 800f014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f018:	f000 b83a 	b.w	800f090 <__malloc_unlock>
 800f01c:	42a3      	cmp	r3, r4
 800f01e:	d908      	bls.n	800f032 <_free_r+0x46>
 800f020:	6825      	ldr	r5, [r4, #0]
 800f022:	1961      	adds	r1, r4, r5
 800f024:	428b      	cmp	r3, r1
 800f026:	bf01      	itttt	eq
 800f028:	6819      	ldreq	r1, [r3, #0]
 800f02a:	685b      	ldreq	r3, [r3, #4]
 800f02c:	1949      	addeq	r1, r1, r5
 800f02e:	6021      	streq	r1, [r4, #0]
 800f030:	e7ed      	b.n	800f00e <_free_r+0x22>
 800f032:	461a      	mov	r2, r3
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	b10b      	cbz	r3, 800f03c <_free_r+0x50>
 800f038:	42a3      	cmp	r3, r4
 800f03a:	d9fa      	bls.n	800f032 <_free_r+0x46>
 800f03c:	6811      	ldr	r1, [r2, #0]
 800f03e:	1855      	adds	r5, r2, r1
 800f040:	42a5      	cmp	r5, r4
 800f042:	d10b      	bne.n	800f05c <_free_r+0x70>
 800f044:	6824      	ldr	r4, [r4, #0]
 800f046:	4421      	add	r1, r4
 800f048:	1854      	adds	r4, r2, r1
 800f04a:	42a3      	cmp	r3, r4
 800f04c:	6011      	str	r1, [r2, #0]
 800f04e:	d1e0      	bne.n	800f012 <_free_r+0x26>
 800f050:	681c      	ldr	r4, [r3, #0]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	6053      	str	r3, [r2, #4]
 800f056:	440c      	add	r4, r1
 800f058:	6014      	str	r4, [r2, #0]
 800f05a:	e7da      	b.n	800f012 <_free_r+0x26>
 800f05c:	d902      	bls.n	800f064 <_free_r+0x78>
 800f05e:	230c      	movs	r3, #12
 800f060:	6003      	str	r3, [r0, #0]
 800f062:	e7d6      	b.n	800f012 <_free_r+0x26>
 800f064:	6825      	ldr	r5, [r4, #0]
 800f066:	1961      	adds	r1, r4, r5
 800f068:	428b      	cmp	r3, r1
 800f06a:	bf04      	itt	eq
 800f06c:	6819      	ldreq	r1, [r3, #0]
 800f06e:	685b      	ldreq	r3, [r3, #4]
 800f070:	6063      	str	r3, [r4, #4]
 800f072:	bf04      	itt	eq
 800f074:	1949      	addeq	r1, r1, r5
 800f076:	6021      	streq	r1, [r4, #0]
 800f078:	6054      	str	r4, [r2, #4]
 800f07a:	e7ca      	b.n	800f012 <_free_r+0x26>
 800f07c:	b003      	add	sp, #12
 800f07e:	bd30      	pop	{r4, r5, pc}
 800f080:	2000623c 	.word	0x2000623c

0800f084 <__malloc_lock>:
 800f084:	4801      	ldr	r0, [pc, #4]	; (800f08c <__malloc_lock+0x8>)
 800f086:	f7ff bfaf 	b.w	800efe8 <__retarget_lock_acquire_recursive>
 800f08a:	bf00      	nop
 800f08c:	20006238 	.word	0x20006238

0800f090 <__malloc_unlock>:
 800f090:	4801      	ldr	r0, [pc, #4]	; (800f098 <__malloc_unlock+0x8>)
 800f092:	f7ff bfaa 	b.w	800efea <__retarget_lock_release_recursive>
 800f096:	bf00      	nop
 800f098:	20006238 	.word	0x20006238

0800f09c <acosf>:
 800f09c:	b508      	push	{r3, lr}
 800f09e:	ed2d 8b02 	vpush	{d8}
 800f0a2:	eeb0 8a40 	vmov.f32	s16, s0
 800f0a6:	f000 f9b3 	bl	800f410 <__ieee754_acosf>
 800f0aa:	eeb4 8a48 	vcmp.f32	s16, s16
 800f0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0b2:	eef0 8a40 	vmov.f32	s17, s0
 800f0b6:	d615      	bvs.n	800f0e4 <acosf+0x48>
 800f0b8:	eeb0 0a48 	vmov.f32	s0, s16
 800f0bc:	f000 f8aa 	bl	800f214 <fabsf>
 800f0c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f0c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0cc:	dd0a      	ble.n	800f0e4 <acosf+0x48>
 800f0ce:	f7ff ff61 	bl	800ef94 <__errno>
 800f0d2:	ecbd 8b02 	vpop	{d8}
 800f0d6:	2321      	movs	r3, #33	; 0x21
 800f0d8:	6003      	str	r3, [r0, #0]
 800f0da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f0de:	4804      	ldr	r0, [pc, #16]	; (800f0f0 <acosf+0x54>)
 800f0e0:	f000 b8e6 	b.w	800f2b0 <nanf>
 800f0e4:	eeb0 0a68 	vmov.f32	s0, s17
 800f0e8:	ecbd 8b02 	vpop	{d8}
 800f0ec:	bd08      	pop	{r3, pc}
 800f0ee:	bf00      	nop
 800f0f0:	080103e8 	.word	0x080103e8

0800f0f4 <asinf>:
 800f0f4:	b508      	push	{r3, lr}
 800f0f6:	ed2d 8b02 	vpush	{d8}
 800f0fa:	eeb0 8a40 	vmov.f32	s16, s0
 800f0fe:	f000 fa7f 	bl	800f600 <__ieee754_asinf>
 800f102:	eeb4 8a48 	vcmp.f32	s16, s16
 800f106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10a:	eef0 8a40 	vmov.f32	s17, s0
 800f10e:	d615      	bvs.n	800f13c <asinf+0x48>
 800f110:	eeb0 0a48 	vmov.f32	s0, s16
 800f114:	f000 f87e 	bl	800f214 <fabsf>
 800f118:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f11c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f124:	dd0a      	ble.n	800f13c <asinf+0x48>
 800f126:	f7ff ff35 	bl	800ef94 <__errno>
 800f12a:	ecbd 8b02 	vpop	{d8}
 800f12e:	2321      	movs	r3, #33	; 0x21
 800f130:	6003      	str	r3, [r0, #0]
 800f132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f136:	4804      	ldr	r0, [pc, #16]	; (800f148 <asinf+0x54>)
 800f138:	f000 b8ba 	b.w	800f2b0 <nanf>
 800f13c:	eeb0 0a68 	vmov.f32	s0, s17
 800f140:	ecbd 8b02 	vpop	{d8}
 800f144:	bd08      	pop	{r3, pc}
 800f146:	bf00      	nop
 800f148:	080103e8 	.word	0x080103e8

0800f14c <atan2f>:
 800f14c:	f000 bb3e 	b.w	800f7cc <__ieee754_atan2f>

0800f150 <sqrtf>:
 800f150:	b508      	push	{r3, lr}
 800f152:	ed2d 8b02 	vpush	{d8}
 800f156:	eeb0 8a40 	vmov.f32	s16, s0
 800f15a:	f000 f8af 	bl	800f2bc <__ieee754_sqrtf>
 800f15e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f166:	d60c      	bvs.n	800f182 <sqrtf+0x32>
 800f168:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f188 <sqrtf+0x38>
 800f16c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f174:	d505      	bpl.n	800f182 <sqrtf+0x32>
 800f176:	f7ff ff0d 	bl	800ef94 <__errno>
 800f17a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f17e:	2321      	movs	r3, #33	; 0x21
 800f180:	6003      	str	r3, [r0, #0]
 800f182:	ecbd 8b02 	vpop	{d8}
 800f186:	bd08      	pop	{r3, pc}
 800f188:	00000000 	.word	0x00000000

0800f18c <cosf>:
 800f18c:	ee10 3a10 	vmov	r3, s0
 800f190:	b507      	push	{r0, r1, r2, lr}
 800f192:	4a1e      	ldr	r2, [pc, #120]	; (800f20c <cosf+0x80>)
 800f194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f198:	4293      	cmp	r3, r2
 800f19a:	dc06      	bgt.n	800f1aa <cosf+0x1e>
 800f19c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800f210 <cosf+0x84>
 800f1a0:	b003      	add	sp, #12
 800f1a2:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1a6:	f000 b88d 	b.w	800f2c4 <__kernel_cosf>
 800f1aa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f1ae:	db04      	blt.n	800f1ba <cosf+0x2e>
 800f1b0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f1b4:	b003      	add	sp, #12
 800f1b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f1ba:	4668      	mov	r0, sp
 800f1bc:	f000 fba6 	bl	800f90c <__ieee754_rem_pio2f>
 800f1c0:	f000 0003 	and.w	r0, r0, #3
 800f1c4:	2801      	cmp	r0, #1
 800f1c6:	d009      	beq.n	800f1dc <cosf+0x50>
 800f1c8:	2802      	cmp	r0, #2
 800f1ca:	d010      	beq.n	800f1ee <cosf+0x62>
 800f1cc:	b9b0      	cbnz	r0, 800f1fc <cosf+0x70>
 800f1ce:	eddd 0a01 	vldr	s1, [sp, #4]
 800f1d2:	ed9d 0a00 	vldr	s0, [sp]
 800f1d6:	f000 f875 	bl	800f2c4 <__kernel_cosf>
 800f1da:	e7eb      	b.n	800f1b4 <cosf+0x28>
 800f1dc:	eddd 0a01 	vldr	s1, [sp, #4]
 800f1e0:	ed9d 0a00 	vldr	s0, [sp]
 800f1e4:	f000 f8cc 	bl	800f380 <__kernel_sinf>
 800f1e8:	eeb1 0a40 	vneg.f32	s0, s0
 800f1ec:	e7e2      	b.n	800f1b4 <cosf+0x28>
 800f1ee:	eddd 0a01 	vldr	s1, [sp, #4]
 800f1f2:	ed9d 0a00 	vldr	s0, [sp]
 800f1f6:	f000 f865 	bl	800f2c4 <__kernel_cosf>
 800f1fa:	e7f5      	b.n	800f1e8 <cosf+0x5c>
 800f1fc:	eddd 0a01 	vldr	s1, [sp, #4]
 800f200:	ed9d 0a00 	vldr	s0, [sp]
 800f204:	2001      	movs	r0, #1
 800f206:	f000 f8bb 	bl	800f380 <__kernel_sinf>
 800f20a:	e7d3      	b.n	800f1b4 <cosf+0x28>
 800f20c:	3f490fd8 	.word	0x3f490fd8
 800f210:	00000000 	.word	0x00000000

0800f214 <fabsf>:
 800f214:	ee10 3a10 	vmov	r3, s0
 800f218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f21c:	ee00 3a10 	vmov	s0, r3
 800f220:	4770      	bx	lr
	...

0800f224 <sinf>:
 800f224:	ee10 3a10 	vmov	r3, s0
 800f228:	b507      	push	{r0, r1, r2, lr}
 800f22a:	4a1f      	ldr	r2, [pc, #124]	; (800f2a8 <sinf+0x84>)
 800f22c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f230:	4293      	cmp	r3, r2
 800f232:	dc07      	bgt.n	800f244 <sinf+0x20>
 800f234:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800f2ac <sinf+0x88>
 800f238:	2000      	movs	r0, #0
 800f23a:	b003      	add	sp, #12
 800f23c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f240:	f000 b89e 	b.w	800f380 <__kernel_sinf>
 800f244:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f248:	db04      	blt.n	800f254 <sinf+0x30>
 800f24a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f24e:	b003      	add	sp, #12
 800f250:	f85d fb04 	ldr.w	pc, [sp], #4
 800f254:	4668      	mov	r0, sp
 800f256:	f000 fb59 	bl	800f90c <__ieee754_rem_pio2f>
 800f25a:	f000 0003 	and.w	r0, r0, #3
 800f25e:	2801      	cmp	r0, #1
 800f260:	d00a      	beq.n	800f278 <sinf+0x54>
 800f262:	2802      	cmp	r0, #2
 800f264:	d00f      	beq.n	800f286 <sinf+0x62>
 800f266:	b9c0      	cbnz	r0, 800f29a <sinf+0x76>
 800f268:	eddd 0a01 	vldr	s1, [sp, #4]
 800f26c:	ed9d 0a00 	vldr	s0, [sp]
 800f270:	2001      	movs	r0, #1
 800f272:	f000 f885 	bl	800f380 <__kernel_sinf>
 800f276:	e7ea      	b.n	800f24e <sinf+0x2a>
 800f278:	eddd 0a01 	vldr	s1, [sp, #4]
 800f27c:	ed9d 0a00 	vldr	s0, [sp]
 800f280:	f000 f820 	bl	800f2c4 <__kernel_cosf>
 800f284:	e7e3      	b.n	800f24e <sinf+0x2a>
 800f286:	eddd 0a01 	vldr	s1, [sp, #4]
 800f28a:	ed9d 0a00 	vldr	s0, [sp]
 800f28e:	2001      	movs	r0, #1
 800f290:	f000 f876 	bl	800f380 <__kernel_sinf>
 800f294:	eeb1 0a40 	vneg.f32	s0, s0
 800f298:	e7d9      	b.n	800f24e <sinf+0x2a>
 800f29a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f29e:	ed9d 0a00 	vldr	s0, [sp]
 800f2a2:	f000 f80f 	bl	800f2c4 <__kernel_cosf>
 800f2a6:	e7f5      	b.n	800f294 <sinf+0x70>
 800f2a8:	3f490fd8 	.word	0x3f490fd8
 800f2ac:	00000000 	.word	0x00000000

0800f2b0 <nanf>:
 800f2b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f2b8 <nanf+0x8>
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	7fc00000 	.word	0x7fc00000

0800f2bc <__ieee754_sqrtf>:
 800f2bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f2c0:	4770      	bx	lr
	...

0800f2c4 <__kernel_cosf>:
 800f2c4:	ee10 3a10 	vmov	r3, s0
 800f2c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f2cc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f2d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f2d4:	da05      	bge.n	800f2e2 <__kernel_cosf+0x1e>
 800f2d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f2da:	ee17 2a90 	vmov	r2, s15
 800f2de:	2a00      	cmp	r2, #0
 800f2e0:	d03b      	beq.n	800f35a <__kernel_cosf+0x96>
 800f2e2:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f2e6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800f360 <__kernel_cosf+0x9c>
 800f2ea:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800f364 <__kernel_cosf+0xa0>
 800f2ee:	4a1e      	ldr	r2, [pc, #120]	; (800f368 <__kernel_cosf+0xa4>)
 800f2f0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f2f4:	4293      	cmp	r3, r2
 800f2f6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800f36c <__kernel_cosf+0xa8>
 800f2fa:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f2fe:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800f370 <__kernel_cosf+0xac>
 800f302:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f306:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800f374 <__kernel_cosf+0xb0>
 800f30a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f30e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800f378 <__kernel_cosf+0xb4>
 800f312:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f316:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800f31a:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f31e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f322:	eee7 0a06 	vfma.f32	s1, s14, s12
 800f326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f32a:	dc04      	bgt.n	800f336 <__kernel_cosf+0x72>
 800f32c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f330:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800f334:	4770      	bx	lr
 800f336:	4a11      	ldr	r2, [pc, #68]	; (800f37c <__kernel_cosf+0xb8>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	bfda      	itte	le
 800f33c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800f340:	ee07 3a10 	vmovle	s14, r3
 800f344:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800f348:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f34c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800f350:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f354:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f358:	4770      	bx	lr
 800f35a:	eeb0 0a66 	vmov.f32	s0, s13
 800f35e:	4770      	bx	lr
 800f360:	ad47d74e 	.word	0xad47d74e
 800f364:	310f74f6 	.word	0x310f74f6
 800f368:	3e999999 	.word	0x3e999999
 800f36c:	b493f27c 	.word	0xb493f27c
 800f370:	37d00d01 	.word	0x37d00d01
 800f374:	bab60b61 	.word	0xbab60b61
 800f378:	3d2aaaab 	.word	0x3d2aaaab
 800f37c:	3f480000 	.word	0x3f480000

0800f380 <__kernel_sinf>:
 800f380:	ee10 3a10 	vmov	r3, s0
 800f384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f388:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f38c:	da04      	bge.n	800f398 <__kernel_sinf+0x18>
 800f38e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f392:	ee17 3a90 	vmov	r3, s15
 800f396:	b35b      	cbz	r3, 800f3f0 <__kernel_sinf+0x70>
 800f398:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f39c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f3f4 <__kernel_sinf+0x74>
 800f3a0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800f3f8 <__kernel_sinf+0x78>
 800f3a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f3a8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800f3fc <__kernel_sinf+0x7c>
 800f3ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f3b0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800f400 <__kernel_sinf+0x80>
 800f3b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f3b8:	eddf 7a12 	vldr	s15, [pc, #72]	; 800f404 <__kernel_sinf+0x84>
 800f3bc:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f3c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f3c4:	b930      	cbnz	r0, 800f3d4 <__kernel_sinf+0x54>
 800f3c6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800f408 <__kernel_sinf+0x88>
 800f3ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f3ce:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f3d2:	4770      	bx	lr
 800f3d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f3d8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f3dc:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f3e0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f3e4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800f40c <__kernel_sinf+0x8c>
 800f3e8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f3ec:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop
 800f3f4:	2f2ec9d3 	.word	0x2f2ec9d3
 800f3f8:	b2d72f34 	.word	0xb2d72f34
 800f3fc:	3638ef1b 	.word	0x3638ef1b
 800f400:	b9500d01 	.word	0xb9500d01
 800f404:	3c088889 	.word	0x3c088889
 800f408:	be2aaaab 	.word	0xbe2aaaab
 800f40c:	3e2aaaab 	.word	0x3e2aaaab

0800f410 <__ieee754_acosf>:
 800f410:	b508      	push	{r3, lr}
 800f412:	ee10 3a10 	vmov	r3, s0
 800f416:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f41a:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f41e:	ed2d 8b0c 	vpush	{d8-d13}
 800f422:	d10a      	bne.n	800f43a <__ieee754_acosf+0x2a>
 800f424:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800f5bc <__ieee754_acosf+0x1ac>
 800f428:	eddf 7a65 	vldr	s15, [pc, #404]	; 800f5c0 <__ieee754_acosf+0x1b0>
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	bfd8      	it	le
 800f430:	eeb0 0a67 	vmovle.f32	s0, s15
 800f434:	ecbd 8b0c 	vpop	{d8-d13}
 800f438:	bd08      	pop	{r3, pc}
 800f43a:	dd04      	ble.n	800f446 <__ieee754_acosf+0x36>
 800f43c:	ee30 8a40 	vsub.f32	s16, s0, s0
 800f440:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f444:	e7f6      	b.n	800f434 <__ieee754_acosf+0x24>
 800f446:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800f44a:	da3c      	bge.n	800f4c6 <__ieee754_acosf+0xb6>
 800f44c:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800f450:	f340 80b1 	ble.w	800f5b6 <__ieee754_acosf+0x1a6>
 800f454:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f458:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800f5c4 <__ieee754_acosf+0x1b4>
 800f45c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800f5c8 <__ieee754_acosf+0x1b8>
 800f460:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 800f5cc <__ieee754_acosf+0x1bc>
 800f464:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f468:	eddf 6a59 	vldr	s13, [pc, #356]	; 800f5d0 <__ieee754_acosf+0x1c0>
 800f46c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f470:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800f5d4 <__ieee754_acosf+0x1c4>
 800f474:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f478:	eddf 6a57 	vldr	s13, [pc, #348]	; 800f5d8 <__ieee754_acosf+0x1c8>
 800f47c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f480:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800f5dc <__ieee754_acosf+0x1cc>
 800f484:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f488:	eddf 6a55 	vldr	s13, [pc, #340]	; 800f5e0 <__ieee754_acosf+0x1d0>
 800f48c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800f490:	eddf 6a54 	vldr	s13, [pc, #336]	; 800f5e4 <__ieee754_acosf+0x1d4>
 800f494:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f498:	ed9f 6a53 	vldr	s12, [pc, #332]	; 800f5e8 <__ieee754_acosf+0x1d8>
 800f49c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800f4a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f4a4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f4a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f4b0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800f5ec <__ieee754_acosf+0x1dc>
 800f4b4:	eea0 7a67 	vfms.f32	s14, s0, s15
 800f4b8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800f5f0 <__ieee754_acosf+0x1e0>
 800f4bc:	ee30 7a47 	vsub.f32	s14, s0, s14
 800f4c0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f4c4:	e7b6      	b.n	800f434 <__ieee754_acosf+0x24>
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	eddf da3e 	vldr	s27, [pc, #248]	; 800f5c4 <__ieee754_acosf+0x1b4>
 800f4cc:	eddf ca3e 	vldr	s25, [pc, #248]	; 800f5c8 <__ieee754_acosf+0x1b8>
 800f4d0:	ed9f ca3f 	vldr	s24, [pc, #252]	; 800f5d0 <__ieee754_acosf+0x1c0>
 800f4d4:	eddf ba3f 	vldr	s23, [pc, #252]	; 800f5d4 <__ieee754_acosf+0x1c4>
 800f4d8:	ed9f ba3f 	vldr	s22, [pc, #252]	; 800f5d8 <__ieee754_acosf+0x1c8>
 800f4dc:	eddf 8a3f 	vldr	s17, [pc, #252]	; 800f5dc <__ieee754_acosf+0x1cc>
 800f4e0:	ed9f da3f 	vldr	s26, [pc, #252]	; 800f5e0 <__ieee754_acosf+0x1d0>
 800f4e4:	eddf aa39 	vldr	s21, [pc, #228]	; 800f5cc <__ieee754_acosf+0x1bc>
 800f4e8:	ed9f aa3e 	vldr	s20, [pc, #248]	; 800f5e4 <__ieee754_acosf+0x1d4>
 800f4ec:	eddf 9a3e 	vldr	s19, [pc, #248]	; 800f5e8 <__ieee754_acosf+0x1d8>
 800f4f0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800f4f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f4f8:	da28      	bge.n	800f54c <__ieee754_acosf+0x13c>
 800f4fa:	ee30 0a09 	vadd.f32	s0, s0, s18
 800f4fe:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f502:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800f506:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800f50a:	eeac ca80 	vfma.f32	s24, s25, s0
 800f50e:	eeaa aa80 	vfma.f32	s20, s21, s0
 800f512:	eeec ba00 	vfma.f32	s23, s24, s0
 800f516:	eeea 9a00 	vfma.f32	s19, s20, s0
 800f51a:	eeab ba80 	vfma.f32	s22, s23, s0
 800f51e:	eea9 9a80 	vfma.f32	s18, s19, s0
 800f522:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800f526:	ee68 8a80 	vmul.f32	s17, s17, s0
 800f52a:	f7ff fec7 	bl	800f2bc <__ieee754_sqrtf>
 800f52e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800f532:	eddf 7a30 	vldr	s15, [pc, #192]	; 800f5f4 <__ieee754_acosf+0x1e4>
 800f536:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f53a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f53e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f542:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800f5f8 <__ieee754_acosf+0x1e8>
 800f546:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f54a:	e773      	b.n	800f434 <__ieee754_acosf+0x24>
 800f54c:	ee39 8a40 	vsub.f32	s16, s18, s0
 800f550:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f554:	eeb0 0a48 	vmov.f32	s0, s16
 800f558:	f7ff feb0 	bl	800f2bc <__ieee754_sqrtf>
 800f55c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800f560:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800f564:	eeac ca88 	vfma.f32	s24, s25, s16
 800f568:	eeaa aa88 	vfma.f32	s20, s21, s16
 800f56c:	eeec ba08 	vfma.f32	s23, s24, s16
 800f570:	ee10 3a10 	vmov	r3, s0
 800f574:	eeab ba88 	vfma.f32	s22, s23, s16
 800f578:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f57c:	f023 030f 	bic.w	r3, r3, #15
 800f580:	eeea 9a08 	vfma.f32	s19, s20, s16
 800f584:	ee07 3a90 	vmov	s15, r3
 800f588:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800f58c:	eeb0 6a48 	vmov.f32	s12, s16
 800f590:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800f594:	eea9 9a88 	vfma.f32	s18, s19, s16
 800f598:	ee70 6a27 	vadd.f32	s13, s0, s15
 800f59c:	ee68 8a88 	vmul.f32	s17, s17, s16
 800f5a0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800f5a4:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800f5a8:	eea0 7a26 	vfma.f32	s14, s0, s13
 800f5ac:	ee37 0a87 	vadd.f32	s0, s15, s14
 800f5b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f5b4:	e73e      	b.n	800f434 <__ieee754_acosf+0x24>
 800f5b6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800f5fc <__ieee754_acosf+0x1ec>
 800f5ba:	e73b      	b.n	800f434 <__ieee754_acosf+0x24>
 800f5bc:	00000000 	.word	0x00000000
 800f5c0:	40490fdb 	.word	0x40490fdb
 800f5c4:	3811ef08 	.word	0x3811ef08
 800f5c8:	3a4f7f04 	.word	0x3a4f7f04
 800f5cc:	bf303361 	.word	0xbf303361
 800f5d0:	bd241146 	.word	0xbd241146
 800f5d4:	3e4e0aa8 	.word	0x3e4e0aa8
 800f5d8:	bea6b090 	.word	0xbea6b090
 800f5dc:	3e2aaaab 	.word	0x3e2aaaab
 800f5e0:	3d9dc62e 	.word	0x3d9dc62e
 800f5e4:	4001572d 	.word	0x4001572d
 800f5e8:	c019d139 	.word	0xc019d139
 800f5ec:	33a22168 	.word	0x33a22168
 800f5f0:	3fc90fda 	.word	0x3fc90fda
 800f5f4:	b3a22168 	.word	0xb3a22168
 800f5f8:	40490fda 	.word	0x40490fda
 800f5fc:	3fc90fdb 	.word	0x3fc90fdb

0800f600 <__ieee754_asinf>:
 800f600:	b538      	push	{r3, r4, r5, lr}
 800f602:	ee10 5a10 	vmov	r5, s0
 800f606:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f60a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f60e:	ed2d 8b04 	vpush	{d8-d9}
 800f612:	d10c      	bne.n	800f62e <__ieee754_asinf+0x2e>
 800f614:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800f78c <__ieee754_asinf+0x18c>
 800f618:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800f790 <__ieee754_asinf+0x190>
 800f61c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f620:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f624:	eeb0 0a67 	vmov.f32	s0, s15
 800f628:	ecbd 8b04 	vpop	{d8-d9}
 800f62c:	bd38      	pop	{r3, r4, r5, pc}
 800f62e:	dd04      	ble.n	800f63a <__ieee754_asinf+0x3a>
 800f630:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f634:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f638:	e7f6      	b.n	800f628 <__ieee754_asinf+0x28>
 800f63a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f63e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f642:	da0b      	bge.n	800f65c <__ieee754_asinf+0x5c>
 800f644:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f648:	da52      	bge.n	800f6f0 <__ieee754_asinf+0xf0>
 800f64a:	eddf 7a52 	vldr	s15, [pc, #328]	; 800f794 <__ieee754_asinf+0x194>
 800f64e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f652:	eef4 7ae8 	vcmpe.f32	s15, s17
 800f656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f65a:	dce5      	bgt.n	800f628 <__ieee754_asinf+0x28>
 800f65c:	f7ff fdda 	bl	800f214 <fabsf>
 800f660:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800f664:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f668:	ee20 8a27 	vmul.f32	s16, s0, s15
 800f66c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800f798 <__ieee754_asinf+0x198>
 800f670:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800f79c <__ieee754_asinf+0x19c>
 800f674:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800f7a0 <__ieee754_asinf+0x1a0>
 800f678:	eea8 7a27 	vfma.f32	s14, s16, s15
 800f67c:	eddf 7a49 	vldr	s15, [pc, #292]	; 800f7a4 <__ieee754_asinf+0x1a4>
 800f680:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f684:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f7a8 <__ieee754_asinf+0x1a8>
 800f688:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f68c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800f7ac <__ieee754_asinf+0x1ac>
 800f690:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f694:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f7b0 <__ieee754_asinf+0x1b0>
 800f698:	eea7 9a88 	vfma.f32	s18, s15, s16
 800f69c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800f7b4 <__ieee754_asinf+0x1b4>
 800f6a0:	eee8 7a07 	vfma.f32	s15, s16, s14
 800f6a4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800f7b8 <__ieee754_asinf+0x1b8>
 800f6a8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f6ac:	eddf 7a43 	vldr	s15, [pc, #268]	; 800f7bc <__ieee754_asinf+0x1bc>
 800f6b0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f6b4:	eeb0 0a48 	vmov.f32	s0, s16
 800f6b8:	eee7 8a88 	vfma.f32	s17, s15, s16
 800f6bc:	f7ff fdfe 	bl	800f2bc <__ieee754_sqrtf>
 800f6c0:	4b3f      	ldr	r3, [pc, #252]	; (800f7c0 <__ieee754_asinf+0x1c0>)
 800f6c2:	ee29 9a08 	vmul.f32	s18, s18, s16
 800f6c6:	429c      	cmp	r4, r3
 800f6c8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800f6cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f6d0:	dd3d      	ble.n	800f74e <__ieee754_asinf+0x14e>
 800f6d2:	eea0 0a06 	vfma.f32	s0, s0, s12
 800f6d6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800f7c4 <__ieee754_asinf+0x1c4>
 800f6da:	eee0 7a26 	vfma.f32	s15, s0, s13
 800f6de:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800f790 <__ieee754_asinf+0x190>
 800f6e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f6e6:	2d00      	cmp	r5, #0
 800f6e8:	bfd8      	it	le
 800f6ea:	eeb1 0a40 	vnegle.f32	s0, s0
 800f6ee:	e79b      	b.n	800f628 <__ieee754_asinf+0x28>
 800f6f0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f6f4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800f79c <__ieee754_asinf+0x19c>
 800f6f8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800f798 <__ieee754_asinf+0x198>
 800f6fc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800f7b0 <__ieee754_asinf+0x1b0>
 800f700:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f704:	eddf 6a27 	vldr	s13, [pc, #156]	; 800f7a4 <__ieee754_asinf+0x1a4>
 800f708:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f70c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800f7a8 <__ieee754_asinf+0x1a8>
 800f710:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f714:	eddf 6a25 	vldr	s13, [pc, #148]	; 800f7ac <__ieee754_asinf+0x1ac>
 800f718:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f71c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800f7a0 <__ieee754_asinf+0x1a0>
 800f720:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f724:	eddf 6a23 	vldr	s13, [pc, #140]	; 800f7b4 <__ieee754_asinf+0x1b4>
 800f728:	eee7 6a86 	vfma.f32	s13, s15, s12
 800f72c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800f7b8 <__ieee754_asinf+0x1b8>
 800f730:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800f734:	eddf 6a21 	vldr	s13, [pc, #132]	; 800f7bc <__ieee754_asinf+0x1bc>
 800f738:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f73c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f740:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800f744:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800f748:	eea0 0a27 	vfma.f32	s0, s0, s15
 800f74c:	e76c      	b.n	800f628 <__ieee754_asinf+0x28>
 800f74e:	ee10 3a10 	vmov	r3, s0
 800f752:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f756:	f023 030f 	bic.w	r3, r3, #15
 800f75a:	ee07 3a10 	vmov	s14, r3
 800f75e:	eea7 8a47 	vfms.f32	s16, s14, s14
 800f762:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f766:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f76a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800f76e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f78c <__ieee754_asinf+0x18c>
 800f772:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800f776:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800f77a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800f7c8 <__ieee754_asinf+0x1c8>
 800f77e:	eeb0 6a40 	vmov.f32	s12, s0
 800f782:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f786:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f78a:	e7aa      	b.n	800f6e2 <__ieee754_asinf+0xe2>
 800f78c:	b33bbd2e 	.word	0xb33bbd2e
 800f790:	3fc90fdb 	.word	0x3fc90fdb
 800f794:	7149f2ca 	.word	0x7149f2ca
 800f798:	3a4f7f04 	.word	0x3a4f7f04
 800f79c:	3811ef08 	.word	0x3811ef08
 800f7a0:	3e2aaaab 	.word	0x3e2aaaab
 800f7a4:	bd241146 	.word	0xbd241146
 800f7a8:	3e4e0aa8 	.word	0x3e4e0aa8
 800f7ac:	bea6b090 	.word	0xbea6b090
 800f7b0:	3d9dc62e 	.word	0x3d9dc62e
 800f7b4:	bf303361 	.word	0xbf303361
 800f7b8:	4001572d 	.word	0x4001572d
 800f7bc:	c019d139 	.word	0xc019d139
 800f7c0:	3f799999 	.word	0x3f799999
 800f7c4:	333bbd2e 	.word	0x333bbd2e
 800f7c8:	3f490fdb 	.word	0x3f490fdb

0800f7cc <__ieee754_atan2f>:
 800f7cc:	ee10 2a90 	vmov	r2, s1
 800f7d0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f7d4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f7d8:	b510      	push	{r4, lr}
 800f7da:	eef0 7a40 	vmov.f32	s15, s0
 800f7de:	dc06      	bgt.n	800f7ee <__ieee754_atan2f+0x22>
 800f7e0:	ee10 0a10 	vmov	r0, s0
 800f7e4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f7e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f7ec:	dd04      	ble.n	800f7f8 <__ieee754_atan2f+0x2c>
 800f7ee:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f7f2:	eeb0 0a67 	vmov.f32	s0, s15
 800f7f6:	bd10      	pop	{r4, pc}
 800f7f8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f7fc:	d103      	bne.n	800f806 <__ieee754_atan2f+0x3a>
 800f7fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f802:	f000 b9af 	b.w	800fb64 <atanf>
 800f806:	1794      	asrs	r4, r2, #30
 800f808:	f004 0402 	and.w	r4, r4, #2
 800f80c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f810:	b943      	cbnz	r3, 800f824 <__ieee754_atan2f+0x58>
 800f812:	2c02      	cmp	r4, #2
 800f814:	d05e      	beq.n	800f8d4 <__ieee754_atan2f+0x108>
 800f816:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f8e8 <__ieee754_atan2f+0x11c>
 800f81a:	2c03      	cmp	r4, #3
 800f81c:	bf08      	it	eq
 800f81e:	eef0 7a47 	vmoveq.f32	s15, s14
 800f822:	e7e6      	b.n	800f7f2 <__ieee754_atan2f+0x26>
 800f824:	b941      	cbnz	r1, 800f838 <__ieee754_atan2f+0x6c>
 800f826:	eddf 7a31 	vldr	s15, [pc, #196]	; 800f8ec <__ieee754_atan2f+0x120>
 800f82a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f8f0 <__ieee754_atan2f+0x124>
 800f82e:	2800      	cmp	r0, #0
 800f830:	bfb8      	it	lt
 800f832:	eef0 7a47 	vmovlt.f32	s15, s14
 800f836:	e7dc      	b.n	800f7f2 <__ieee754_atan2f+0x26>
 800f838:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f83c:	d110      	bne.n	800f860 <__ieee754_atan2f+0x94>
 800f83e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f842:	f104 34ff 	add.w	r4, r4, #4294967295
 800f846:	d107      	bne.n	800f858 <__ieee754_atan2f+0x8c>
 800f848:	2c02      	cmp	r4, #2
 800f84a:	d846      	bhi.n	800f8da <__ieee754_atan2f+0x10e>
 800f84c:	4b29      	ldr	r3, [pc, #164]	; (800f8f4 <__ieee754_atan2f+0x128>)
 800f84e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f852:	edd3 7a00 	vldr	s15, [r3]
 800f856:	e7cc      	b.n	800f7f2 <__ieee754_atan2f+0x26>
 800f858:	2c02      	cmp	r4, #2
 800f85a:	d841      	bhi.n	800f8e0 <__ieee754_atan2f+0x114>
 800f85c:	4b26      	ldr	r3, [pc, #152]	; (800f8f8 <__ieee754_atan2f+0x12c>)
 800f85e:	e7f6      	b.n	800f84e <__ieee754_atan2f+0x82>
 800f860:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f864:	d0df      	beq.n	800f826 <__ieee754_atan2f+0x5a>
 800f866:	1a5b      	subs	r3, r3, r1
 800f868:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800f86c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f870:	da1a      	bge.n	800f8a8 <__ieee754_atan2f+0xdc>
 800f872:	2a00      	cmp	r2, #0
 800f874:	da01      	bge.n	800f87a <__ieee754_atan2f+0xae>
 800f876:	313c      	adds	r1, #60	; 0x3c
 800f878:	db19      	blt.n	800f8ae <__ieee754_atan2f+0xe2>
 800f87a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f87e:	f7ff fcc9 	bl	800f214 <fabsf>
 800f882:	f000 f96f 	bl	800fb64 <atanf>
 800f886:	eef0 7a40 	vmov.f32	s15, s0
 800f88a:	2c01      	cmp	r4, #1
 800f88c:	d012      	beq.n	800f8b4 <__ieee754_atan2f+0xe8>
 800f88e:	2c02      	cmp	r4, #2
 800f890:	d017      	beq.n	800f8c2 <__ieee754_atan2f+0xf6>
 800f892:	2c00      	cmp	r4, #0
 800f894:	d0ad      	beq.n	800f7f2 <__ieee754_atan2f+0x26>
 800f896:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800f8fc <__ieee754_atan2f+0x130>
 800f89a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f89e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800f900 <__ieee754_atan2f+0x134>
 800f8a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8a6:	e7a4      	b.n	800f7f2 <__ieee754_atan2f+0x26>
 800f8a8:	eddf 7a10 	vldr	s15, [pc, #64]	; 800f8ec <__ieee754_atan2f+0x120>
 800f8ac:	e7ed      	b.n	800f88a <__ieee754_atan2f+0xbe>
 800f8ae:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f904 <__ieee754_atan2f+0x138>
 800f8b2:	e7ea      	b.n	800f88a <__ieee754_atan2f+0xbe>
 800f8b4:	ee17 3a90 	vmov	r3, s15
 800f8b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f8bc:	ee07 3a90 	vmov	s15, r3
 800f8c0:	e797      	b.n	800f7f2 <__ieee754_atan2f+0x26>
 800f8c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800f8fc <__ieee754_atan2f+0x130>
 800f8c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f8ca:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800f900 <__ieee754_atan2f+0x134>
 800f8ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8d2:	e78e      	b.n	800f7f2 <__ieee754_atan2f+0x26>
 800f8d4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800f900 <__ieee754_atan2f+0x134>
 800f8d8:	e78b      	b.n	800f7f2 <__ieee754_atan2f+0x26>
 800f8da:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f908 <__ieee754_atan2f+0x13c>
 800f8de:	e788      	b.n	800f7f2 <__ieee754_atan2f+0x26>
 800f8e0:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f904 <__ieee754_atan2f+0x138>
 800f8e4:	e785      	b.n	800f7f2 <__ieee754_atan2f+0x26>
 800f8e6:	bf00      	nop
 800f8e8:	c0490fdb 	.word	0xc0490fdb
 800f8ec:	3fc90fdb 	.word	0x3fc90fdb
 800f8f0:	bfc90fdb 	.word	0xbfc90fdb
 800f8f4:	080103ec 	.word	0x080103ec
 800f8f8:	080103f8 	.word	0x080103f8
 800f8fc:	33bbbd2e 	.word	0x33bbbd2e
 800f900:	40490fdb 	.word	0x40490fdb
 800f904:	00000000 	.word	0x00000000
 800f908:	3f490fdb 	.word	0x3f490fdb

0800f90c <__ieee754_rem_pio2f>:
 800f90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f90e:	ee10 6a10 	vmov	r6, s0
 800f912:	4b86      	ldr	r3, [pc, #536]	; (800fb2c <__ieee754_rem_pio2f+0x220>)
 800f914:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f918:	429d      	cmp	r5, r3
 800f91a:	b087      	sub	sp, #28
 800f91c:	4604      	mov	r4, r0
 800f91e:	dc05      	bgt.n	800f92c <__ieee754_rem_pio2f+0x20>
 800f920:	2300      	movs	r3, #0
 800f922:	ed80 0a00 	vstr	s0, [r0]
 800f926:	6043      	str	r3, [r0, #4]
 800f928:	2000      	movs	r0, #0
 800f92a:	e020      	b.n	800f96e <__ieee754_rem_pio2f+0x62>
 800f92c:	4b80      	ldr	r3, [pc, #512]	; (800fb30 <__ieee754_rem_pio2f+0x224>)
 800f92e:	429d      	cmp	r5, r3
 800f930:	dc38      	bgt.n	800f9a4 <__ieee754_rem_pio2f+0x98>
 800f932:	2e00      	cmp	r6, #0
 800f934:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800fb34 <__ieee754_rem_pio2f+0x228>
 800f938:	4b7f      	ldr	r3, [pc, #508]	; (800fb38 <__ieee754_rem_pio2f+0x22c>)
 800f93a:	f025 050f 	bic.w	r5, r5, #15
 800f93e:	dd18      	ble.n	800f972 <__ieee754_rem_pio2f+0x66>
 800f940:	429d      	cmp	r5, r3
 800f942:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f946:	bf09      	itett	eq
 800f948:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800fb3c <__ieee754_rem_pio2f+0x230>
 800f94c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800fb40 <__ieee754_rem_pio2f+0x234>
 800f950:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f954:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800fb44 <__ieee754_rem_pio2f+0x238>
 800f958:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f95c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f960:	edc0 6a00 	vstr	s13, [r0]
 800f964:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f968:	edc0 7a01 	vstr	s15, [r0, #4]
 800f96c:	2001      	movs	r0, #1
 800f96e:	b007      	add	sp, #28
 800f970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f972:	429d      	cmp	r5, r3
 800f974:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f978:	bf09      	itett	eq
 800f97a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800fb3c <__ieee754_rem_pio2f+0x230>
 800f97e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800fb40 <__ieee754_rem_pio2f+0x234>
 800f982:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f986:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800fb44 <__ieee754_rem_pio2f+0x238>
 800f98a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f98e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f992:	edc0 6a00 	vstr	s13, [r0]
 800f996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f99a:	edc0 7a01 	vstr	s15, [r0, #4]
 800f99e:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a2:	e7e4      	b.n	800f96e <__ieee754_rem_pio2f+0x62>
 800f9a4:	4b68      	ldr	r3, [pc, #416]	; (800fb48 <__ieee754_rem_pio2f+0x23c>)
 800f9a6:	429d      	cmp	r5, r3
 800f9a8:	dc71      	bgt.n	800fa8e <__ieee754_rem_pio2f+0x182>
 800f9aa:	f7ff fc33 	bl	800f214 <fabsf>
 800f9ae:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800fb4c <__ieee754_rem_pio2f+0x240>
 800f9b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f9b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f9ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f9c2:	ee17 0a90 	vmov	r0, s15
 800f9c6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800fb34 <__ieee754_rem_pio2f+0x228>
 800f9ca:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f9ce:	281f      	cmp	r0, #31
 800f9d0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800fb40 <__ieee754_rem_pio2f+0x234>
 800f9d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9d8:	eeb1 6a47 	vneg.f32	s12, s14
 800f9dc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f9e0:	ee16 2a90 	vmov	r2, s13
 800f9e4:	dc1c      	bgt.n	800fa20 <__ieee754_rem_pio2f+0x114>
 800f9e6:	495a      	ldr	r1, [pc, #360]	; (800fb50 <__ieee754_rem_pio2f+0x244>)
 800f9e8:	1e47      	subs	r7, r0, #1
 800f9ea:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800f9ee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800f9f2:	428b      	cmp	r3, r1
 800f9f4:	d014      	beq.n	800fa20 <__ieee754_rem_pio2f+0x114>
 800f9f6:	6022      	str	r2, [r4, #0]
 800f9f8:	ed94 7a00 	vldr	s14, [r4]
 800f9fc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fa00:	2e00      	cmp	r6, #0
 800fa02:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fa06:	ed84 0a01 	vstr	s0, [r4, #4]
 800fa0a:	dab0      	bge.n	800f96e <__ieee754_rem_pio2f+0x62>
 800fa0c:	eeb1 7a47 	vneg.f32	s14, s14
 800fa10:	eeb1 0a40 	vneg.f32	s0, s0
 800fa14:	ed84 7a00 	vstr	s14, [r4]
 800fa18:	ed84 0a01 	vstr	s0, [r4, #4]
 800fa1c:	4240      	negs	r0, r0
 800fa1e:	e7a6      	b.n	800f96e <__ieee754_rem_pio2f+0x62>
 800fa20:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800fa24:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800fa28:	2908      	cmp	r1, #8
 800fa2a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800fa2e:	dde2      	ble.n	800f9f6 <__ieee754_rem_pio2f+0xea>
 800fa30:	eddf 5a42 	vldr	s11, [pc, #264]	; 800fb3c <__ieee754_rem_pio2f+0x230>
 800fa34:	eef0 6a40 	vmov.f32	s13, s0
 800fa38:	eee6 6a25 	vfma.f32	s13, s12, s11
 800fa3c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800fa40:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fa44:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800fb44 <__ieee754_rem_pio2f+0x238>
 800fa48:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800fa4c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800fa50:	ee15 2a90 	vmov	r2, s11
 800fa54:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800fa58:	1a5b      	subs	r3, r3, r1
 800fa5a:	2b19      	cmp	r3, #25
 800fa5c:	dc04      	bgt.n	800fa68 <__ieee754_rem_pio2f+0x15c>
 800fa5e:	edc4 5a00 	vstr	s11, [r4]
 800fa62:	eeb0 0a66 	vmov.f32	s0, s13
 800fa66:	e7c7      	b.n	800f9f8 <__ieee754_rem_pio2f+0xec>
 800fa68:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800fb54 <__ieee754_rem_pio2f+0x248>
 800fa6c:	eeb0 0a66 	vmov.f32	s0, s13
 800fa70:	eea6 0a25 	vfma.f32	s0, s12, s11
 800fa74:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800fa78:	eddf 6a37 	vldr	s13, [pc, #220]	; 800fb58 <__ieee754_rem_pio2f+0x24c>
 800fa7c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fa80:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800fa84:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fa88:	ed84 7a00 	vstr	s14, [r4]
 800fa8c:	e7b4      	b.n	800f9f8 <__ieee754_rem_pio2f+0xec>
 800fa8e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800fa92:	db06      	blt.n	800faa2 <__ieee754_rem_pio2f+0x196>
 800fa94:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fa98:	edc0 7a01 	vstr	s15, [r0, #4]
 800fa9c:	edc0 7a00 	vstr	s15, [r0]
 800faa0:	e742      	b.n	800f928 <__ieee754_rem_pio2f+0x1c>
 800faa2:	15ea      	asrs	r2, r5, #23
 800faa4:	3a86      	subs	r2, #134	; 0x86
 800faa6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800faaa:	ee07 3a90 	vmov	s15, r3
 800faae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fab2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800fb5c <__ieee754_rem_pio2f+0x250>
 800fab6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800faba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fabe:	ed8d 7a03 	vstr	s14, [sp, #12]
 800fac2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fac6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800faca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800face:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fad2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800fad6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fada:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fae2:	edcd 7a05 	vstr	s15, [sp, #20]
 800fae6:	d11e      	bne.n	800fb26 <__ieee754_rem_pio2f+0x21a>
 800fae8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800faec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf0:	bf14      	ite	ne
 800faf2:	2302      	movne	r3, #2
 800faf4:	2301      	moveq	r3, #1
 800faf6:	491a      	ldr	r1, [pc, #104]	; (800fb60 <__ieee754_rem_pio2f+0x254>)
 800faf8:	9101      	str	r1, [sp, #4]
 800fafa:	2102      	movs	r1, #2
 800fafc:	9100      	str	r1, [sp, #0]
 800fafe:	a803      	add	r0, sp, #12
 800fb00:	4621      	mov	r1, r4
 800fb02:	f000 f903 	bl	800fd0c <__kernel_rem_pio2f>
 800fb06:	2e00      	cmp	r6, #0
 800fb08:	f6bf af31 	bge.w	800f96e <__ieee754_rem_pio2f+0x62>
 800fb0c:	edd4 7a00 	vldr	s15, [r4]
 800fb10:	eef1 7a67 	vneg.f32	s15, s15
 800fb14:	edc4 7a00 	vstr	s15, [r4]
 800fb18:	edd4 7a01 	vldr	s15, [r4, #4]
 800fb1c:	eef1 7a67 	vneg.f32	s15, s15
 800fb20:	edc4 7a01 	vstr	s15, [r4, #4]
 800fb24:	e77a      	b.n	800fa1c <__ieee754_rem_pio2f+0x110>
 800fb26:	2303      	movs	r3, #3
 800fb28:	e7e5      	b.n	800faf6 <__ieee754_rem_pio2f+0x1ea>
 800fb2a:	bf00      	nop
 800fb2c:	3f490fd8 	.word	0x3f490fd8
 800fb30:	4016cbe3 	.word	0x4016cbe3
 800fb34:	3fc90f80 	.word	0x3fc90f80
 800fb38:	3fc90fd0 	.word	0x3fc90fd0
 800fb3c:	37354400 	.word	0x37354400
 800fb40:	37354443 	.word	0x37354443
 800fb44:	2e85a308 	.word	0x2e85a308
 800fb48:	43490f80 	.word	0x43490f80
 800fb4c:	3f22f984 	.word	0x3f22f984
 800fb50:	08010404 	.word	0x08010404
 800fb54:	2e85a300 	.word	0x2e85a300
 800fb58:	248d3132 	.word	0x248d3132
 800fb5c:	43800000 	.word	0x43800000
 800fb60:	08010484 	.word	0x08010484

0800fb64 <atanf>:
 800fb64:	b538      	push	{r3, r4, r5, lr}
 800fb66:	ee10 5a10 	vmov	r5, s0
 800fb6a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800fb6e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800fb72:	eef0 7a40 	vmov.f32	s15, s0
 800fb76:	db10      	blt.n	800fb9a <atanf+0x36>
 800fb78:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fb7c:	dd04      	ble.n	800fb88 <atanf+0x24>
 800fb7e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fb82:	eeb0 0a67 	vmov.f32	s0, s15
 800fb86:	bd38      	pop	{r3, r4, r5, pc}
 800fb88:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800fcc0 <atanf+0x15c>
 800fb8c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800fcc4 <atanf+0x160>
 800fb90:	2d00      	cmp	r5, #0
 800fb92:	bfd8      	it	le
 800fb94:	eef0 7a47 	vmovle.f32	s15, s14
 800fb98:	e7f3      	b.n	800fb82 <atanf+0x1e>
 800fb9a:	4b4b      	ldr	r3, [pc, #300]	; (800fcc8 <atanf+0x164>)
 800fb9c:	429c      	cmp	r4, r3
 800fb9e:	dc10      	bgt.n	800fbc2 <atanf+0x5e>
 800fba0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800fba4:	da0a      	bge.n	800fbbc <atanf+0x58>
 800fba6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800fccc <atanf+0x168>
 800fbaa:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fbae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fbb2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbba:	dce2      	bgt.n	800fb82 <atanf+0x1e>
 800fbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800fbc0:	e013      	b.n	800fbea <atanf+0x86>
 800fbc2:	f7ff fb27 	bl	800f214 <fabsf>
 800fbc6:	4b42      	ldr	r3, [pc, #264]	; (800fcd0 <atanf+0x16c>)
 800fbc8:	429c      	cmp	r4, r3
 800fbca:	dc4f      	bgt.n	800fc6c <atanf+0x108>
 800fbcc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800fbd0:	429c      	cmp	r4, r3
 800fbd2:	dc41      	bgt.n	800fc58 <atanf+0xf4>
 800fbd4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800fbd8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fbdc:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fbe6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fbea:	1c5a      	adds	r2, r3, #1
 800fbec:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800fbf0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800fcd4 <atanf+0x170>
 800fbf4:	eddf 5a38 	vldr	s11, [pc, #224]	; 800fcd8 <atanf+0x174>
 800fbf8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800fcdc <atanf+0x178>
 800fbfc:	ee66 6a06 	vmul.f32	s13, s12, s12
 800fc00:	eee6 5a87 	vfma.f32	s11, s13, s14
 800fc04:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800fce0 <atanf+0x17c>
 800fc08:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fc0c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800fce4 <atanf+0x180>
 800fc10:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fc14:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800fce8 <atanf+0x184>
 800fc18:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fc1c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800fcec <atanf+0x188>
 800fc20:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fc24:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800fcf0 <atanf+0x18c>
 800fc28:	eea6 5a87 	vfma.f32	s10, s13, s14
 800fc2c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800fcf4 <atanf+0x190>
 800fc30:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fc34:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800fcf8 <atanf+0x194>
 800fc38:	eea7 5a26 	vfma.f32	s10, s14, s13
 800fc3c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800fcfc <atanf+0x198>
 800fc40:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fc44:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fc48:	eea5 7a86 	vfma.f32	s14, s11, s12
 800fc4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fc50:	d121      	bne.n	800fc96 <atanf+0x132>
 800fc52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc56:	e794      	b.n	800fb82 <atanf+0x1e>
 800fc58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fc5c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fc60:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fc64:	2301      	movs	r3, #1
 800fc66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fc6a:	e7be      	b.n	800fbea <atanf+0x86>
 800fc6c:	4b24      	ldr	r3, [pc, #144]	; (800fd00 <atanf+0x19c>)
 800fc6e:	429c      	cmp	r4, r3
 800fc70:	dc0b      	bgt.n	800fc8a <atanf+0x126>
 800fc72:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800fc76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc7a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fc7e:	2302      	movs	r3, #2
 800fc80:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fc84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc88:	e7af      	b.n	800fbea <atanf+0x86>
 800fc8a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fc8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fc92:	2303      	movs	r3, #3
 800fc94:	e7a9      	b.n	800fbea <atanf+0x86>
 800fc96:	4a1b      	ldr	r2, [pc, #108]	; (800fd04 <atanf+0x1a0>)
 800fc98:	491b      	ldr	r1, [pc, #108]	; (800fd08 <atanf+0x1a4>)
 800fc9a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fc9e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fca2:	edd3 6a00 	vldr	s13, [r3]
 800fca6:	ee37 7a66 	vsub.f32	s14, s14, s13
 800fcaa:	2d00      	cmp	r5, #0
 800fcac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fcb0:	edd2 7a00 	vldr	s15, [r2]
 800fcb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fcb8:	bfb8      	it	lt
 800fcba:	eef1 7a67 	vneglt.f32	s15, s15
 800fcbe:	e760      	b.n	800fb82 <atanf+0x1e>
 800fcc0:	3fc90fdb 	.word	0x3fc90fdb
 800fcc4:	bfc90fdb 	.word	0xbfc90fdb
 800fcc8:	3edfffff 	.word	0x3edfffff
 800fccc:	7149f2ca 	.word	0x7149f2ca
 800fcd0:	3f97ffff 	.word	0x3f97ffff
 800fcd4:	3c8569d7 	.word	0x3c8569d7
 800fcd8:	3d4bda59 	.word	0x3d4bda59
 800fcdc:	bd6ef16b 	.word	0xbd6ef16b
 800fce0:	3d886b35 	.word	0x3d886b35
 800fce4:	3dba2e6e 	.word	0x3dba2e6e
 800fce8:	3e124925 	.word	0x3e124925
 800fcec:	3eaaaaab 	.word	0x3eaaaaab
 800fcf0:	bd15a221 	.word	0xbd15a221
 800fcf4:	bd9d8795 	.word	0xbd9d8795
 800fcf8:	bde38e38 	.word	0xbde38e38
 800fcfc:	be4ccccd 	.word	0xbe4ccccd
 800fd00:	401bffff 	.word	0x401bffff
 800fd04:	0801079c 	.word	0x0801079c
 800fd08:	080107ac 	.word	0x080107ac

0800fd0c <__kernel_rem_pio2f>:
 800fd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd10:	ed2d 8b04 	vpush	{d8-d9}
 800fd14:	b0d9      	sub	sp, #356	; 0x164
 800fd16:	4688      	mov	r8, r1
 800fd18:	9002      	str	r0, [sp, #8]
 800fd1a:	49b8      	ldr	r1, [pc, #736]	; (800fffc <__kernel_rem_pio2f+0x2f0>)
 800fd1c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800fd1e:	9301      	str	r3, [sp, #4]
 800fd20:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800fd24:	9901      	ldr	r1, [sp, #4]
 800fd26:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800fd28:	f101 3bff 	add.w	fp, r1, #4294967295
 800fd2c:	1d11      	adds	r1, r2, #4
 800fd2e:	db25      	blt.n	800fd7c <__kernel_rem_pio2f+0x70>
 800fd30:	1ed0      	subs	r0, r2, #3
 800fd32:	bf48      	it	mi
 800fd34:	1d10      	addmi	r0, r2, #4
 800fd36:	10c0      	asrs	r0, r0, #3
 800fd38:	1c45      	adds	r5, r0, #1
 800fd3a:	00e9      	lsls	r1, r5, #3
 800fd3c:	eba0 070b 	sub.w	r7, r0, fp
 800fd40:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801000c <__kernel_rem_pio2f+0x300>
 800fd44:	9103      	str	r1, [sp, #12]
 800fd46:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800fd4a:	eb0a 0c0b 	add.w	ip, sl, fp
 800fd4e:	ae1c      	add	r6, sp, #112	; 0x70
 800fd50:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800fd54:	2400      	movs	r4, #0
 800fd56:	4564      	cmp	r4, ip
 800fd58:	dd12      	ble.n	800fd80 <__kernel_rem_pio2f+0x74>
 800fd5a:	9901      	ldr	r1, [sp, #4]
 800fd5c:	ac1c      	add	r4, sp, #112	; 0x70
 800fd5e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800fd62:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800fd66:	f04f 0c00 	mov.w	ip, #0
 800fd6a:	45d4      	cmp	ip, sl
 800fd6c:	dc27      	bgt.n	800fdbe <__kernel_rem_pio2f+0xb2>
 800fd6e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800fd72:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801000c <__kernel_rem_pio2f+0x300>
 800fd76:	4627      	mov	r7, r4
 800fd78:	2600      	movs	r6, #0
 800fd7a:	e016      	b.n	800fdaa <__kernel_rem_pio2f+0x9e>
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	e7db      	b.n	800fd38 <__kernel_rem_pio2f+0x2c>
 800fd80:	42e7      	cmn	r7, r4
 800fd82:	bf5d      	ittte	pl
 800fd84:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800fd88:	ee07 1a90 	vmovpl	s15, r1
 800fd8c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fd90:	eef0 7a47 	vmovmi.f32	s15, s14
 800fd94:	ece6 7a01 	vstmia	r6!, {s15}
 800fd98:	3401      	adds	r4, #1
 800fd9a:	e7dc      	b.n	800fd56 <__kernel_rem_pio2f+0x4a>
 800fd9c:	ecfe 6a01 	vldmia	lr!, {s13}
 800fda0:	ed97 7a00 	vldr	s14, [r7]
 800fda4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fda8:	3601      	adds	r6, #1
 800fdaa:	455e      	cmp	r6, fp
 800fdac:	f1a7 0704 	sub.w	r7, r7, #4
 800fdb0:	ddf4      	ble.n	800fd9c <__kernel_rem_pio2f+0x90>
 800fdb2:	ece9 7a01 	vstmia	r9!, {s15}
 800fdb6:	f10c 0c01 	add.w	ip, ip, #1
 800fdba:	3404      	adds	r4, #4
 800fdbc:	e7d5      	b.n	800fd6a <__kernel_rem_pio2f+0x5e>
 800fdbe:	a908      	add	r1, sp, #32
 800fdc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fdc4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800fdc8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8010008 <__kernel_rem_pio2f+0x2fc>
 800fdcc:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8010004 <__kernel_rem_pio2f+0x2f8>
 800fdd0:	9105      	str	r1, [sp, #20]
 800fdd2:	9304      	str	r3, [sp, #16]
 800fdd4:	4656      	mov	r6, sl
 800fdd6:	00b3      	lsls	r3, r6, #2
 800fdd8:	9306      	str	r3, [sp, #24]
 800fdda:	ab58      	add	r3, sp, #352	; 0x160
 800fddc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800fde0:	ac08      	add	r4, sp, #32
 800fde2:	ab44      	add	r3, sp, #272	; 0x110
 800fde4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800fde8:	46a4      	mov	ip, r4
 800fdea:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800fdee:	4637      	mov	r7, r6
 800fdf0:	2f00      	cmp	r7, #0
 800fdf2:	f1a0 0004 	sub.w	r0, r0, #4
 800fdf6:	dc4a      	bgt.n	800fe8e <__kernel_rem_pio2f+0x182>
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	9207      	str	r2, [sp, #28]
 800fdfc:	f000 f9f8 	bl	80101f0 <scalbnf>
 800fe00:	eeb0 8a40 	vmov.f32	s16, s0
 800fe04:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800fe08:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fe0c:	f000 fa56 	bl	80102bc <floorf>
 800fe10:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800fe14:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fe18:	2d00      	cmp	r5, #0
 800fe1a:	9a07      	ldr	r2, [sp, #28]
 800fe1c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fe20:	ee17 9a90 	vmov	r9, s15
 800fe24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe28:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fe2c:	dd41      	ble.n	800feb2 <__kernel_rem_pio2f+0x1a6>
 800fe2e:	f106 3cff 	add.w	ip, r6, #4294967295
 800fe32:	ab08      	add	r3, sp, #32
 800fe34:	f1c5 0e08 	rsb	lr, r5, #8
 800fe38:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800fe3c:	fa47 f00e 	asr.w	r0, r7, lr
 800fe40:	4481      	add	r9, r0
 800fe42:	fa00 f00e 	lsl.w	r0, r0, lr
 800fe46:	1a3f      	subs	r7, r7, r0
 800fe48:	f1c5 0007 	rsb	r0, r5, #7
 800fe4c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800fe50:	4107      	asrs	r7, r0
 800fe52:	2f00      	cmp	r7, #0
 800fe54:	dd3c      	ble.n	800fed0 <__kernel_rem_pio2f+0x1c4>
 800fe56:	f04f 0e00 	mov.w	lr, #0
 800fe5a:	f109 0901 	add.w	r9, r9, #1
 800fe5e:	4671      	mov	r1, lr
 800fe60:	4576      	cmp	r6, lr
 800fe62:	dc67      	bgt.n	800ff34 <__kernel_rem_pio2f+0x228>
 800fe64:	2d00      	cmp	r5, #0
 800fe66:	dd03      	ble.n	800fe70 <__kernel_rem_pio2f+0x164>
 800fe68:	2d01      	cmp	r5, #1
 800fe6a:	d074      	beq.n	800ff56 <__kernel_rem_pio2f+0x24a>
 800fe6c:	2d02      	cmp	r5, #2
 800fe6e:	d07b      	beq.n	800ff68 <__kernel_rem_pio2f+0x25c>
 800fe70:	2f02      	cmp	r7, #2
 800fe72:	d12d      	bne.n	800fed0 <__kernel_rem_pio2f+0x1c4>
 800fe74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fe78:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fe7c:	b341      	cbz	r1, 800fed0 <__kernel_rem_pio2f+0x1c4>
 800fe7e:	4628      	mov	r0, r5
 800fe80:	9207      	str	r2, [sp, #28]
 800fe82:	f000 f9b5 	bl	80101f0 <scalbnf>
 800fe86:	9a07      	ldr	r2, [sp, #28]
 800fe88:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fe8c:	e020      	b.n	800fed0 <__kernel_rem_pio2f+0x1c4>
 800fe8e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fe92:	3f01      	subs	r7, #1
 800fe94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe9c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fea0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fea4:	ecac 0a01 	vstmia	ip!, {s0}
 800fea8:	ed90 0a00 	vldr	s0, [r0]
 800feac:	ee37 0a80 	vadd.f32	s0, s15, s0
 800feb0:	e79e      	b.n	800fdf0 <__kernel_rem_pio2f+0xe4>
 800feb2:	d105      	bne.n	800fec0 <__kernel_rem_pio2f+0x1b4>
 800feb4:	1e70      	subs	r0, r6, #1
 800feb6:	ab08      	add	r3, sp, #32
 800feb8:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800febc:	11ff      	asrs	r7, r7, #7
 800febe:	e7c8      	b.n	800fe52 <__kernel_rem_pio2f+0x146>
 800fec0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fec4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fecc:	da30      	bge.n	800ff30 <__kernel_rem_pio2f+0x224>
 800fece:	2700      	movs	r7, #0
 800fed0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fed8:	f040 809a 	bne.w	8010010 <__kernel_rem_pio2f+0x304>
 800fedc:	1e74      	subs	r4, r6, #1
 800fede:	46a4      	mov	ip, r4
 800fee0:	2100      	movs	r1, #0
 800fee2:	45d4      	cmp	ip, sl
 800fee4:	da47      	bge.n	800ff76 <__kernel_rem_pio2f+0x26a>
 800fee6:	2900      	cmp	r1, #0
 800fee8:	d063      	beq.n	800ffb2 <__kernel_rem_pio2f+0x2a6>
 800feea:	ab08      	add	r3, sp, #32
 800feec:	3d08      	subs	r5, #8
 800feee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d07f      	beq.n	800fff6 <__kernel_rem_pio2f+0x2ea>
 800fef6:	4628      	mov	r0, r5
 800fef8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fefc:	f000 f978 	bl	80101f0 <scalbnf>
 800ff00:	1c63      	adds	r3, r4, #1
 800ff02:	aa44      	add	r2, sp, #272	; 0x110
 800ff04:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8010008 <__kernel_rem_pio2f+0x2fc>
 800ff08:	0099      	lsls	r1, r3, #2
 800ff0a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ff0e:	4623      	mov	r3, r4
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	f280 80ad 	bge.w	8010070 <__kernel_rem_pio2f+0x364>
 800ff16:	4623      	mov	r3, r4
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	f2c0 80cb 	blt.w	80100b4 <__kernel_rem_pio2f+0x3a8>
 800ff1e:	aa44      	add	r2, sp, #272	; 0x110
 800ff20:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ff24:	4e36      	ldr	r6, [pc, #216]	; (8010000 <__kernel_rem_pio2f+0x2f4>)
 800ff26:	eddf 7a39 	vldr	s15, [pc, #228]	; 801000c <__kernel_rem_pio2f+0x300>
 800ff2a:	2000      	movs	r0, #0
 800ff2c:	1ae2      	subs	r2, r4, r3
 800ff2e:	e0b6      	b.n	801009e <__kernel_rem_pio2f+0x392>
 800ff30:	2702      	movs	r7, #2
 800ff32:	e790      	b.n	800fe56 <__kernel_rem_pio2f+0x14a>
 800ff34:	6820      	ldr	r0, [r4, #0]
 800ff36:	b949      	cbnz	r1, 800ff4c <__kernel_rem_pio2f+0x240>
 800ff38:	b118      	cbz	r0, 800ff42 <__kernel_rem_pio2f+0x236>
 800ff3a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800ff3e:	6020      	str	r0, [r4, #0]
 800ff40:	2001      	movs	r0, #1
 800ff42:	f10e 0e01 	add.w	lr, lr, #1
 800ff46:	3404      	adds	r4, #4
 800ff48:	4601      	mov	r1, r0
 800ff4a:	e789      	b.n	800fe60 <__kernel_rem_pio2f+0x154>
 800ff4c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800ff50:	6020      	str	r0, [r4, #0]
 800ff52:	4608      	mov	r0, r1
 800ff54:	e7f5      	b.n	800ff42 <__kernel_rem_pio2f+0x236>
 800ff56:	1e74      	subs	r4, r6, #1
 800ff58:	ab08      	add	r3, sp, #32
 800ff5a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ff5e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ff62:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ff66:	e783      	b.n	800fe70 <__kernel_rem_pio2f+0x164>
 800ff68:	1e74      	subs	r4, r6, #1
 800ff6a:	ab08      	add	r3, sp, #32
 800ff6c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ff70:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800ff74:	e7f5      	b.n	800ff62 <__kernel_rem_pio2f+0x256>
 800ff76:	ab08      	add	r3, sp, #32
 800ff78:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800ff7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ff80:	4301      	orrs	r1, r0
 800ff82:	e7ae      	b.n	800fee2 <__kernel_rem_pio2f+0x1d6>
 800ff84:	3001      	adds	r0, #1
 800ff86:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800ff8a:	2f00      	cmp	r7, #0
 800ff8c:	d0fa      	beq.n	800ff84 <__kernel_rem_pio2f+0x278>
 800ff8e:	9b06      	ldr	r3, [sp, #24]
 800ff90:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800ff94:	eb0d 0403 	add.w	r4, sp, r3
 800ff98:	9b01      	ldr	r3, [sp, #4]
 800ff9a:	18f7      	adds	r7, r6, r3
 800ff9c:	ab1c      	add	r3, sp, #112	; 0x70
 800ff9e:	f106 0c01 	add.w	ip, r6, #1
 800ffa2:	3c4c      	subs	r4, #76	; 0x4c
 800ffa4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ffa8:	4430      	add	r0, r6
 800ffaa:	4560      	cmp	r0, ip
 800ffac:	da04      	bge.n	800ffb8 <__kernel_rem_pio2f+0x2ac>
 800ffae:	4606      	mov	r6, r0
 800ffb0:	e711      	b.n	800fdd6 <__kernel_rem_pio2f+0xca>
 800ffb2:	9c05      	ldr	r4, [sp, #20]
 800ffb4:	2001      	movs	r0, #1
 800ffb6:	e7e6      	b.n	800ff86 <__kernel_rem_pio2f+0x27a>
 800ffb8:	9b04      	ldr	r3, [sp, #16]
 800ffba:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ffbe:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ffc2:	9306      	str	r3, [sp, #24]
 800ffc4:	ee07 3a90 	vmov	s15, r3
 800ffc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ffcc:	2600      	movs	r6, #0
 800ffce:	ece7 7a01 	vstmia	r7!, {s15}
 800ffd2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801000c <__kernel_rem_pio2f+0x300>
 800ffd6:	46b9      	mov	r9, r7
 800ffd8:	455e      	cmp	r6, fp
 800ffda:	dd04      	ble.n	800ffe6 <__kernel_rem_pio2f+0x2da>
 800ffdc:	ece4 7a01 	vstmia	r4!, {s15}
 800ffe0:	f10c 0c01 	add.w	ip, ip, #1
 800ffe4:	e7e1      	b.n	800ffaa <__kernel_rem_pio2f+0x29e>
 800ffe6:	ecfe 6a01 	vldmia	lr!, {s13}
 800ffea:	ed39 7a01 	vldmdb	r9!, {s14}
 800ffee:	3601      	adds	r6, #1
 800fff0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fff4:	e7f0      	b.n	800ffd8 <__kernel_rem_pio2f+0x2cc>
 800fff6:	3c01      	subs	r4, #1
 800fff8:	e777      	b.n	800feea <__kernel_rem_pio2f+0x1de>
 800fffa:	bf00      	nop
 800fffc:	080107e8 	.word	0x080107e8
 8010000:	080107bc 	.word	0x080107bc
 8010004:	43800000 	.word	0x43800000
 8010008:	3b800000 	.word	0x3b800000
 801000c:	00000000 	.word	0x00000000
 8010010:	9b03      	ldr	r3, [sp, #12]
 8010012:	eeb0 0a48 	vmov.f32	s0, s16
 8010016:	1a98      	subs	r0, r3, r2
 8010018:	f000 f8ea 	bl	80101f0 <scalbnf>
 801001c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8010004 <__kernel_rem_pio2f+0x2f8>
 8010020:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010028:	db19      	blt.n	801005e <__kernel_rem_pio2f+0x352>
 801002a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8010008 <__kernel_rem_pio2f+0x2fc>
 801002e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010032:	aa08      	add	r2, sp, #32
 8010034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010038:	1c74      	adds	r4, r6, #1
 801003a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801003e:	3508      	adds	r5, #8
 8010040:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010048:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801004c:	ee10 3a10 	vmov	r3, s0
 8010050:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010054:	ee17 3a90 	vmov	r3, s15
 8010058:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801005c:	e74b      	b.n	800fef6 <__kernel_rem_pio2f+0x1ea>
 801005e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010062:	aa08      	add	r2, sp, #32
 8010064:	ee10 3a10 	vmov	r3, s0
 8010068:	4634      	mov	r4, r6
 801006a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801006e:	e742      	b.n	800fef6 <__kernel_rem_pio2f+0x1ea>
 8010070:	a808      	add	r0, sp, #32
 8010072:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8010076:	9001      	str	r0, [sp, #4]
 8010078:	ee07 0a90 	vmov	s15, r0
 801007c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010080:	3b01      	subs	r3, #1
 8010082:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010086:	ee20 0a07 	vmul.f32	s0, s0, s14
 801008a:	ed62 7a01 	vstmdb	r2!, {s15}
 801008e:	e73f      	b.n	800ff10 <__kernel_rem_pio2f+0x204>
 8010090:	ecf6 6a01 	vldmia	r6!, {s13}
 8010094:	ecb5 7a01 	vldmia	r5!, {s14}
 8010098:	eee6 7a87 	vfma.f32	s15, s13, s14
 801009c:	3001      	adds	r0, #1
 801009e:	4550      	cmp	r0, sl
 80100a0:	dc01      	bgt.n	80100a6 <__kernel_rem_pio2f+0x39a>
 80100a2:	4290      	cmp	r0, r2
 80100a4:	ddf4      	ble.n	8010090 <__kernel_rem_pio2f+0x384>
 80100a6:	a858      	add	r0, sp, #352	; 0x160
 80100a8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80100ac:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80100b0:	3b01      	subs	r3, #1
 80100b2:	e731      	b.n	800ff18 <__kernel_rem_pio2f+0x20c>
 80100b4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80100b6:	2b02      	cmp	r3, #2
 80100b8:	dc09      	bgt.n	80100ce <__kernel_rem_pio2f+0x3c2>
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	dc2b      	bgt.n	8010116 <__kernel_rem_pio2f+0x40a>
 80100be:	d044      	beq.n	801014a <__kernel_rem_pio2f+0x43e>
 80100c0:	f009 0007 	and.w	r0, r9, #7
 80100c4:	b059      	add	sp, #356	; 0x164
 80100c6:	ecbd 8b04 	vpop	{d8-d9}
 80100ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ce:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80100d0:	2b03      	cmp	r3, #3
 80100d2:	d1f5      	bne.n	80100c0 <__kernel_rem_pio2f+0x3b4>
 80100d4:	aa30      	add	r2, sp, #192	; 0xc0
 80100d6:	1f0b      	subs	r3, r1, #4
 80100d8:	4413      	add	r3, r2
 80100da:	461a      	mov	r2, r3
 80100dc:	4620      	mov	r0, r4
 80100de:	2800      	cmp	r0, #0
 80100e0:	f1a2 0204 	sub.w	r2, r2, #4
 80100e4:	dc52      	bgt.n	801018c <__kernel_rem_pio2f+0x480>
 80100e6:	4622      	mov	r2, r4
 80100e8:	2a01      	cmp	r2, #1
 80100ea:	f1a3 0304 	sub.w	r3, r3, #4
 80100ee:	dc5d      	bgt.n	80101ac <__kernel_rem_pio2f+0x4a0>
 80100f0:	ab30      	add	r3, sp, #192	; 0xc0
 80100f2:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801000c <__kernel_rem_pio2f+0x300>
 80100f6:	440b      	add	r3, r1
 80100f8:	2c01      	cmp	r4, #1
 80100fa:	dc67      	bgt.n	80101cc <__kernel_rem_pio2f+0x4c0>
 80100fc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8010100:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8010104:	2f00      	cmp	r7, #0
 8010106:	d167      	bne.n	80101d8 <__kernel_rem_pio2f+0x4cc>
 8010108:	edc8 6a00 	vstr	s13, [r8]
 801010c:	ed88 7a01 	vstr	s14, [r8, #4]
 8010110:	edc8 7a02 	vstr	s15, [r8, #8]
 8010114:	e7d4      	b.n	80100c0 <__kernel_rem_pio2f+0x3b4>
 8010116:	ab30      	add	r3, sp, #192	; 0xc0
 8010118:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801000c <__kernel_rem_pio2f+0x300>
 801011c:	440b      	add	r3, r1
 801011e:	4622      	mov	r2, r4
 8010120:	2a00      	cmp	r2, #0
 8010122:	da24      	bge.n	801016e <__kernel_rem_pio2f+0x462>
 8010124:	b34f      	cbz	r7, 801017a <__kernel_rem_pio2f+0x46e>
 8010126:	eef1 7a47 	vneg.f32	s15, s14
 801012a:	edc8 7a00 	vstr	s15, [r8]
 801012e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8010132:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010136:	aa31      	add	r2, sp, #196	; 0xc4
 8010138:	2301      	movs	r3, #1
 801013a:	429c      	cmp	r4, r3
 801013c:	da20      	bge.n	8010180 <__kernel_rem_pio2f+0x474>
 801013e:	b10f      	cbz	r7, 8010144 <__kernel_rem_pio2f+0x438>
 8010140:	eef1 7a67 	vneg.f32	s15, s15
 8010144:	edc8 7a01 	vstr	s15, [r8, #4]
 8010148:	e7ba      	b.n	80100c0 <__kernel_rem_pio2f+0x3b4>
 801014a:	ab30      	add	r3, sp, #192	; 0xc0
 801014c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801000c <__kernel_rem_pio2f+0x300>
 8010150:	440b      	add	r3, r1
 8010152:	2c00      	cmp	r4, #0
 8010154:	da05      	bge.n	8010162 <__kernel_rem_pio2f+0x456>
 8010156:	b10f      	cbz	r7, 801015c <__kernel_rem_pio2f+0x450>
 8010158:	eef1 7a67 	vneg.f32	s15, s15
 801015c:	edc8 7a00 	vstr	s15, [r8]
 8010160:	e7ae      	b.n	80100c0 <__kernel_rem_pio2f+0x3b4>
 8010162:	ed33 7a01 	vldmdb	r3!, {s14}
 8010166:	3c01      	subs	r4, #1
 8010168:	ee77 7a87 	vadd.f32	s15, s15, s14
 801016c:	e7f1      	b.n	8010152 <__kernel_rem_pio2f+0x446>
 801016e:	ed73 7a01 	vldmdb	r3!, {s15}
 8010172:	3a01      	subs	r2, #1
 8010174:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010178:	e7d2      	b.n	8010120 <__kernel_rem_pio2f+0x414>
 801017a:	eef0 7a47 	vmov.f32	s15, s14
 801017e:	e7d4      	b.n	801012a <__kernel_rem_pio2f+0x41e>
 8010180:	ecb2 7a01 	vldmia	r2!, {s14}
 8010184:	3301      	adds	r3, #1
 8010186:	ee77 7a87 	vadd.f32	s15, s15, s14
 801018a:	e7d6      	b.n	801013a <__kernel_rem_pio2f+0x42e>
 801018c:	edd2 7a00 	vldr	s15, [r2]
 8010190:	edd2 6a01 	vldr	s13, [r2, #4]
 8010194:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010198:	3801      	subs	r0, #1
 801019a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801019e:	ed82 7a00 	vstr	s14, [r2]
 80101a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101a6:	edc2 7a01 	vstr	s15, [r2, #4]
 80101aa:	e798      	b.n	80100de <__kernel_rem_pio2f+0x3d2>
 80101ac:	edd3 7a00 	vldr	s15, [r3]
 80101b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80101b4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80101b8:	3a01      	subs	r2, #1
 80101ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80101be:	ed83 7a00 	vstr	s14, [r3]
 80101c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101c6:	edc3 7a01 	vstr	s15, [r3, #4]
 80101ca:	e78d      	b.n	80100e8 <__kernel_rem_pio2f+0x3dc>
 80101cc:	ed33 7a01 	vldmdb	r3!, {s14}
 80101d0:	3c01      	subs	r4, #1
 80101d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80101d6:	e78f      	b.n	80100f8 <__kernel_rem_pio2f+0x3ec>
 80101d8:	eef1 6a66 	vneg.f32	s13, s13
 80101dc:	eeb1 7a47 	vneg.f32	s14, s14
 80101e0:	edc8 6a00 	vstr	s13, [r8]
 80101e4:	ed88 7a01 	vstr	s14, [r8, #4]
 80101e8:	eef1 7a67 	vneg.f32	s15, s15
 80101ec:	e790      	b.n	8010110 <__kernel_rem_pio2f+0x404>
 80101ee:	bf00      	nop

080101f0 <scalbnf>:
 80101f0:	ee10 3a10 	vmov	r3, s0
 80101f4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80101f8:	d02b      	beq.n	8010252 <scalbnf+0x62>
 80101fa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80101fe:	d302      	bcc.n	8010206 <scalbnf+0x16>
 8010200:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010204:	4770      	bx	lr
 8010206:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801020a:	d123      	bne.n	8010254 <scalbnf+0x64>
 801020c:	4b24      	ldr	r3, [pc, #144]	; (80102a0 <scalbnf+0xb0>)
 801020e:	eddf 7a25 	vldr	s15, [pc, #148]	; 80102a4 <scalbnf+0xb4>
 8010212:	4298      	cmp	r0, r3
 8010214:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010218:	db17      	blt.n	801024a <scalbnf+0x5a>
 801021a:	ee10 3a10 	vmov	r3, s0
 801021e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010222:	3a19      	subs	r2, #25
 8010224:	f24c 3150 	movw	r1, #50000	; 0xc350
 8010228:	4288      	cmp	r0, r1
 801022a:	dd15      	ble.n	8010258 <scalbnf+0x68>
 801022c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80102a8 <scalbnf+0xb8>
 8010230:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80102ac <scalbnf+0xbc>
 8010234:	ee10 3a10 	vmov	r3, s0
 8010238:	eeb0 7a67 	vmov.f32	s14, s15
 801023c:	2b00      	cmp	r3, #0
 801023e:	bfb8      	it	lt
 8010240:	eef0 7a66 	vmovlt.f32	s15, s13
 8010244:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010248:	4770      	bx	lr
 801024a:	eddf 7a19 	vldr	s15, [pc, #100]	; 80102b0 <scalbnf+0xc0>
 801024e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010252:	4770      	bx	lr
 8010254:	0dd2      	lsrs	r2, r2, #23
 8010256:	e7e5      	b.n	8010224 <scalbnf+0x34>
 8010258:	4410      	add	r0, r2
 801025a:	28fe      	cmp	r0, #254	; 0xfe
 801025c:	dce6      	bgt.n	801022c <scalbnf+0x3c>
 801025e:	2800      	cmp	r0, #0
 8010260:	dd06      	ble.n	8010270 <scalbnf+0x80>
 8010262:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010266:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801026a:	ee00 3a10 	vmov	s0, r3
 801026e:	4770      	bx	lr
 8010270:	f110 0f16 	cmn.w	r0, #22
 8010274:	da09      	bge.n	801028a <scalbnf+0x9a>
 8010276:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80102b0 <scalbnf+0xc0>
 801027a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80102b4 <scalbnf+0xc4>
 801027e:	ee10 3a10 	vmov	r3, s0
 8010282:	eeb0 7a67 	vmov.f32	s14, s15
 8010286:	2b00      	cmp	r3, #0
 8010288:	e7d9      	b.n	801023e <scalbnf+0x4e>
 801028a:	3019      	adds	r0, #25
 801028c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010290:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010294:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80102b8 <scalbnf+0xc8>
 8010298:	ee07 3a90 	vmov	s15, r3
 801029c:	e7d7      	b.n	801024e <scalbnf+0x5e>
 801029e:	bf00      	nop
 80102a0:	ffff3cb0 	.word	0xffff3cb0
 80102a4:	4c000000 	.word	0x4c000000
 80102a8:	7149f2ca 	.word	0x7149f2ca
 80102ac:	f149f2ca 	.word	0xf149f2ca
 80102b0:	0da24260 	.word	0x0da24260
 80102b4:	8da24260 	.word	0x8da24260
 80102b8:	33000000 	.word	0x33000000

080102bc <floorf>:
 80102bc:	ee10 3a10 	vmov	r3, s0
 80102c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80102c4:	3a7f      	subs	r2, #127	; 0x7f
 80102c6:	2a16      	cmp	r2, #22
 80102c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80102cc:	dc2a      	bgt.n	8010324 <floorf+0x68>
 80102ce:	2a00      	cmp	r2, #0
 80102d0:	da11      	bge.n	80102f6 <floorf+0x3a>
 80102d2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8010334 <floorf+0x78>
 80102d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80102da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80102de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e2:	dd05      	ble.n	80102f0 <floorf+0x34>
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	da23      	bge.n	8010330 <floorf+0x74>
 80102e8:	4a13      	ldr	r2, [pc, #76]	; (8010338 <floorf+0x7c>)
 80102ea:	2900      	cmp	r1, #0
 80102ec:	bf18      	it	ne
 80102ee:	4613      	movne	r3, r2
 80102f0:	ee00 3a10 	vmov	s0, r3
 80102f4:	4770      	bx	lr
 80102f6:	4911      	ldr	r1, [pc, #68]	; (801033c <floorf+0x80>)
 80102f8:	4111      	asrs	r1, r2
 80102fa:	420b      	tst	r3, r1
 80102fc:	d0fa      	beq.n	80102f4 <floorf+0x38>
 80102fe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8010334 <floorf+0x78>
 8010302:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010306:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801030a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801030e:	ddef      	ble.n	80102f0 <floorf+0x34>
 8010310:	2b00      	cmp	r3, #0
 8010312:	bfbe      	ittt	lt
 8010314:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8010318:	fa40 f202 	asrlt.w	r2, r0, r2
 801031c:	189b      	addlt	r3, r3, r2
 801031e:	ea23 0301 	bic.w	r3, r3, r1
 8010322:	e7e5      	b.n	80102f0 <floorf+0x34>
 8010324:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010328:	d3e4      	bcc.n	80102f4 <floorf+0x38>
 801032a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801032e:	4770      	bx	lr
 8010330:	2300      	movs	r3, #0
 8010332:	e7dd      	b.n	80102f0 <floorf+0x34>
 8010334:	7149f2ca 	.word	0x7149f2ca
 8010338:	bf800000 	.word	0xbf800000
 801033c:	007fffff 	.word	0x007fffff

08010340 <_init>:
 8010340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010342:	bf00      	nop
 8010344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010346:	bc08      	pop	{r3}
 8010348:	469e      	mov	lr, r3
 801034a:	4770      	bx	lr

0801034c <_fini>:
 801034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801034e:	bf00      	nop
 8010350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010352:	bc08      	pop	{r3}
 8010354:	469e      	mov	lr, r3
 8010356:	4770      	bx	lr
